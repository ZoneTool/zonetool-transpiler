// ======================================================================
// Code generated by zonetool-transpiler.
// Do not modify the contents of this file. Any change will be
//   overwritten when re-running the tool.
// 
// "No matter how hard or unlikely, if it's possible, it will be done."
// ======================================================================

#include "stdafx.hpp"
#include "base_types.hpp"
#include "iw4.hpp"

namespace zonetool::linkers::iw4
{
$C8D87EB0090687D323381DFB7A82089C* AllocLoad_$C8D87EB0090687D323381DFB7A82089C();
$C8D87EB0090687D323381DFB7A82089C* AllocSave_$C8D87EB0090687D323381DFB7A82089C();
$C8D87EB0090687D323381DFB7A82089C** AllocLoad_$C8D87EB0090687D323381DFB7A82089CPtr();
$C8D87EB0090687D323381DFB7A82089C** AllocSave_$C8D87EB0090687D323381DFB7A82089CPtr();
$E43DBA5037697D705289B74D87E76C70* AllocLoad_$E43DBA5037697D705289B74D87E76C70();
$E43DBA5037697D705289B74D87E76C70* AllocSave_$E43DBA5037697D705289B74D87E76C70();
$E43DBA5037697D705289B74D87E76C70** AllocLoad_$E43DBA5037697D705289B74D87E76C70Ptr();
$E43DBA5037697D705289B74D87E76C70** AllocSave_$E43DBA5037697D705289B74D87E76C70Ptr();
Bounds* AllocLoad_Bounds();
Bounds* AllocSave_Bounds();
Bounds** AllocLoad_BoundsPtr();
Bounds** AllocSave_BoundsPtr();
BrushWrapper* AllocLoad_BrushWrapper();
BrushWrapper* AllocSave_BrushWrapper();
BrushWrapper** AllocLoad_BrushWrapperPtr();
BrushWrapper** AllocSave_BrushWrapperPtr();
CardMemory* AllocLoad_CardMemory();
CardMemory* AllocSave_CardMemory();
CardMemory** AllocLoad_CardMemoryPtr();
CardMemory** AllocSave_CardMemoryPtr();
ClipMaterial* AllocLoad_ClipMaterial();
ClipMaterial* AllocSave_ClipMaterial();
ClipMaterial** AllocLoad_ClipMaterialPtr();
ClipMaterial** AllocSave_ClipMaterialPtr();
CollisionAabbTree* AllocLoad_CollisionAabbTree();
CollisionAabbTree* AllocSave_CollisionAabbTree();
CollisionAabbTree** AllocLoad_CollisionAabbTreePtr();
CollisionAabbTree** AllocSave_CollisionAabbTreePtr();
CollisionAabbTreeIndex* AllocLoad_CollisionAabbTreeIndex();
CollisionAabbTreeIndex* AllocSave_CollisionAabbTreeIndex();
CollisionAabbTreeIndex** AllocLoad_CollisionAabbTreeIndexPtr();
CollisionAabbTreeIndex** AllocSave_CollisionAabbTreeIndexPtr();
CollisionBorder* AllocLoad_CollisionBorder();
CollisionBorder* AllocSave_CollisionBorder();
CollisionBorder** AllocLoad_CollisionBorderPtr();
CollisionBorder** AllocSave_CollisionBorderPtr();
CollisionPartition* AllocLoad_CollisionPartition();
CollisionPartition* AllocSave_CollisionPartition();
CollisionPartition** AllocLoad_CollisionPartitionPtr();
CollisionPartition** AllocSave_CollisionPartitionPtr();
ComPrimaryLight* AllocLoad_ComPrimaryLight();
ComPrimaryLight* AllocSave_ComPrimaryLight();
ComPrimaryLight** AllocLoad_ComPrimaryLightPtr();
ComPrimaryLight** AllocSave_ComPrimaryLightPtr();
ComWorld* AllocLoad_ComWorld();
ComWorld* AllocSave_ComWorld();
ComWorld** AllocLoad_ComWorldPtr();
ComWorld** AllocSave_ComWorldPtr();
ConditionalScript* AllocLoad_ConditionalScript();
ConditionalScript* AllocSave_ConditionalScript();
ConditionalScript** AllocLoad_ConditionalScriptPtr();
ConditionalScript** AllocSave_ConditionalScriptPtr();
DObjAnimMat* AllocLoad_DObjAnimMat();
DObjAnimMat* AllocSave_DObjAnimMat();
DObjAnimMat** AllocLoad_DObjAnimMatPtr();
DObjAnimMat** AllocSave_DObjAnimMatPtr();
DynEntityClient* AllocLoad_DynEntityClient();
DynEntityClient* AllocSave_DynEntityClient();
DynEntityClient** AllocLoad_DynEntityClientPtr();
DynEntityClient** AllocSave_DynEntityClientPtr();
DynEntityColl* AllocLoad_DynEntityColl();
DynEntityColl* AllocSave_DynEntityColl();
DynEntityColl** AllocLoad_DynEntityCollPtr();
DynEntityColl** AllocSave_DynEntityCollPtr();
DynEntityDef* AllocLoad_DynEntityDef();
DynEntityDef* AllocSave_DynEntityDef();
DynEntityDef** AllocLoad_DynEntityDefPtr();
DynEntityDef** AllocSave_DynEntityDefPtr();
DynEntityPose* AllocLoad_DynEntityPose();
DynEntityPose* AllocSave_DynEntityPose();
DynEntityPose** AllocLoad_DynEntityPosePtr();
DynEntityPose** AllocSave_DynEntityPosePtr();
EventData* AllocLoad_EventData();
EventData* AllocSave_EventData();
EventData** AllocLoad_EventDataPtr();
EventData** AllocSave_EventDataPtr();
ExpressionString* AllocLoad_ExpressionString();
ExpressionString* AllocSave_ExpressionString();
ExpressionString** AllocLoad_ExpressionStringPtr();
ExpressionString** AllocSave_ExpressionStringPtr();
ExpressionSupportingData* AllocLoad_ExpressionSupportingData();
ExpressionSupportingData* AllocSave_ExpressionSupportingData();
ExpressionSupportingData** AllocLoad_ExpressionSupportingDataPtr();
ExpressionSupportingData** AllocSave_ExpressionSupportingDataPtr();
Font_s* AllocLoad_Font_s();
Font_s* AllocSave_Font_s();
Font_s** AllocLoad_Font_sPtr();
Font_s** AllocSave_Font_sPtr();
FxEffectDef* AllocLoad_FxEffectDef();
FxEffectDef* AllocSave_FxEffectDef();
FxEffectDef** AllocLoad_FxEffectDefPtr();
FxEffectDef** AllocSave_FxEffectDefPtr();
FxEffectDefRef* AllocLoad_FxEffectDefRef();
FxEffectDefRef* AllocSave_FxEffectDefRef();
FxEffectDefRef** AllocLoad_FxEffectDefRefPtr();
FxEffectDefRef** AllocSave_FxEffectDefRefPtr();
FxElemAtlas* AllocLoad_FxElemAtlas();
FxElemAtlas* AllocSave_FxElemAtlas();
FxElemAtlas** AllocLoad_FxElemAtlasPtr();
FxElemAtlas** AllocSave_FxElemAtlasPtr();
FxElemDef* AllocLoad_FxElemDef();
FxElemDef* AllocSave_FxElemDef();
FxElemDef** AllocLoad_FxElemDefPtr();
FxElemDef** AllocSave_FxElemDefPtr();
FxElemDefVisuals* AllocLoad_FxElemDefVisuals();
FxElemDefVisuals* AllocSave_FxElemDefVisuals();
FxElemDefVisuals** AllocLoad_FxElemDefVisualsPtr();
FxElemDefVisuals** AllocSave_FxElemDefVisualsPtr();
FxElemExtendedDefPtr* AllocLoad_FxElemExtendedDefPtr();
FxElemExtendedDefPtr* AllocSave_FxElemExtendedDefPtr();
FxElemExtendedDefPtr** AllocLoad_FxElemExtendedDefPtrPtr();
FxElemExtendedDefPtr** AllocSave_FxElemExtendedDefPtrPtr();
FxElemMarkVisuals* AllocLoad_FxElemMarkVisuals();
FxElemMarkVisuals* AllocSave_FxElemMarkVisuals();
FxElemMarkVisuals** AllocLoad_FxElemMarkVisualsPtr();
FxElemMarkVisuals** AllocSave_FxElemMarkVisualsPtr();
FxElemVec3Range* AllocLoad_FxElemVec3Range();
FxElemVec3Range* AllocSave_FxElemVec3Range();
FxElemVec3Range** AllocLoad_FxElemVec3RangePtr();
FxElemVec3Range** AllocSave_FxElemVec3RangePtr();
FxElemVelStateInFrame* AllocLoad_FxElemVelStateInFrame();
FxElemVelStateInFrame* AllocSave_FxElemVelStateInFrame();
FxElemVelStateInFrame** AllocLoad_FxElemVelStateInFramePtr();
FxElemVelStateInFrame** AllocSave_FxElemVelStateInFramePtr();
FxElemVelStateSample* AllocLoad_FxElemVelStateSample();
FxElemVelStateSample* AllocSave_FxElemVelStateSample();
FxElemVelStateSample** AllocLoad_FxElemVelStateSamplePtr();
FxElemVelStateSample** AllocSave_FxElemVelStateSamplePtr();
FxElemVisStateSample* AllocLoad_FxElemVisStateSample();
FxElemVisStateSample* AllocSave_FxElemVisStateSample();
FxElemVisStateSample** AllocLoad_FxElemVisStateSamplePtr();
FxElemVisStateSample** AllocSave_FxElemVisStateSamplePtr();
FxElemVisualState* AllocLoad_FxElemVisualState();
FxElemVisualState* AllocSave_FxElemVisualState();
FxElemVisualState** AllocLoad_FxElemVisualStatePtr();
FxElemVisualState** AllocSave_FxElemVisualStatePtr();
FxElemVisuals* AllocLoad_FxElemVisuals();
FxElemVisuals* AllocSave_FxElemVisuals();
FxElemVisuals** AllocLoad_FxElemVisualsPtr();
FxElemVisuals** AllocSave_FxElemVisualsPtr();
FxFloatRange* AllocLoad_FxFloatRange();
FxFloatRange* AllocSave_FxFloatRange();
FxFloatRange** AllocLoad_FxFloatRangePtr();
FxFloatRange** AllocSave_FxFloatRangePtr();
FxGlassCrackHeader* AllocLoad_FxGlassCrackHeader();
FxGlassCrackHeader* AllocSave_FxGlassCrackHeader();
FxGlassCrackHeader** AllocLoad_FxGlassCrackHeaderPtr();
FxGlassCrackHeader** AllocSave_FxGlassCrackHeaderPtr();
FxGlassDef* AllocLoad_FxGlassDef();
FxGlassDef* AllocSave_FxGlassDef();
FxGlassDef** AllocLoad_FxGlassDefPtr();
FxGlassDef** AllocSave_FxGlassDefPtr();
FxGlassGeometryData* AllocLoad_FxGlassGeometryData();
FxGlassGeometryData* AllocSave_FxGlassGeometryData();
FxGlassGeometryData** AllocLoad_FxGlassGeometryDataPtr();
FxGlassGeometryData** AllocSave_FxGlassGeometryDataPtr();
FxGlassHoleHeader* AllocLoad_FxGlassHoleHeader();
FxGlassHoleHeader* AllocSave_FxGlassHoleHeader();
FxGlassHoleHeader** AllocLoad_FxGlassHoleHeaderPtr();
FxGlassHoleHeader** AllocSave_FxGlassHoleHeaderPtr();
FxGlassInitPieceState* AllocLoad_FxGlassInitPieceState();
FxGlassInitPieceState* AllocSave_FxGlassInitPieceState();
FxGlassInitPieceState** AllocLoad_FxGlassInitPieceStatePtr();
FxGlassInitPieceState** AllocSave_FxGlassInitPieceStatePtr();
FxGlassPieceDynamics* AllocLoad_FxGlassPieceDynamics();
FxGlassPieceDynamics* AllocSave_FxGlassPieceDynamics();
FxGlassPieceDynamics** AllocLoad_FxGlassPieceDynamicsPtr();
FxGlassPieceDynamics** AllocSave_FxGlassPieceDynamicsPtr();
FxGlassPiecePlace* AllocLoad_FxGlassPiecePlace();
FxGlassPiecePlace* AllocSave_FxGlassPiecePlace();
FxGlassPiecePlace** AllocLoad_FxGlassPiecePlacePtr();
FxGlassPiecePlace** AllocSave_FxGlassPiecePlacePtr();
FxGlassPieceState* AllocLoad_FxGlassPieceState();
FxGlassPieceState* AllocSave_FxGlassPieceState();
FxGlassPieceState** AllocLoad_FxGlassPieceStatePtr();
FxGlassPieceState** AllocSave_FxGlassPieceStatePtr();
FxGlassSystem* AllocLoad_FxGlassSystem();
FxGlassSystem* AllocSave_FxGlassSystem();
FxGlassSystem** AllocLoad_FxGlassSystemPtr();
FxGlassSystem** AllocSave_FxGlassSystemPtr();
FxGlassVertex* AllocLoad_FxGlassVertex();
FxGlassVertex* AllocSave_FxGlassVertex();
FxGlassVertex** AllocLoad_FxGlassVertexPtr();
FxGlassVertex** AllocSave_FxGlassVertexPtr();
FxIntRange* AllocLoad_FxIntRange();
FxIntRange* AllocSave_FxIntRange();
FxIntRange** AllocLoad_FxIntRangePtr();
FxIntRange** AllocSave_FxIntRangePtr();
FxSparkFountainDef* AllocLoad_FxSparkFountainDef();
FxSparkFountainDef* AllocSave_FxSparkFountainDef();
FxSparkFountainDef** AllocLoad_FxSparkFountainDefPtr();
FxSparkFountainDef** AllocSave_FxSparkFountainDefPtr();
FxSpatialFrame* AllocLoad_FxSpatialFrame();
FxSpatialFrame* AllocSave_FxSpatialFrame();
FxSpatialFrame** AllocLoad_FxSpatialFramePtr();
FxSpatialFrame** AllocSave_FxSpatialFramePtr();
FxSpawnDef* AllocLoad_FxSpawnDef();
FxSpawnDef* AllocSave_FxSpawnDef();
FxSpawnDef** AllocLoad_FxSpawnDefPtr();
FxSpawnDef** AllocSave_FxSpawnDefPtr();
FxSpawnDefLooping* AllocLoad_FxSpawnDefLooping();
FxSpawnDefLooping* AllocSave_FxSpawnDefLooping();
FxSpawnDefLooping** AllocLoad_FxSpawnDefLoopingPtr();
FxSpawnDefLooping** AllocSave_FxSpawnDefLoopingPtr();
FxSpawnDefOneShot* AllocLoad_FxSpawnDefOneShot();
FxSpawnDefOneShot* AllocSave_FxSpawnDefOneShot();
FxSpawnDefOneShot** AllocLoad_FxSpawnDefOneShotPtr();
FxSpawnDefOneShot** AllocSave_FxSpawnDefOneShotPtr();
FxTrailDef* AllocLoad_FxTrailDef();
FxTrailDef* AllocSave_FxTrailDef();
FxTrailDef** AllocLoad_FxTrailDefPtr();
FxTrailDef** AllocSave_FxTrailDefPtr();
FxTrailVertex* AllocLoad_FxTrailVertex();
FxTrailVertex* AllocSave_FxTrailVertex();
FxTrailVertex** AllocLoad_FxTrailVertexPtr();
FxTrailVertex** AllocSave_FxTrailVertexPtr();
FxWorld* AllocLoad_FxWorld();
FxWorld* AllocSave_FxWorld();
FxWorld** AllocLoad_FxWorldPtr();
FxWorld** AllocSave_FxWorldPtr();
G_GlassData* AllocLoad_G_GlassData();
G_GlassData* AllocSave_G_GlassData();
G_GlassData** AllocLoad_G_GlassDataPtr();
G_GlassData** AllocSave_G_GlassDataPtr();
G_GlassName* AllocLoad_G_GlassName();
G_GlassName* AllocSave_G_GlassName();
G_GlassName** AllocLoad_G_GlassNamePtr();
G_GlassName** AllocSave_G_GlassNamePtr();
G_GlassPiece* AllocLoad_G_GlassPiece();
G_GlassPiece* AllocSave_G_GlassPiece();
G_GlassPiece** AllocLoad_G_GlassPiecePtr();
G_GlassPiece** AllocSave_G_GlassPiecePtr();
GameWorldMp* AllocLoad_GameWorldMp();
GameWorldMp* AllocSave_GameWorldMp();
GameWorldMp** AllocLoad_GameWorldMpPtr();
GameWorldMp** AllocSave_GameWorldMpPtr();
GfxColor* AllocLoad_GfxColor();
GfxColor* AllocSave_GfxColor();
GfxColor** AllocLoad_GfxColorPtr();
GfxColor** AllocSave_GfxColorPtr();
GfxDrawSurf* AllocLoad_GfxDrawSurf();
GfxDrawSurf* AllocSave_GfxDrawSurf();
GfxDrawSurf** AllocLoad_GfxDrawSurfPtr();
GfxDrawSurf** AllocSave_GfxDrawSurfPtr();
GfxImage* AllocLoad_GfxImage();
GfxImage* AllocSave_GfxImage();
GfxImage** AllocLoad_GfxImagePtr();
GfxImage** AllocSave_GfxImagePtr();
GfxImageLoadDef* AllocLoad_GfxImageLoadDef();
GfxImageLoadDef* AllocSave_GfxImageLoadDef();
GfxImageLoadDef** AllocLoad_GfxImageLoadDefPtr();
GfxImageLoadDef** AllocSave_GfxImageLoadDefPtr();
GfxLightDef* AllocLoad_GfxLightDef();
GfxLightDef* AllocSave_GfxLightDef();
GfxLightDef** AllocLoad_GfxLightDefPtr();
GfxLightDef** AllocSave_GfxLightDefPtr();
GfxLightImage* AllocLoad_GfxLightImage();
GfxLightImage* AllocSave_GfxLightImage();
GfxLightImage** AllocLoad_GfxLightImagePtr();
GfxLightImage** AllocSave_GfxLightImagePtr();
GfxPackedVertex* AllocLoad_GfxPackedVertex();
GfxPackedVertex* AllocSave_GfxPackedVertex();
GfxPackedVertex** AllocLoad_GfxPackedVertexPtr();
GfxPackedVertex** AllocSave_GfxPackedVertexPtr();
GfxPixelShaderLoadDef* AllocLoad_GfxPixelShaderLoadDef();
GfxPixelShaderLoadDef* AllocSave_GfxPixelShaderLoadDef();
GfxPixelShaderLoadDef** AllocLoad_GfxPixelShaderLoadDefPtr();
GfxPixelShaderLoadDef** AllocSave_GfxPixelShaderLoadDefPtr();
GfxPlacement* AllocLoad_GfxPlacement();
GfxPlacement* AllocSave_GfxPlacement();
GfxPlacement** AllocLoad_GfxPlacementPtr();
GfxPlacement** AllocSave_GfxPlacementPtr();
GfxStateBits* AllocLoad_GfxStateBits();
GfxStateBits* AllocSave_GfxStateBits();
GfxStateBits** AllocLoad_GfxStateBitsPtr();
GfxStateBits** AllocSave_GfxStateBitsPtr();
GfxTexture* AllocLoad_GfxTexture();
GfxTexture* AllocSave_GfxTexture();
GfxTexture** AllocLoad_GfxTexturePtr();
GfxTexture** AllocSave_GfxTexturePtr();
GfxVertexShaderLoadDef* AllocLoad_GfxVertexShaderLoadDef();
GfxVertexShaderLoadDef* AllocSave_GfxVertexShaderLoadDef();
GfxVertexShaderLoadDef** AllocLoad_GfxVertexShaderLoadDefPtr();
GfxVertexShaderLoadDef** AllocSave_GfxVertexShaderLoadDefPtr();
Glyph* AllocLoad_Glyph();
Glyph* AllocSave_Glyph();
Glyph** AllocLoad_GlyphPtr();
Glyph** AllocSave_GlyphPtr();
ItemFloatExpression* AllocLoad_ItemFloatExpression();
ItemFloatExpression* AllocSave_ItemFloatExpression();
ItemFloatExpression** AllocLoad_ItemFloatExpressionPtr();
ItemFloatExpression** AllocSave_ItemFloatExpressionPtr();
ItemKeyHandler* AllocLoad_ItemKeyHandler();
ItemKeyHandler* AllocSave_ItemKeyHandler();
ItemKeyHandler** AllocLoad_ItemKeyHandlerPtr();
ItemKeyHandler** AllocSave_ItemKeyHandlerPtr();
LbColumnDef* AllocLoad_LbColumnDef();
LbColumnDef* AllocSave_LbColumnDef();
LbColumnDef** AllocLoad_LbColumnDefPtr();
LbColumnDef** AllocSave_LbColumnDefPtr();
LeaderboardDef* AllocLoad_LeaderboardDef();
LeaderboardDef* AllocSave_LeaderboardDef();
LeaderboardDef** AllocLoad_LeaderboardDefPtr();
LeaderboardDef** AllocSave_LeaderboardDefPtr();
LoadedSound* AllocLoad_LoadedSound();
LoadedSound* AllocSave_LoadedSound();
LoadedSound** AllocLoad_LoadedSoundPtr();
LoadedSound** AllocSave_LoadedSoundPtr();
LocalizeEntry* AllocLoad_LocalizeEntry();
LocalizeEntry* AllocSave_LocalizeEntry();
LocalizeEntry** AllocLoad_LocalizeEntryPtr();
LocalizeEntry** AllocSave_LocalizeEntryPtr();
MSSChannelMap* AllocLoad_MSSChannelMap();
MSSChannelMap* AllocSave_MSSChannelMap();
MSSChannelMap** AllocLoad_MSSChannelMapPtr();
MSSChannelMap** AllocSave_MSSChannelMapPtr();
MSSSpeakerLevels* AllocLoad_MSSSpeakerLevels();
MSSSpeakerLevels* AllocSave_MSSSpeakerLevels();
MSSSpeakerLevels** AllocLoad_MSSSpeakerLevelsPtr();
MSSSpeakerLevels** AllocSave_MSSSpeakerLevelsPtr();
MapEnts* AllocLoad_MapEnts();
MapEnts* AllocSave_MapEnts();
MapEnts** AllocLoad_MapEntsPtr();
MapEnts** AllocSave_MapEntsPtr();
MapTriggers* AllocLoad_MapTriggers();
MapTriggers* AllocSave_MapTriggers();
MapTriggers** AllocLoad_MapTriggersPtr();
MapTriggers** AllocSave_MapTriggersPtr();
Material* AllocLoad_Material();
Material* AllocSave_Material();
Material** AllocLoad_MaterialPtr();
Material** AllocSave_MaterialPtr();
MaterialArgumentCodeConst* AllocLoad_MaterialArgumentCodeConst();
MaterialArgumentCodeConst* AllocSave_MaterialArgumentCodeConst();
MaterialArgumentCodeConst** AllocLoad_MaterialArgumentCodeConstPtr();
MaterialArgumentCodeConst** AllocSave_MaterialArgumentCodeConstPtr();
MaterialArgumentDef* AllocLoad_MaterialArgumentDef();
MaterialArgumentDef* AllocSave_MaterialArgumentDef();
MaterialArgumentDef** AllocLoad_MaterialArgumentDefPtr();
MaterialArgumentDef** AllocSave_MaterialArgumentDefPtr();
MaterialConstantDef* AllocLoad_MaterialConstantDef();
MaterialConstantDef* AllocSave_MaterialConstantDef();
MaterialConstantDef** AllocLoad_MaterialConstantDefPtr();
MaterialConstantDef** AllocSave_MaterialConstantDefPtr();
MaterialInfo* AllocLoad_MaterialInfo();
MaterialInfo* AllocSave_MaterialInfo();
MaterialInfo** AllocLoad_MaterialInfoPtr();
MaterialInfo** AllocSave_MaterialInfoPtr();
MaterialPass* AllocLoad_MaterialPass();
MaterialPass* AllocSave_MaterialPass();
MaterialPass** AllocLoad_MaterialPassPtr();
MaterialPass** AllocSave_MaterialPassPtr();
MaterialPixelShader* AllocLoad_MaterialPixelShader();
MaterialPixelShader* AllocSave_MaterialPixelShader();
MaterialPixelShader** AllocLoad_MaterialPixelShaderPtr();
MaterialPixelShader** AllocSave_MaterialPixelShaderPtr();
MaterialPixelShaderProgram* AllocLoad_MaterialPixelShaderProgram();
MaterialPixelShaderProgram* AllocSave_MaterialPixelShaderProgram();
MaterialPixelShaderProgram** AllocLoad_MaterialPixelShaderProgramPtr();
MaterialPixelShaderProgram** AllocSave_MaterialPixelShaderProgramPtr();
MaterialShaderArgument* AllocLoad_MaterialShaderArgument();
MaterialShaderArgument* AllocSave_MaterialShaderArgument();
MaterialShaderArgument** AllocLoad_MaterialShaderArgumentPtr();
MaterialShaderArgument** AllocSave_MaterialShaderArgumentPtr();
MaterialStreamRouting* AllocLoad_MaterialStreamRouting();
MaterialStreamRouting* AllocSave_MaterialStreamRouting();
MaterialStreamRouting** AllocLoad_MaterialStreamRoutingPtr();
MaterialStreamRouting** AllocSave_MaterialStreamRoutingPtr();
MaterialTechnique* AllocLoad_MaterialTechnique();
MaterialTechnique* AllocSave_MaterialTechnique();
MaterialTechnique** AllocLoad_MaterialTechniquePtr();
MaterialTechnique** AllocSave_MaterialTechniquePtr();
MaterialTechniqueSet* AllocLoad_MaterialTechniqueSet();
MaterialTechniqueSet* AllocSave_MaterialTechniqueSet();
MaterialTechniqueSet** AllocLoad_MaterialTechniqueSetPtr();
MaterialTechniqueSet** AllocSave_MaterialTechniqueSetPtr();
MaterialTextureDef* AllocLoad_MaterialTextureDef();
MaterialTextureDef* AllocSave_MaterialTextureDef();
MaterialTextureDef** AllocLoad_MaterialTextureDefPtr();
MaterialTextureDef** AllocSave_MaterialTextureDefPtr();
MaterialTextureDefInfo* AllocLoad_MaterialTextureDefInfo();
MaterialTextureDefInfo* AllocSave_MaterialTextureDefInfo();
MaterialTextureDefInfo** AllocLoad_MaterialTextureDefInfoPtr();
MaterialTextureDefInfo** AllocSave_MaterialTextureDefInfoPtr();
MaterialVertexDeclaration* AllocLoad_MaterialVertexDeclaration();
MaterialVertexDeclaration* AllocSave_MaterialVertexDeclaration();
MaterialVertexDeclaration** AllocLoad_MaterialVertexDeclarationPtr();
MaterialVertexDeclaration** AllocSave_MaterialVertexDeclarationPtr();
MaterialVertexShader* AllocLoad_MaterialVertexShader();
MaterialVertexShader* AllocSave_MaterialVertexShader();
MaterialVertexShader** AllocLoad_MaterialVertexShaderPtr();
MaterialVertexShader** AllocSave_MaterialVertexShaderPtr();
MaterialVertexShaderProgram* AllocLoad_MaterialVertexShaderProgram();
MaterialVertexShaderProgram* AllocSave_MaterialVertexShaderProgram();
MaterialVertexShaderProgram** AllocLoad_MaterialVertexShaderProgramPtr();
MaterialVertexShaderProgram** AllocSave_MaterialVertexShaderProgramPtr();
MaterialVertexStreamRouting* AllocLoad_MaterialVertexStreamRouting();
MaterialVertexStreamRouting* AllocSave_MaterialVertexStreamRouting();
MaterialVertexStreamRouting** AllocLoad_MaterialVertexStreamRoutingPtr();
MaterialVertexStreamRouting** AllocSave_MaterialVertexStreamRoutingPtr();
MenuEventHandler* AllocLoad_MenuEventHandler();
MenuEventHandler* AllocSave_MenuEventHandler();
MenuEventHandler** AllocLoad_MenuEventHandlerPtr();
MenuEventHandler** AllocSave_MenuEventHandlerPtr();
MenuEventHandlerSet* AllocLoad_MenuEventHandlerSet();
MenuEventHandlerSet* AllocSave_MenuEventHandlerSet();
MenuEventHandlerSet** AllocLoad_MenuEventHandlerSetPtr();
MenuEventHandlerSet** AllocSave_MenuEventHandlerSetPtr();
MenuList* AllocLoad_MenuList();
MenuList* AllocSave_MenuList();
MenuList** AllocLoad_MenuListPtr();
MenuList** AllocSave_MenuListPtr();
MssSound* AllocLoad_MssSound();
MssSound* AllocSave_MssSound();
MssSound** AllocLoad_MssSoundPtr();
MssSound** AllocSave_MssSoundPtr();
Operand* AllocLoad_Operand();
Operand* AllocSave_Operand();
Operand** AllocLoad_OperandPtr();
Operand** AllocSave_OperandPtr();
PackedTexCoords* AllocLoad_PackedTexCoords();
PackedTexCoords* AllocSave_PackedTexCoords();
PackedTexCoords** AllocLoad_PackedTexCoordsPtr();
PackedTexCoords** AllocSave_PackedTexCoordsPtr();
PackedUnitVec* AllocLoad_PackedUnitVec();
PackedUnitVec* AllocSave_PackedUnitVec();
PackedUnitVec** AllocLoad_PackedUnitVecPtr();
PackedUnitVec** AllocSave_PackedUnitVecPtr();
PhysCollmap* AllocLoad_PhysCollmap();
PhysCollmap* AllocSave_PhysCollmap();
PhysCollmap** AllocLoad_PhysCollmapPtr();
PhysCollmap** AllocSave_PhysCollmapPtr();
PhysGeomInfo* AllocLoad_PhysGeomInfo();
PhysGeomInfo* AllocSave_PhysGeomInfo();
PhysGeomInfo** AllocLoad_PhysGeomInfoPtr();
PhysGeomInfo** AllocSave_PhysGeomInfoPtr();
PhysMass* AllocLoad_PhysMass();
PhysMass* AllocSave_PhysMass();
PhysMass** AllocLoad_PhysMassPtr();
PhysMass** AllocSave_PhysMassPtr();
PhysPreset* AllocLoad_PhysPreset();
PhysPreset* AllocSave_PhysPreset();
PhysPreset** AllocLoad_PhysPresetPtr();
PhysPreset** AllocSave_PhysPresetPtr();
Picmip* AllocLoad_Picmip();
Picmip* AllocSave_Picmip();
Picmip** AllocLoad_PicmipPtr();
Picmip** AllocSave_PicmipPtr();
RawFile* AllocLoad_RawFile();
RawFile* AllocSave_RawFile();
RawFile** AllocLoad_RawFilePtr();
RawFile** AllocSave_RawFilePtr();
SModelAabbNode* AllocLoad_SModelAabbNode();
SModelAabbNode* AllocSave_SModelAabbNode();
SModelAabbNode** AllocLoad_SModelAabbNodePtr();
SModelAabbNode** AllocSave_SModelAabbNodePtr();
ScriptStringList* AllocLoad_ScriptStringList();
ScriptStringList* AllocSave_ScriptStringList();
ScriptStringList** AllocLoad_ScriptStringListPtr();
ScriptStringList** AllocSave_ScriptStringListPtr();
SetLocalVarData* AllocLoad_SetLocalVarData();
SetLocalVarData* AllocSave_SetLocalVarData();
SetLocalVarData** AllocLoad_SetLocalVarDataPtr();
SetLocalVarData** AllocSave_SetLocalVarDataPtr();
SndCurve* AllocLoad_SndCurve();
SndCurve* AllocSave_SndCurve();
SndCurve** AllocLoad_SndCurvePtr();
SndCurve** AllocSave_SndCurvePtr();
SndDriverGlobals* AllocLoad_SndDriverGlobals();
SndDriverGlobals* AllocSave_SndDriverGlobals();
SndDriverGlobals** AllocLoad_SndDriverGlobalsPtr();
SndDriverGlobals** AllocSave_SndDriverGlobalsPtr();
SoundFile* AllocLoad_SoundFile();
SoundFile* AllocSave_SoundFile();
SoundFile** AllocLoad_SoundFilePtr();
SoundFile** AllocSave_SoundFilePtr();
SoundFileRef* AllocLoad_SoundFileRef();
SoundFileRef* AllocSave_SoundFileRef();
SoundFileRef** AllocLoad_SoundFileRefPtr();
SoundFileRef** AllocSave_SoundFileRefPtr();
SpeakerMap* AllocLoad_SpeakerMap();
SpeakerMap* AllocSave_SpeakerMap();
SpeakerMap** AllocLoad_SpeakerMapPtr();
SpeakerMap** AllocSave_SpeakerMapPtr();
Stage* AllocLoad_Stage();
Stage* AllocSave_Stage();
Stage** AllocLoad_StagePtr();
Stage** AllocSave_StagePtr();
Statement_s* AllocLoad_Statement_s();
Statement_s* AllocSave_Statement_s();
Statement_s** AllocLoad_Statement_sPtr();
Statement_s** AllocSave_Statement_sPtr();
StaticDvar* AllocLoad_StaticDvar();
StaticDvar* AllocSave_StaticDvar();
StaticDvar** AllocLoad_StaticDvarPtr();
StaticDvar** AllocSave_StaticDvarPtr();
StaticDvarList* AllocLoad_StaticDvarList();
StaticDvarList* AllocSave_StaticDvarList();
StaticDvarList** AllocLoad_StaticDvarListPtr();
StaticDvarList** AllocSave_StaticDvarListPtr();
StreamFileInfo* AllocLoad_StreamFileInfo();
StreamFileInfo* AllocSave_StreamFileInfo();
StreamFileInfo** AllocLoad_StreamFileInfoPtr();
StreamFileInfo** AllocSave_StreamFileInfoPtr();
StreamFileName* AllocLoad_StreamFileName();
StreamFileName* AllocSave_StreamFileName();
StreamFileName** AllocLoad_StreamFileNamePtr();
StreamFileName** AllocSave_StreamFileNamePtr();
StreamFileNameRaw* AllocLoad_StreamFileNameRaw();
StreamFileNameRaw* AllocSave_StreamFileNameRaw();
StreamFileNameRaw** AllocLoad_StreamFileNameRawPtr();
StreamFileNameRaw** AllocSave_StreamFileNameRawPtr();
StreamedSound* AllocLoad_StreamedSound();
StreamedSound* AllocSave_StreamedSound();
StreamedSound** AllocLoad_StreamedSoundPtr();
StreamedSound** AllocSave_StreamedSoundPtr();
StringList* AllocLoad_StringList();
StringList* AllocSave_StringList();
StringList** AllocLoad_StringListPtr();
StringList** AllocSave_StringListPtr();
StringTable* AllocLoad_StringTable();
StringTable* AllocSave_StringTable();
StringTable** AllocLoad_StringTablePtr();
StringTable** AllocSave_StringTablePtr();
StringTableCell* AllocLoad_StringTableCell();
StringTableCell* AllocSave_StringTableCell();
StringTableCell** AllocLoad_StringTableCellPtr();
StringTableCell** AllocSave_StringTableCellPtr();
StructuredDataDef* AllocLoad_StructuredDataDef();
StructuredDataDef* AllocSave_StructuredDataDef();
StructuredDataDef** AllocLoad_StructuredDataDefPtr();
StructuredDataDef** AllocSave_StructuredDataDefPtr();
StructuredDataDefSet* AllocLoad_StructuredDataDefSet();
StructuredDataDefSet* AllocSave_StructuredDataDefSet();
StructuredDataDefSet** AllocLoad_StructuredDataDefSetPtr();
StructuredDataDefSet** AllocSave_StructuredDataDefSetPtr();
StructuredDataEnum* AllocLoad_StructuredDataEnum();
StructuredDataEnum* AllocSave_StructuredDataEnum();
StructuredDataEnum** AllocLoad_StructuredDataEnumPtr();
StructuredDataEnum** AllocSave_StructuredDataEnumPtr();
StructuredDataEnumEntry* AllocLoad_StructuredDataEnumEntry();
StructuredDataEnumEntry* AllocSave_StructuredDataEnumEntry();
StructuredDataEnumEntry** AllocLoad_StructuredDataEnumEntryPtr();
StructuredDataEnumEntry** AllocSave_StructuredDataEnumEntryPtr();
StructuredDataEnumedArray* AllocLoad_StructuredDataEnumedArray();
StructuredDataEnumedArray* AllocSave_StructuredDataEnumedArray();
StructuredDataEnumedArray** AllocLoad_StructuredDataEnumedArrayPtr();
StructuredDataEnumedArray** AllocSave_StructuredDataEnumedArrayPtr();
StructuredDataIndexedArray* AllocLoad_StructuredDataIndexedArray();
StructuredDataIndexedArray* AllocSave_StructuredDataIndexedArray();
StructuredDataIndexedArray** AllocLoad_StructuredDataIndexedArrayPtr();
StructuredDataIndexedArray** AllocSave_StructuredDataIndexedArrayPtr();
StructuredDataStruct* AllocLoad_StructuredDataStruct();
StructuredDataStruct* AllocSave_StructuredDataStruct();
StructuredDataStruct** AllocLoad_StructuredDataStructPtr();
StructuredDataStruct** AllocSave_StructuredDataStructPtr();
StructuredDataStructProperty* AllocLoad_StructuredDataStructProperty();
StructuredDataStructProperty* AllocSave_StructuredDataStructProperty();
StructuredDataStructProperty** AllocLoad_StructuredDataStructPropertyPtr();
StructuredDataStructProperty** AllocSave_StructuredDataStructPropertyPtr();
StructuredDataType* AllocLoad_StructuredDataType();
StructuredDataType* AllocSave_StructuredDataType();
StructuredDataType** AllocLoad_StructuredDataTypePtr();
StructuredDataType** AllocSave_StructuredDataTypePtr();
StructuredDataTypeUnion* AllocLoad_StructuredDataTypeUnion();
StructuredDataTypeUnion* AllocSave_StructuredDataTypeUnion();
StructuredDataTypeUnion** AllocLoad_StructuredDataTypeUnionPtr();
StructuredDataTypeUnion** AllocSave_StructuredDataTypeUnionPtr();
TempString* AllocLoad_TempString();
TempString* AllocSave_TempString();
TempString** AllocLoad_TempStringPtr();
TempString** AllocSave_TempStringPtr();
TracerDef* AllocLoad_TracerDef();
TracerDef* AllocSave_TracerDef();
TracerDef** AllocLoad_TracerDefPtr();
TracerDef** AllocSave_TracerDefPtr();
TriIndice* AllocLoad_TriIndice();
TriIndice* AllocSave_TriIndice();
TriIndice** AllocLoad_TriIndicePtr();
TriIndice** AllocSave_TriIndicePtr();
TriggerHull* AllocLoad_TriggerHull();
TriggerHull* AllocSave_TriggerHull();
TriggerHull** AllocLoad_TriggerHullPtr();
TriggerHull** AllocSave_TriggerHullPtr();
TriggerModel* AllocLoad_TriggerModel();
TriggerModel* AllocSave_TriggerModel();
TriggerModel** AllocLoad_TriggerModelPtr();
TriggerModel** AllocSave_TriggerModelPtr();
TriggerSlab* AllocLoad_TriggerSlab();
TriggerSlab* AllocSave_TriggerSlab();
TriggerSlab** AllocLoad_TriggerSlabPtr();
TriggerSlab** AllocSave_TriggerSlabPtr();
UIFunctionList* AllocLoad_UIFunctionList();
UIFunctionList* AllocSave_UIFunctionList();
UIFunctionList** AllocLoad_UIFunctionListPtr();
UIFunctionList** AllocSave_UIFunctionListPtr();
WaterWritable* AllocLoad_WaterWritable();
WaterWritable* AllocSave_WaterWritable();
WaterWritable** AllocLoad_WaterWritablePtr();
WaterWritable** AllocSave_WaterWritablePtr();
XAnimDeltaPart* AllocLoad_XAnimDeltaPart();
XAnimDeltaPart* AllocSave_XAnimDeltaPart();
XAnimDeltaPart** AllocLoad_XAnimDeltaPartPtr();
XAnimDeltaPart** AllocSave_XAnimDeltaPartPtr();
XAnimDeltaPartQuat* AllocLoad_XAnimDeltaPartQuat();
XAnimDeltaPartQuat* AllocSave_XAnimDeltaPartQuat();
XAnimDeltaPartQuat** AllocLoad_XAnimDeltaPartQuatPtr();
XAnimDeltaPartQuat** AllocSave_XAnimDeltaPartQuatPtr();
XAnimDeltaPartQuat2* AllocLoad_XAnimDeltaPartQuat2();
XAnimDeltaPartQuat2* AllocSave_XAnimDeltaPartQuat2();
XAnimDeltaPartQuat2** AllocLoad_XAnimDeltaPartQuat2Ptr();
XAnimDeltaPartQuat2** AllocSave_XAnimDeltaPartQuat2Ptr();
XAnimDeltaPartQuatData* AllocLoad_XAnimDeltaPartQuatData();
XAnimDeltaPartQuatData* AllocSave_XAnimDeltaPartQuatData();
XAnimDeltaPartQuatData** AllocLoad_XAnimDeltaPartQuatDataPtr();
XAnimDeltaPartQuatData** AllocSave_XAnimDeltaPartQuatDataPtr();
XAnimDeltaPartQuatData2* AllocLoad_XAnimDeltaPartQuatData2();
XAnimDeltaPartQuatData2* AllocSave_XAnimDeltaPartQuatData2();
XAnimDeltaPartQuatData2** AllocLoad_XAnimDeltaPartQuatData2Ptr();
XAnimDeltaPartQuatData2** AllocSave_XAnimDeltaPartQuatData2Ptr();
XAnimDeltaPartQuatDataFrames* AllocLoad_XAnimDeltaPartQuatDataFrames();
XAnimDeltaPartQuatDataFrames* AllocSave_XAnimDeltaPartQuatDataFrames();
XAnimDeltaPartQuatDataFrames** AllocLoad_XAnimDeltaPartQuatDataFramesPtr();
XAnimDeltaPartQuatDataFrames** AllocSave_XAnimDeltaPartQuatDataFramesPtr();
XAnimDeltaPartQuatDataFrames2* AllocLoad_XAnimDeltaPartQuatDataFrames2();
XAnimDeltaPartQuatDataFrames2* AllocSave_XAnimDeltaPartQuatDataFrames2();
XAnimDeltaPartQuatDataFrames2** AllocLoad_XAnimDeltaPartQuatDataFrames2Ptr();
XAnimDeltaPartQuatDataFrames2** AllocSave_XAnimDeltaPartQuatDataFrames2Ptr();
XAnimDynamicFrames* AllocLoad_XAnimDynamicFrames();
XAnimDynamicFrames* AllocSave_XAnimDynamicFrames();
XAnimDynamicFrames** AllocLoad_XAnimDynamicFramesPtr();
XAnimDynamicFrames** AllocSave_XAnimDynamicFramesPtr();
XAnimDynamicIndices* AllocLoad_XAnimDynamicIndices();
XAnimDynamicIndices* AllocSave_XAnimDynamicIndices();
XAnimDynamicIndices** AllocLoad_XAnimDynamicIndicesPtr();
XAnimDynamicIndices** AllocSave_XAnimDynamicIndicesPtr();
XAnimIndices* AllocLoad_XAnimIndices();
XAnimIndices* AllocSave_XAnimIndices();
XAnimIndices** AllocLoad_XAnimIndicesPtr();
XAnimIndices** AllocSave_XAnimIndicesPtr();
XAnimNotifyInfo* AllocLoad_XAnimNotifyInfo();
XAnimNotifyInfo* AllocSave_XAnimNotifyInfo();
XAnimNotifyInfo** AllocLoad_XAnimNotifyInfoPtr();
XAnimNotifyInfo** AllocSave_XAnimNotifyInfoPtr();
XAnimPartTrans* AllocLoad_XAnimPartTrans();
XAnimPartTrans* AllocSave_XAnimPartTrans();
XAnimPartTrans** AllocLoad_XAnimPartTransPtr();
XAnimPartTrans** AllocSave_XAnimPartTransPtr();
XAnimPartTransData* AllocLoad_XAnimPartTransData();
XAnimPartTransData* AllocSave_XAnimPartTransData();
XAnimPartTransData** AllocLoad_XAnimPartTransDataPtr();
XAnimPartTransData** AllocSave_XAnimPartTransDataPtr();
XAnimPartTransFrames* AllocLoad_XAnimPartTransFrames();
XAnimPartTransFrames* AllocSave_XAnimPartTransFrames();
XAnimPartTransFrames** AllocLoad_XAnimPartTransFramesPtr();
XAnimPartTransFrames** AllocSave_XAnimPartTransFramesPtr();
XAnimParts* AllocLoad_XAnimParts();
XAnimParts* AllocSave_XAnimParts();
XAnimParts** AllocLoad_XAnimPartsPtr();
XAnimParts** AllocSave_XAnimPartsPtr();
XAsset* AllocLoad_XAsset();
XAsset* AllocSave_XAsset();
XAsset** AllocLoad_XAssetPtr();
XAsset** AllocSave_XAssetPtr();
XAssetHeader* AllocLoad_XAssetHeader();
XAssetHeader* AllocSave_XAssetHeader();
XAssetHeader** AllocLoad_XAssetHeaderPtr();
XAssetHeader** AllocSave_XAssetHeaderPtr();
XAssetList* AllocLoad_XAssetList();
XAssetList* AllocSave_XAssetList();
XAssetList** AllocLoad_XAssetListPtr();
XAssetList** AllocSave_XAssetListPtr();
XBoneInfo* AllocLoad_XBoneInfo();
XBoneInfo* AllocSave_XBoneInfo();
XBoneInfo** AllocLoad_XBoneInfoPtr();
XBoneInfo** AllocSave_XBoneInfoPtr();
XModel* AllocLoad_XModel();
XModel* AllocSave_XModel();
XModel** AllocLoad_XModelPtr();
XModel** AllocSave_XModelPtr();
XModelCollSurf_s* AllocLoad_XModelCollSurf_s();
XModelCollSurf_s* AllocSave_XModelCollSurf_s();
XModelCollSurf_s** AllocLoad_XModelCollSurf_sPtr();
XModelCollSurf_s** AllocSave_XModelCollSurf_sPtr();
XModelCollTri_s* AllocLoad_XModelCollTri_s();
XModelCollTri_s* AllocSave_XModelCollTri_s();
XModelCollTri_s** AllocLoad_XModelCollTri_sPtr();
XModelCollTri_s** AllocSave_XModelCollTri_sPtr();
XModelLodInfo* AllocLoad_XModelLodInfo();
XModelLodInfo* AllocSave_XModelLodInfo();
XModelLodInfo** AllocLoad_XModelLodInfoPtr();
XModelLodInfo** AllocSave_XModelLodInfoPtr();
XModelSurfs* AllocLoad_XModelSurfs();
XModelSurfs* AllocSave_XModelSurfs();
XModelSurfs** AllocLoad_XModelSurfsPtr();
XModelSurfs** AllocSave_XModelSurfsPtr();
XRigidVertList* AllocLoad_XRigidVertList();
XRigidVertList* AllocSave_XRigidVertList();
XRigidVertList** AllocLoad_XRigidVertListPtr();
XRigidVertList** AllocSave_XRigidVertListPtr();
XString* AllocLoad_XString();
XString* AllocSave_XString();
XString** AllocLoad_XStringPtr();
XString** AllocSave_XStringPtr();
XSurface* AllocLoad_XSurface();
XSurface* AllocSave_XSurface();
XSurface** AllocLoad_XSurfacePtr();
XSurface** AllocSave_XSurfacePtr();
XSurfaceCollisionAabb* AllocLoad_XSurfaceCollisionAabb();
XSurfaceCollisionAabb* AllocSave_XSurfaceCollisionAabb();
XSurfaceCollisionAabb** AllocLoad_XSurfaceCollisionAabbPtr();
XSurfaceCollisionAabb** AllocSave_XSurfaceCollisionAabbPtr();
XSurfaceCollisionLeaf* AllocLoad_XSurfaceCollisionLeaf();
XSurfaceCollisionLeaf* AllocSave_XSurfaceCollisionLeaf();
XSurfaceCollisionLeaf** AllocLoad_XSurfaceCollisionLeafPtr();
XSurfaceCollisionLeaf** AllocSave_XSurfaceCollisionLeafPtr();
XSurfaceCollisionNode* AllocLoad_XSurfaceCollisionNode();
XSurfaceCollisionNode* AllocSave_XSurfaceCollisionNode();
XSurfaceCollisionNode** AllocLoad_XSurfaceCollisionNodePtr();
XSurfaceCollisionNode** AllocSave_XSurfaceCollisionNodePtr();
XSurfaceCollisionTree* AllocLoad_XSurfaceCollisionTree();
XSurfaceCollisionTree* AllocSave_XSurfaceCollisionTree();
XSurfaceCollisionTree** AllocLoad_XSurfaceCollisionTreePtr();
XSurfaceCollisionTree** AllocSave_XSurfaceCollisionTreePtr();
XSurfaceVertexInfo* AllocLoad_XSurfaceVertexInfo();
XSurfaceVertexInfo* AllocSave_XSurfaceVertexInfo();
XSurfaceVertexInfo** AllocLoad_XSurfaceVertexInfoPtr();
XSurfaceVertexInfo** AllocSave_XSurfaceVertexInfoPtr();
_AILSOUNDINFO* AllocLoad__AILSOUNDINFO();
_AILSOUNDINFO* AllocSave__AILSOUNDINFO();
_AILSOUNDINFO** AllocLoad__AILSOUNDINFOPtr();
_AILSOUNDINFO** AllocSave__AILSOUNDINFOPtr();
bool* AllocLoad_bool();
bool* AllocSave_bool();
bool** AllocLoad_boolPtr();
bool** AllocSave_boolPtr();
cLeafBrushNodeChildren_t* AllocLoad_cLeafBrushNodeChildren_t();
cLeafBrushNodeChildren_t* AllocSave_cLeafBrushNodeChildren_t();
cLeafBrushNodeChildren_t** AllocLoad_cLeafBrushNodeChildren_tPtr();
cLeafBrushNodeChildren_t** AllocSave_cLeafBrushNodeChildren_tPtr();
cLeafBrushNodeData_t* AllocLoad_cLeafBrushNodeData_t();
cLeafBrushNodeData_t* AllocSave_cLeafBrushNodeData_t();
cLeafBrushNodeData_t** AllocLoad_cLeafBrushNodeData_tPtr();
cLeafBrushNodeData_t** AllocSave_cLeafBrushNodeData_tPtr();
cLeafBrushNodeLeaf_t* AllocLoad_cLeafBrushNodeLeaf_t();
cLeafBrushNodeLeaf_t* AllocSave_cLeafBrushNodeLeaf_t();
cLeafBrushNodeLeaf_t** AllocLoad_cLeafBrushNodeLeaf_tPtr();
cLeafBrushNodeLeaf_t** AllocSave_cLeafBrushNodeLeaf_tPtr();
cLeafBrushNode_s* AllocLoad_cLeafBrushNode_s();
cLeafBrushNode_s* AllocSave_cLeafBrushNode_s();
cLeafBrushNode_s** AllocLoad_cLeafBrushNode_sPtr();
cLeafBrushNode_s** AllocSave_cLeafBrushNode_sPtr();
cLeaf_t* AllocLoad_cLeaf_t();
cLeaf_t* AllocSave_cLeaf_t();
cLeaf_t** AllocLoad_cLeaf_tPtr();
cLeaf_t** AllocSave_cLeaf_tPtr();
cNode_t* AllocLoad_cNode_t();
cNode_t* AllocSave_cNode_t();
cNode_t** AllocLoad_cNode_tPtr();
cNode_t** AllocSave_cNode_tPtr();
cStaticModel_s* AllocLoad_cStaticModel_s();
cStaticModel_s* AllocSave_cStaticModel_s();
cStaticModel_s** AllocLoad_cStaticModel_sPtr();
cStaticModel_s** AllocSave_cStaticModel_sPtr();
cbrush_t* AllocLoad_cbrush_t();
cbrush_t* AllocSave_cbrush_t();
cbrush_t** AllocLoad_cbrush_tPtr();
cbrush_t** AllocSave_cbrush_tPtr();
cbrushside_t* AllocLoad_cbrushside_t();
cbrushside_t* AllocSave_cbrushside_t();
cbrushside_t** AllocLoad_cbrushside_tPtr();
cbrushside_t** AllocSave_cbrushside_tPtr();
char* AllocLoad_char();
char* AllocSave_char();
char** AllocLoad_charPtr();
char** AllocSave_charPtr();
char16* AllocLoad_char16();
char16* AllocSave_char16();
char16** AllocLoad_char16Ptr();
char16** AllocSave_char16Ptr();
clipMap_t* AllocLoad_clipMap_t();
clipMap_t* AllocSave_clipMap_t();
clipMap_t** AllocLoad_clipMap_tPtr();
clipMap_t** AllocSave_clipMap_tPtr();
cmodel_t* AllocLoad_cmodel_t();
cmodel_t* AllocSave_cmodel_t();
cmodel_t** AllocLoad_cmodel_tPtr();
cmodel_t** AllocSave_cmodel_tPtr();
columnInfo_s* AllocLoad_columnInfo_s();
columnInfo_s* AllocSave_columnInfo_s();
columnInfo_s** AllocLoad_columnInfo_sPtr();
columnInfo_s** AllocSave_columnInfo_sPtr();
complex_s* AllocLoad_complex_s();
complex_s* AllocSave_complex_s();
complex_s** AllocLoad_complex_sPtr();
complex_s** AllocSave_complex_sPtr();
const char *DB_ComWorldGetName(XAssetHeader* header);
const char *DB_Font_sGetName(XAssetHeader* header);
const char *DB_FxEffectDefGetName(XAssetHeader* header);
const char *DB_FxWorldGetName(XAssetHeader* header);
const char *DB_GameWorldMpGetName(XAssetHeader* header);
const char *DB_GfxImageGetName(XAssetHeader* header);
const char *DB_GfxLightDefGetName(XAssetHeader* header);
const char *DB_LeaderboardDefGetName(XAssetHeader* header);
const char *DB_LocalizeEntryGetName(XAssetHeader* header);
const char *DB_MapEntsGetName(XAssetHeader* header);
const char *DB_MaterialGetName(XAssetHeader* header);
const char *DB_MaterialPixelShaderGetName(XAssetHeader* header);
const char *DB_MaterialTechniqueSetGetName(XAssetHeader* header);
const char *DB_MaterialVertexDeclarationGetName(XAssetHeader* header);
const char *DB_MaterialVertexShaderGetName(XAssetHeader* header);
const char *DB_MenuListGetName(XAssetHeader* header);
const char *DB_PhysCollmapGetName(XAssetHeader* header);
const char *DB_PhysPresetGetName(XAssetHeader* header);
const char *DB_RawFileGetName(XAssetHeader* header);
const char *DB_SndCurveGetName(XAssetHeader* header);
const char *DB_StringTableGetName(XAssetHeader* header);
const char *DB_StructuredDataDefSetGetName(XAssetHeader* header);
const char *DB_TracerDefGetName(XAssetHeader* header);
const char *DB_XAnimPartsGetName(XAssetHeader* header);
const char *DB_XModelGetName(XAssetHeader* header);
const char *DB_XModelSurfsGetName(XAssetHeader* header);
const char *DB_clipMap_tGetName(XAssetHeader* header);
const char *DB_menuDef_tGetName(XAssetHeader* header);
const char *DB_snd_alias_list_tGetName(XAssetHeader* header);
cplane_s* AllocLoad_cplane_s();
cplane_s* AllocSave_cplane_s();
cplane_s** AllocLoad_cplane_sPtr();
cplane_s** AllocSave_cplane_sPtr();
double* AllocLoad_double();
double* AllocSave_double();
double** AllocLoad_doublePtr();
double** AllocSave_doublePtr();
editFieldDef_s* AllocLoad_editFieldDef_s();
editFieldDef_s* AllocSave_editFieldDef_s();
editFieldDef_s** AllocLoad_editFieldDef_sPtr();
editFieldDef_s** AllocSave_editFieldDef_sPtr();
entryInternalData* AllocLoad_entryInternalData();
entryInternalData* AllocSave_entryInternalData();
entryInternalData** AllocLoad_entryInternalDataPtr();
entryInternalData** AllocSave_entryInternalDataPtr();
expressionEntry* AllocLoad_expressionEntry();
expressionEntry* AllocSave_expressionEntry();
expressionEntry** AllocLoad_expressionEntryPtr();
expressionEntry** AllocSave_expressionEntryPtr();
float* AllocLoad_float();
float* AllocSave_float();
float** AllocLoad_floatPtr();
float** AllocSave_floatPtr();
float16* AllocLoad_float16();
float16* AllocSave_float16();
float16** AllocLoad_float16Ptr();
float16** AllocSave_float16Ptr();
int16* AllocLoad_int16();
int16* AllocSave_int16();
int16** AllocLoad_int16Ptr();
int16** AllocSave_int16Ptr();
int32* AllocLoad_int32();
int32* AllocSave_int32();
int32** AllocLoad_int32Ptr();
int32** AllocSave_int32Ptr();
int64* AllocLoad_int64();
int64* AllocSave_int64();
int64** AllocLoad_int64Ptr();
int64** AllocSave_int64Ptr();
int8* AllocLoad_int8();
int8* AllocSave_int8();
int8** AllocLoad_int8Ptr();
int8** AllocSave_int8Ptr();
itemDefData_t* AllocLoad_itemDefData_t();
itemDefData_t* AllocSave_itemDefData_t();
itemDefData_t** AllocLoad_itemDefData_tPtr();
itemDefData_t** AllocSave_itemDefData_tPtr();
itemDef_s* AllocLoad_itemDef_s();
itemDef_s* AllocSave_itemDef_s();
itemDef_s** AllocLoad_itemDef_sPtr();
itemDef_s** AllocSave_itemDef_sPtr();
listBoxDef_s* AllocLoad_listBoxDef_s();
listBoxDef_s* AllocSave_listBoxDef_s();
listBoxDef_s** AllocLoad_listBoxDef_sPtr();
listBoxDef_s** AllocSave_listBoxDef_sPtr();
menuDef_t* AllocLoad_menuDef_t();
menuDef_t* AllocSave_menuDef_t();
menuDef_t** AllocLoad_menuDef_tPtr();
menuDef_t** AllocSave_menuDef_tPtr();
menuTransition* AllocLoad_menuTransition();
menuTransition* AllocSave_menuTransition();
menuTransition** AllocLoad_menuTransitionPtr();
menuTransition** AllocSave_menuTransitionPtr();
multiDef_s* AllocLoad_multiDef_s();
multiDef_s* AllocSave_multiDef_s();
multiDef_s** AllocLoad_multiDef_sPtr();
multiDef_s** AllocSave_multiDef_sPtr();
newsTickerDef_s* AllocLoad_newsTickerDef_s();
newsTickerDef_s* AllocSave_newsTickerDef_s();
newsTickerDef_s** AllocLoad_newsTickerDef_sPtr();
newsTickerDef_s** AllocSave_newsTickerDef_sPtr();
operandInternalDataUnion* AllocLoad_operandInternalDataUnion();
operandInternalDataUnion* AllocSave_operandInternalDataUnion();
operandInternalDataUnion** AllocLoad_operandInternalDataUnionPtr();
operandInternalDataUnion** AllocSave_operandInternalDataUnionPtr();
rectDef_s* AllocLoad_rectDef_s();
rectDef_s* AllocSave_rectDef_s();
rectDef_s** AllocLoad_rectDef_sPtr();
rectDef_s** AllocSave_rectDef_sPtr();
snd_alias_list_t* AllocLoad_snd_alias_list_t();
snd_alias_list_t* AllocSave_snd_alias_list_t();
snd_alias_list_t** AllocLoad_snd_alias_list_tPtr();
snd_alias_list_t** AllocSave_snd_alias_list_tPtr();
snd_alias_t* AllocLoad_snd_alias_t();
snd_alias_t* AllocSave_snd_alias_t();
snd_alias_t** AllocLoad_snd_alias_tPtr();
snd_alias_t** AllocSave_snd_alias_tPtr();
textScrollDef_s* AllocLoad_textScrollDef_s();
textScrollDef_s* AllocSave_textScrollDef_s();
textScrollDef_s** AllocLoad_textScrollDef_sPtr();
textScrollDef_s** AllocSave_textScrollDef_sPtr();
uint16* AllocLoad_uint16();
uint16* AllocSave_uint16();
uint16** AllocLoad_uint16Ptr();
uint16** AllocSave_uint16Ptr();
uint32* AllocLoad_uint32();
uint32* AllocSave_uint32();
uint32** AllocLoad_uint32Ptr();
uint32** AllocSave_uint32Ptr();
uint64* AllocLoad_uint64();
uint64* AllocSave_uint64();
uint64** AllocLoad_uint64Ptr();
uint64** AllocSave_uint64Ptr();
uint8* AllocLoad_uint8();
uint8* AllocSave_uint8();
uint8** AllocLoad_uint8Ptr();
uint8** AllocSave_uint8Ptr();
vec1_t* AllocLoad_vec1_t();
vec1_t* AllocSave_vec1_t();
vec1_t** AllocLoad_vec1_tPtr();
vec1_t** AllocSave_vec1_tPtr();
vec2_t* AllocLoad_vec2_t();
vec2_t* AllocSave_vec2_t();
vec2_t** AllocLoad_vec2_tPtr();
vec2_t** AllocSave_vec2_tPtr();
vec3_t* AllocLoad_vec3_t();
vec3_t* AllocSave_vec3_t();
vec3_t** AllocLoad_vec3_tPtr();
vec3_t** AllocSave_vec3_tPtr();
vec4_t* AllocLoad_vec4_t();
vec4_t* AllocSave_vec4_t();
vec4_t** AllocLoad_vec4_tPtr();
vec4_t** AllocSave_vec4_tPtr();
void Load_$C8D87EB0090687D323381DFB7A82089C(bool atStreamStart);
void Load_$C8D87EB0090687D323381DFB7A82089CArray(bool atStreamStart, int count);
void Load_$C8D87EB0090687D323381DFB7A82089CPtr(bool atStreamStart);
void Load_$C8D87EB0090687D323381DFB7A82089CPtrArray(bool atStreamStart, int count);
void Load_$E43DBA5037697D705289B74D87E76C70(bool atStreamStart);
void Load_$E43DBA5037697D705289B74D87E76C70Array(bool atStreamStart, int count);
void Load_$E43DBA5037697D705289B74D87E76C70Ptr(bool atStreamStart);
void Load_$E43DBA5037697D705289B74D87E76C70PtrArray(bool atStreamStart, int count);
void Load_Bounds(bool atStreamStart);
void Load_BoundsArray(bool atStreamStart, int count);
void Load_BoundsPtr(bool atStreamStart);
void Load_BoundsPtrArray(bool atStreamStart, int count);
void Load_BrushWrapper(bool atStreamStart);
void Load_BrushWrapperArray(bool atStreamStart, int count);
void Load_BrushWrapperPtr(bool atStreamStart);
void Load_BrushWrapperPtrArray(bool atStreamStart, int count);
void Load_CardMemory(bool atStreamStart);
void Load_CardMemoryArray(bool atStreamStart, int count);
void Load_CardMemoryPtr(bool atStreamStart);
void Load_CardMemoryPtrArray(bool atStreamStart, int count);
void Load_ClipMaterial(bool atStreamStart);
void Load_ClipMaterialArray(bool atStreamStart, int count);
void Load_ClipMaterialPtr(bool atStreamStart);
void Load_ClipMaterialPtrArray(bool atStreamStart, int count);
void Load_CollisionAabbTree(bool atStreamStart);
void Load_CollisionAabbTreeArray(bool atStreamStart, int count);
void Load_CollisionAabbTreeIndex(bool atStreamStart);
void Load_CollisionAabbTreeIndexArray(bool atStreamStart, int count);
void Load_CollisionAabbTreeIndexPtr(bool atStreamStart);
void Load_CollisionAabbTreeIndexPtrArray(bool atStreamStart, int count);
void Load_CollisionAabbTreePtr(bool atStreamStart);
void Load_CollisionAabbTreePtrArray(bool atStreamStart, int count);
void Load_CollisionBorder(bool atStreamStart);
void Load_CollisionBorderArray(bool atStreamStart, int count);
void Load_CollisionBorderPtr(bool atStreamStart);
void Load_CollisionBorderPtrArray(bool atStreamStart, int count);
void Load_CollisionPartition(bool atStreamStart);
void Load_CollisionPartitionArray(bool atStreamStart, int count);
void Load_CollisionPartitionPtr(bool atStreamStart);
void Load_CollisionPartitionPtrArray(bool atStreamStart, int count);
void Load_ComPrimaryLight(bool atStreamStart);
void Load_ComPrimaryLightArray(bool atStreamStart, int count);
void Load_ComPrimaryLightPtr(bool atStreamStart);
void Load_ComPrimaryLightPtrArray(bool atStreamStart, int count);
void Load_ComWorld(bool atStreamStart);
void Load_ComWorldArray(bool atStreamStart, int count);
void Load_ComWorldAsset(ComWorld** asset);
void Load_ComWorldPtr(bool atStreamStart);
void Load_ComWorldPtrArray(bool atStreamStart, int count);
void Load_ConditionalScript(bool atStreamStart);
void Load_ConditionalScriptArray(bool atStreamStart, int count);
void Load_ConditionalScriptPtr(bool atStreamStart);
void Load_ConditionalScriptPtrArray(bool atStreamStart, int count);
void Load_DObjAnimMat(bool atStreamStart);
void Load_DObjAnimMatArray(bool atStreamStart, int count);
void Load_DObjAnimMatPtr(bool atStreamStart);
void Load_DObjAnimMatPtrArray(bool atStreamStart, int count);
void Load_DynEntityClient(bool atStreamStart);
void Load_DynEntityClientArray(bool atStreamStart, int count);
void Load_DynEntityClientPtr(bool atStreamStart);
void Load_DynEntityClientPtrArray(bool atStreamStart, int count);
void Load_DynEntityColl(bool atStreamStart);
void Load_DynEntityCollArray(bool atStreamStart, int count);
void Load_DynEntityCollPtr(bool atStreamStart);
void Load_DynEntityCollPtrArray(bool atStreamStart, int count);
void Load_DynEntityDef(bool atStreamStart);
void Load_DynEntityDefArray(bool atStreamStart, int count);
void Load_DynEntityDefPtr(bool atStreamStart);
void Load_DynEntityDefPtrArray(bool atStreamStart, int count);
void Load_DynEntityPose(bool atStreamStart);
void Load_DynEntityPoseArray(bool atStreamStart, int count);
void Load_DynEntityPosePtr(bool atStreamStart);
void Load_DynEntityPosePtrArray(bool atStreamStart, int count);
void Load_EventData(bool atStreamStart);
void Load_EventDataArray(bool atStreamStart, int count);
void Load_EventDataPtr(bool atStreamStart);
void Load_EventDataPtrArray(bool atStreamStart, int count);
void Load_ExpressionString(bool atStreamStart);
void Load_ExpressionStringArray(bool atStreamStart, int count);
void Load_ExpressionStringPtr(bool atStreamStart);
void Load_ExpressionStringPtrArray(bool atStreamStart, int count);
void Load_ExpressionSupportingData(bool atStreamStart);
void Load_ExpressionSupportingDataArray(bool atStreamStart, int count);
void Load_ExpressionSupportingDataPtr(bool atStreamStart);
void Load_ExpressionSupportingDataPtrArray(bool atStreamStart, int count);
void Load_Font_s(bool atStreamStart);
void Load_Font_sArray(bool atStreamStart, int count);
void Load_Font_sAsset(Font_s** asset);
void Load_Font_sPtr(bool atStreamStart);
void Load_Font_sPtrArray(bool atStreamStart, int count);
void Load_FxEffectDef(bool atStreamStart);
void Load_FxEffectDefArray(bool atStreamStart, int count);
void Load_FxEffectDefAsset(FxEffectDef** asset);
void Load_FxEffectDefPtr(bool atStreamStart);
void Load_FxEffectDefPtrArray(bool atStreamStart, int count);
void Load_FxEffectDefRef(bool atStreamStart);
void Load_FxEffectDefRefArray(bool atStreamStart, int count);
void Load_FxEffectDefRefPtr(bool atStreamStart);
void Load_FxEffectDefRefPtrArray(bool atStreamStart, int count);
void Load_FxElemAtlas(bool atStreamStart);
void Load_FxElemAtlasArray(bool atStreamStart, int count);
void Load_FxElemAtlasPtr(bool atStreamStart);
void Load_FxElemAtlasPtrArray(bool atStreamStart, int count);
void Load_FxElemDef(bool atStreamStart);
void Load_FxElemDefArray(bool atStreamStart, int count);
void Load_FxElemDefPtr(bool atStreamStart);
void Load_FxElemDefPtrArray(bool atStreamStart, int count);
void Load_FxElemDefVisuals(bool atStreamStart);
void Load_FxElemDefVisualsArray(bool atStreamStart, int count);
void Load_FxElemDefVisualsPtr(bool atStreamStart);
void Load_FxElemDefVisualsPtrArray(bool atStreamStart, int count);
void Load_FxElemExtendedDefPtr(bool atStreamStart);
void Load_FxElemExtendedDefPtrArray(bool atStreamStart, int count);
void Load_FxElemExtendedDefPtrPtr(bool atStreamStart);
void Load_FxElemExtendedDefPtrPtrArray(bool atStreamStart, int count);
void Load_FxElemMarkVisuals(bool atStreamStart);
void Load_FxElemMarkVisualsArray(bool atStreamStart, int count);
void Load_FxElemMarkVisualsPtr(bool atStreamStart);
void Load_FxElemMarkVisualsPtrArray(bool atStreamStart, int count);
void Load_FxElemVec3Range(bool atStreamStart);
void Load_FxElemVec3RangeArray(bool atStreamStart, int count);
void Load_FxElemVec3RangePtr(bool atStreamStart);
void Load_FxElemVec3RangePtrArray(bool atStreamStart, int count);
void Load_FxElemVelStateInFrame(bool atStreamStart);
void Load_FxElemVelStateInFrameArray(bool atStreamStart, int count);
void Load_FxElemVelStateInFramePtr(bool atStreamStart);
void Load_FxElemVelStateInFramePtrArray(bool atStreamStart, int count);
void Load_FxElemVelStateSample(bool atStreamStart);
void Load_FxElemVelStateSampleArray(bool atStreamStart, int count);
void Load_FxElemVelStateSamplePtr(bool atStreamStart);
void Load_FxElemVelStateSamplePtrArray(bool atStreamStart, int count);
void Load_FxElemVisStateSample(bool atStreamStart);
void Load_FxElemVisStateSampleArray(bool atStreamStart, int count);
void Load_FxElemVisStateSamplePtr(bool atStreamStart);
void Load_FxElemVisStateSamplePtrArray(bool atStreamStart, int count);
void Load_FxElemVisualState(bool atStreamStart);
void Load_FxElemVisualStateArray(bool atStreamStart, int count);
void Load_FxElemVisualStatePtr(bool atStreamStart);
void Load_FxElemVisualStatePtrArray(bool atStreamStart, int count);
void Load_FxElemVisuals(bool atStreamStart);
void Load_FxElemVisualsArray(bool atStreamStart, int count);
void Load_FxElemVisualsPtr(bool atStreamStart);
void Load_FxElemVisualsPtrArray(bool atStreamStart, int count);
void Load_FxFloatRange(bool atStreamStart);
void Load_FxFloatRangeArray(bool atStreamStart, int count);
void Load_FxFloatRangePtr(bool atStreamStart);
void Load_FxFloatRangePtrArray(bool atStreamStart, int count);
void Load_FxGlassCrackHeader(bool atStreamStart);
void Load_FxGlassCrackHeaderArray(bool atStreamStart, int count);
void Load_FxGlassCrackHeaderPtr(bool atStreamStart);
void Load_FxGlassCrackHeaderPtrArray(bool atStreamStart, int count);
void Load_FxGlassDef(bool atStreamStart);
void Load_FxGlassDefArray(bool atStreamStart, int count);
void Load_FxGlassDefPtr(bool atStreamStart);
void Load_FxGlassDefPtrArray(bool atStreamStart, int count);
void Load_FxGlassGeometryData(bool atStreamStart);
void Load_FxGlassGeometryDataArray(bool atStreamStart, int count);
void Load_FxGlassGeometryDataPtr(bool atStreamStart);
void Load_FxGlassGeometryDataPtrArray(bool atStreamStart, int count);
void Load_FxGlassHoleHeader(bool atStreamStart);
void Load_FxGlassHoleHeaderArray(bool atStreamStart, int count);
void Load_FxGlassHoleHeaderPtr(bool atStreamStart);
void Load_FxGlassHoleHeaderPtrArray(bool atStreamStart, int count);
void Load_FxGlassInitPieceState(bool atStreamStart);
void Load_FxGlassInitPieceStateArray(bool atStreamStart, int count);
void Load_FxGlassInitPieceStatePtr(bool atStreamStart);
void Load_FxGlassInitPieceStatePtrArray(bool atStreamStart, int count);
void Load_FxGlassPieceDynamics(bool atStreamStart);
void Load_FxGlassPieceDynamicsArray(bool atStreamStart, int count);
void Load_FxGlassPieceDynamicsPtr(bool atStreamStart);
void Load_FxGlassPieceDynamicsPtrArray(bool atStreamStart, int count);
void Load_FxGlassPiecePlace(bool atStreamStart);
void Load_FxGlassPiecePlaceArray(bool atStreamStart, int count);
void Load_FxGlassPiecePlacePtr(bool atStreamStart);
void Load_FxGlassPiecePlacePtrArray(bool atStreamStart, int count);
void Load_FxGlassPieceState(bool atStreamStart);
void Load_FxGlassPieceStateArray(bool atStreamStart, int count);
void Load_FxGlassPieceStatePtr(bool atStreamStart);
void Load_FxGlassPieceStatePtrArray(bool atStreamStart, int count);
void Load_FxGlassSystem(bool atStreamStart);
void Load_FxGlassSystemArray(bool atStreamStart, int count);
void Load_FxGlassSystemPtr(bool atStreamStart);
void Load_FxGlassSystemPtrArray(bool atStreamStart, int count);
void Load_FxGlassVertex(bool atStreamStart);
void Load_FxGlassVertexArray(bool atStreamStart, int count);
void Load_FxGlassVertexPtr(bool atStreamStart);
void Load_FxGlassVertexPtrArray(bool atStreamStart, int count);
void Load_FxIntRange(bool atStreamStart);
void Load_FxIntRangeArray(bool atStreamStart, int count);
void Load_FxIntRangePtr(bool atStreamStart);
void Load_FxIntRangePtrArray(bool atStreamStart, int count);
void Load_FxSparkFountainDef(bool atStreamStart);
void Load_FxSparkFountainDefArray(bool atStreamStart, int count);
void Load_FxSparkFountainDefPtr(bool atStreamStart);
void Load_FxSparkFountainDefPtrArray(bool atStreamStart, int count);
void Load_FxSpatialFrame(bool atStreamStart);
void Load_FxSpatialFrameArray(bool atStreamStart, int count);
void Load_FxSpatialFramePtr(bool atStreamStart);
void Load_FxSpatialFramePtrArray(bool atStreamStart, int count);
void Load_FxSpawnDef(bool atStreamStart);
void Load_FxSpawnDefArray(bool atStreamStart, int count);
void Load_FxSpawnDefLooping(bool atStreamStart);
void Load_FxSpawnDefLoopingArray(bool atStreamStart, int count);
void Load_FxSpawnDefLoopingPtr(bool atStreamStart);
void Load_FxSpawnDefLoopingPtrArray(bool atStreamStart, int count);
void Load_FxSpawnDefOneShot(bool atStreamStart);
void Load_FxSpawnDefOneShotArray(bool atStreamStart, int count);
void Load_FxSpawnDefOneShotPtr(bool atStreamStart);
void Load_FxSpawnDefOneShotPtrArray(bool atStreamStart, int count);
void Load_FxSpawnDefPtr(bool atStreamStart);
void Load_FxSpawnDefPtrArray(bool atStreamStart, int count);
void Load_FxTrailDef(bool atStreamStart);
void Load_FxTrailDefArray(bool atStreamStart, int count);
void Load_FxTrailDefPtr(bool atStreamStart);
void Load_FxTrailDefPtrArray(bool atStreamStart, int count);
void Load_FxTrailVertex(bool atStreamStart);
void Load_FxTrailVertexArray(bool atStreamStart, int count);
void Load_FxTrailVertexPtr(bool atStreamStart);
void Load_FxTrailVertexPtrArray(bool atStreamStart, int count);
void Load_FxWorld(bool atStreamStart);
void Load_FxWorldArray(bool atStreamStart, int count);
void Load_FxWorldAsset(FxWorld** asset);
void Load_FxWorldPtr(bool atStreamStart);
void Load_FxWorldPtrArray(bool atStreamStart, int count);
void Load_G_GlassData(bool atStreamStart);
void Load_G_GlassDataArray(bool atStreamStart, int count);
void Load_G_GlassDataPtr(bool atStreamStart);
void Load_G_GlassDataPtrArray(bool atStreamStart, int count);
void Load_G_GlassName(bool atStreamStart);
void Load_G_GlassNameArray(bool atStreamStart, int count);
void Load_G_GlassNamePtr(bool atStreamStart);
void Load_G_GlassNamePtrArray(bool atStreamStart, int count);
void Load_G_GlassPiece(bool atStreamStart);
void Load_G_GlassPieceArray(bool atStreamStart, int count);
void Load_G_GlassPiecePtr(bool atStreamStart);
void Load_G_GlassPiecePtrArray(bool atStreamStart, int count);
void Load_GameWorldMp(bool atStreamStart);
void Load_GameWorldMpArray(bool atStreamStart, int count);
void Load_GameWorldMpAsset(GameWorldMp** asset);
void Load_GameWorldMpPtr(bool atStreamStart);
void Load_GameWorldMpPtrArray(bool atStreamStart, int count);
void Load_GfxColor(bool atStreamStart);
void Load_GfxColorArray(bool atStreamStart, int count);
void Load_GfxColorPtr(bool atStreamStart);
void Load_GfxColorPtrArray(bool atStreamStart, int count);
void Load_GfxDrawSurf(bool atStreamStart);
void Load_GfxDrawSurfArray(bool atStreamStart, int count);
void Load_GfxDrawSurfPtr(bool atStreamStart);
void Load_GfxDrawSurfPtrArray(bool atStreamStart, int count);
void Load_GfxImage(bool atStreamStart);
void Load_GfxImageArray(bool atStreamStart, int count);
void Load_GfxImageAsset(GfxImage** asset);
void Load_GfxImageLoadDef(bool atStreamStart);
void Load_GfxImageLoadDefArray(bool atStreamStart, int count);
void Load_GfxImageLoadDefPtr(bool atStreamStart);
void Load_GfxImageLoadDefPtrArray(bool atStreamStart, int count);
void Load_GfxImagePtr(bool atStreamStart);
void Load_GfxImagePtrArray(bool atStreamStart, int count);
void Load_GfxLightDef(bool atStreamStart);
void Load_GfxLightDefArray(bool atStreamStart, int count);
void Load_GfxLightDefAsset(GfxLightDef** asset);
void Load_GfxLightDefPtr(bool atStreamStart);
void Load_GfxLightDefPtrArray(bool atStreamStart, int count);
void Load_GfxLightImage(bool atStreamStart);
void Load_GfxLightImageArray(bool atStreamStart, int count);
void Load_GfxLightImagePtr(bool atStreamStart);
void Load_GfxLightImagePtrArray(bool atStreamStart, int count);
void Load_GfxPackedVertex(bool atStreamStart);
void Load_GfxPackedVertexArray(bool atStreamStart, int count);
void Load_GfxPackedVertexPtr(bool atStreamStart);
void Load_GfxPackedVertexPtrArray(bool atStreamStart, int count);
void Load_GfxPixelShaderLoadDef(bool atStreamStart);
void Load_GfxPixelShaderLoadDefArray(bool atStreamStart, int count);
void Load_GfxPixelShaderLoadDefPtr(bool atStreamStart);
void Load_GfxPixelShaderLoadDefPtrArray(bool atStreamStart, int count);
void Load_GfxPlacement(bool atStreamStart);
void Load_GfxPlacementArray(bool atStreamStart, int count);
void Load_GfxPlacementPtr(bool atStreamStart);
void Load_GfxPlacementPtrArray(bool atStreamStart, int count);
void Load_GfxStateBits(bool atStreamStart);
void Load_GfxStateBitsArray(bool atStreamStart, int count);
void Load_GfxStateBitsPtr(bool atStreamStart);
void Load_GfxStateBitsPtrArray(bool atStreamStart, int count);
void Load_GfxTexture(bool atStreamStart);
void Load_GfxTextureArray(bool atStreamStart, int count);
void Load_GfxTexturePtr(bool atStreamStart);
void Load_GfxTexturePtrArray(bool atStreamStart, int count);
void Load_GfxVertexShaderLoadDef(bool atStreamStart);
void Load_GfxVertexShaderLoadDefArray(bool atStreamStart, int count);
void Load_GfxVertexShaderLoadDefPtr(bool atStreamStart);
void Load_GfxVertexShaderLoadDefPtrArray(bool atStreamStart, int count);
void Load_Glyph(bool atStreamStart);
void Load_GlyphArray(bool atStreamStart, int count);
void Load_GlyphPtr(bool atStreamStart);
void Load_GlyphPtrArray(bool atStreamStart, int count);
void Load_ItemFloatExpression(bool atStreamStart);
void Load_ItemFloatExpressionArray(bool atStreamStart, int count);
void Load_ItemFloatExpressionPtr(bool atStreamStart);
void Load_ItemFloatExpressionPtrArray(bool atStreamStart, int count);
void Load_ItemKeyHandler(bool atStreamStart);
void Load_ItemKeyHandlerArray(bool atStreamStart, int count);
void Load_ItemKeyHandlerPtr(bool atStreamStart);
void Load_ItemKeyHandlerPtrArray(bool atStreamStart, int count);
void Load_LbColumnDef(bool atStreamStart);
void Load_LbColumnDefArray(bool atStreamStart, int count);
void Load_LbColumnDefPtr(bool atStreamStart);
void Load_LbColumnDefPtrArray(bool atStreamStart, int count);
void Load_LeaderboardDef(bool atStreamStart);
void Load_LeaderboardDefArray(bool atStreamStart, int count);
void Load_LeaderboardDefAsset(LeaderboardDef** asset);
void Load_LeaderboardDefPtr(bool atStreamStart);
void Load_LeaderboardDefPtrArray(bool atStreamStart, int count);
void Load_LoadedSound(bool atStreamStart);
void Load_LoadedSoundArray(bool atStreamStart, int count);
void Load_LoadedSoundPtr(bool atStreamStart);
void Load_LoadedSoundPtrArray(bool atStreamStart, int count);
void Load_LocalizeEntry(bool atStreamStart);
void Load_LocalizeEntryArray(bool atStreamStart, int count);
void Load_LocalizeEntryAsset(LocalizeEntry** asset);
void Load_LocalizeEntryPtr(bool atStreamStart);
void Load_LocalizeEntryPtrArray(bool atStreamStart, int count);
void Load_MSSChannelMap(bool atStreamStart);
void Load_MSSChannelMapArray(bool atStreamStart, int count);
void Load_MSSChannelMapPtr(bool atStreamStart);
void Load_MSSChannelMapPtrArray(bool atStreamStart, int count);
void Load_MSSSpeakerLevels(bool atStreamStart);
void Load_MSSSpeakerLevelsArray(bool atStreamStart, int count);
void Load_MSSSpeakerLevelsPtr(bool atStreamStart);
void Load_MSSSpeakerLevelsPtrArray(bool atStreamStart, int count);
void Load_MapEnts(bool atStreamStart);
void Load_MapEntsArray(bool atStreamStart, int count);
void Load_MapEntsAsset(MapEnts** asset);
void Load_MapEntsPtr(bool atStreamStart);
void Load_MapEntsPtrArray(bool atStreamStart, int count);
void Load_MapTriggers(bool atStreamStart);
void Load_MapTriggersArray(bool atStreamStart, int count);
void Load_MapTriggersPtr(bool atStreamStart);
void Load_MapTriggersPtrArray(bool atStreamStart, int count);
void Load_Material(bool atStreamStart);
void Load_MaterialArgumentCodeConst(bool atStreamStart);
void Load_MaterialArgumentCodeConstArray(bool atStreamStart, int count);
void Load_MaterialArgumentCodeConstPtr(bool atStreamStart);
void Load_MaterialArgumentCodeConstPtrArray(bool atStreamStart, int count);
void Load_MaterialArgumentDef(bool atStreamStart);
void Load_MaterialArgumentDefArray(bool atStreamStart, int count);
void Load_MaterialArgumentDefPtr(bool atStreamStart);
void Load_MaterialArgumentDefPtrArray(bool atStreamStart, int count);
void Load_MaterialArray(bool atStreamStart, int count);
void Load_MaterialAsset(Material** asset);
void Load_MaterialConstantDef(bool atStreamStart);
void Load_MaterialConstantDefArray(bool atStreamStart, int count);
void Load_MaterialConstantDefPtr(bool atStreamStart);
void Load_MaterialConstantDefPtrArray(bool atStreamStart, int count);
void Load_MaterialInfo(bool atStreamStart);
void Load_MaterialInfoArray(bool atStreamStart, int count);
void Load_MaterialInfoPtr(bool atStreamStart);
void Load_MaterialInfoPtrArray(bool atStreamStart, int count);
void Load_MaterialPass(bool atStreamStart);
void Load_MaterialPassArray(bool atStreamStart, int count);
void Load_MaterialPassPtr(bool atStreamStart);
void Load_MaterialPassPtrArray(bool atStreamStart, int count);
void Load_MaterialPixelShader(bool atStreamStart);
void Load_MaterialPixelShaderArray(bool atStreamStart, int count);
void Load_MaterialPixelShaderAsset(MaterialPixelShader** asset);
void Load_MaterialPixelShaderProgram(bool atStreamStart);
void Load_MaterialPixelShaderProgramArray(bool atStreamStart, int count);
void Load_MaterialPixelShaderProgramPtr(bool atStreamStart);
void Load_MaterialPixelShaderProgramPtrArray(bool atStreamStart, int count);
void Load_MaterialPixelShaderPtr(bool atStreamStart);
void Load_MaterialPixelShaderPtrArray(bool atStreamStart, int count);
void Load_MaterialPtr(bool atStreamStart);
void Load_MaterialPtrArray(bool atStreamStart, int count);
void Load_MaterialShaderArgument(bool atStreamStart);
void Load_MaterialShaderArgumentArray(bool atStreamStart, int count);
void Load_MaterialShaderArgumentPtr(bool atStreamStart);
void Load_MaterialShaderArgumentPtrArray(bool atStreamStart, int count);
void Load_MaterialStreamRouting(bool atStreamStart);
void Load_MaterialStreamRoutingArray(bool atStreamStart, int count);
void Load_MaterialStreamRoutingPtr(bool atStreamStart);
void Load_MaterialStreamRoutingPtrArray(bool atStreamStart, int count);
void Load_MaterialTechnique(bool atStreamStart);
void Load_MaterialTechniqueArray(bool atStreamStart, int count);
void Load_MaterialTechniquePtr(bool atStreamStart);
void Load_MaterialTechniquePtrArray(bool atStreamStart, int count);
void Load_MaterialTechniqueSet(bool atStreamStart);
void Load_MaterialTechniqueSetArray(bool atStreamStart, int count);
void Load_MaterialTechniqueSetAsset(MaterialTechniqueSet** asset);
void Load_MaterialTechniqueSetPtr(bool atStreamStart);
void Load_MaterialTechniqueSetPtrArray(bool atStreamStart, int count);
void Load_MaterialTextureDef(bool atStreamStart);
void Load_MaterialTextureDefArray(bool atStreamStart, int count);
void Load_MaterialTextureDefInfo(bool atStreamStart);
void Load_MaterialTextureDefInfoArray(bool atStreamStart, int count);
void Load_MaterialTextureDefInfoPtr(bool atStreamStart);
void Load_MaterialTextureDefInfoPtrArray(bool atStreamStart, int count);
void Load_MaterialTextureDefPtr(bool atStreamStart);
void Load_MaterialTextureDefPtrArray(bool atStreamStart, int count);
void Load_MaterialVertexDeclaration(bool atStreamStart);
void Load_MaterialVertexDeclarationArray(bool atStreamStart, int count);
void Load_MaterialVertexDeclarationAsset(MaterialVertexDeclaration** asset);
void Load_MaterialVertexDeclarationPtr(bool atStreamStart);
void Load_MaterialVertexDeclarationPtrArray(bool atStreamStart, int count);
void Load_MaterialVertexShader(bool atStreamStart);
void Load_MaterialVertexShaderArray(bool atStreamStart, int count);
void Load_MaterialVertexShaderAsset(MaterialVertexShader** asset);
void Load_MaterialVertexShaderProgram(bool atStreamStart);
void Load_MaterialVertexShaderProgramArray(bool atStreamStart, int count);
void Load_MaterialVertexShaderProgramPtr(bool atStreamStart);
void Load_MaterialVertexShaderProgramPtrArray(bool atStreamStart, int count);
void Load_MaterialVertexShaderPtr(bool atStreamStart);
void Load_MaterialVertexShaderPtrArray(bool atStreamStart, int count);
void Load_MaterialVertexStreamRouting(bool atStreamStart);
void Load_MaterialVertexStreamRoutingArray(bool atStreamStart, int count);
void Load_MaterialVertexStreamRoutingPtr(bool atStreamStart);
void Load_MaterialVertexStreamRoutingPtrArray(bool atStreamStart, int count);
void Load_MenuEventHandler(bool atStreamStart);
void Load_MenuEventHandlerArray(bool atStreamStart, int count);
void Load_MenuEventHandlerPtr(bool atStreamStart);
void Load_MenuEventHandlerPtrArray(bool atStreamStart, int count);
void Load_MenuEventHandlerSet(bool atStreamStart);
void Load_MenuEventHandlerSetArray(bool atStreamStart, int count);
void Load_MenuEventHandlerSetPtr(bool atStreamStart);
void Load_MenuEventHandlerSetPtrArray(bool atStreamStart, int count);
void Load_MenuList(bool atStreamStart);
void Load_MenuListArray(bool atStreamStart, int count);
void Load_MenuListAsset(MenuList** asset);
void Load_MenuListPtr(bool atStreamStart);
void Load_MenuListPtrArray(bool atStreamStart, int count);
void Load_MssSound(bool atStreamStart);
void Load_MssSoundArray(bool atStreamStart, int count);
void Load_MssSoundPtr(bool atStreamStart);
void Load_MssSoundPtrArray(bool atStreamStart, int count);
void Load_Operand(bool atStreamStart);
void Load_OperandArray(bool atStreamStart, int count);
void Load_OperandPtr(bool atStreamStart);
void Load_OperandPtrArray(bool atStreamStart, int count);
void Load_PackedTexCoords(bool atStreamStart);
void Load_PackedTexCoordsArray(bool atStreamStart, int count);
void Load_PackedTexCoordsPtr(bool atStreamStart);
void Load_PackedTexCoordsPtrArray(bool atStreamStart, int count);
void Load_PackedUnitVec(bool atStreamStart);
void Load_PackedUnitVecArray(bool atStreamStart, int count);
void Load_PackedUnitVecPtr(bool atStreamStart);
void Load_PackedUnitVecPtrArray(bool atStreamStart, int count);
void Load_PhysCollmap(bool atStreamStart);
void Load_PhysCollmapArray(bool atStreamStart, int count);
void Load_PhysCollmapAsset(PhysCollmap** asset);
void Load_PhysCollmapPtr(bool atStreamStart);
void Load_PhysCollmapPtrArray(bool atStreamStart, int count);
void Load_PhysGeomInfo(bool atStreamStart);
void Load_PhysGeomInfoArray(bool atStreamStart, int count);
void Load_PhysGeomInfoPtr(bool atStreamStart);
void Load_PhysGeomInfoPtrArray(bool atStreamStart, int count);
void Load_PhysMass(bool atStreamStart);
void Load_PhysMassArray(bool atStreamStart, int count);
void Load_PhysMassPtr(bool atStreamStart);
void Load_PhysMassPtrArray(bool atStreamStart, int count);
void Load_PhysPreset(bool atStreamStart);
void Load_PhysPresetArray(bool atStreamStart, int count);
void Load_PhysPresetAsset(PhysPreset** asset);
void Load_PhysPresetPtr(bool atStreamStart);
void Load_PhysPresetPtrArray(bool atStreamStart, int count);
void Load_Picmip(bool atStreamStart);
void Load_PicmipArray(bool atStreamStart, int count);
void Load_PicmipPtr(bool atStreamStart);
void Load_PicmipPtrArray(bool atStreamStart, int count);
void Load_RawFile(bool atStreamStart);
void Load_RawFileArray(bool atStreamStart, int count);
void Load_RawFileAsset(RawFile** asset);
void Load_RawFilePtr(bool atStreamStart);
void Load_RawFilePtrArray(bool atStreamStart, int count);
void Load_SModelAabbNode(bool atStreamStart);
void Load_SModelAabbNodeArray(bool atStreamStart, int count);
void Load_SModelAabbNodePtr(bool atStreamStart);
void Load_SModelAabbNodePtrArray(bool atStreamStart, int count);
void Load_ScriptStringList(bool atStreamStart);
void Load_ScriptStringListArray(bool atStreamStart, int count);
void Load_ScriptStringListPtr(bool atStreamStart);
void Load_ScriptStringListPtrArray(bool atStreamStart, int count);
void Load_SetLocalVarData(bool atStreamStart);
void Load_SetLocalVarDataArray(bool atStreamStart, int count);
void Load_SetLocalVarDataPtr(bool atStreamStart);
void Load_SetLocalVarDataPtrArray(bool atStreamStart, int count);
void Load_SndCurve(bool atStreamStart);
void Load_SndCurveArray(bool atStreamStart, int count);
void Load_SndCurveAsset(SndCurve** asset);
void Load_SndCurvePtr(bool atStreamStart);
void Load_SndCurvePtrArray(bool atStreamStart, int count);
void Load_SndDriverGlobals(bool atStreamStart);
void Load_SndDriverGlobalsArray(bool atStreamStart, int count);
void Load_SndDriverGlobalsPtr(bool atStreamStart);
void Load_SndDriverGlobalsPtrArray(bool atStreamStart, int count);
void Load_SoundFile(bool atStreamStart);
void Load_SoundFileArray(bool atStreamStart, int count);
void Load_SoundFilePtr(bool atStreamStart);
void Load_SoundFilePtrArray(bool atStreamStart, int count);
void Load_SoundFileRef(bool atStreamStart);
void Load_SoundFileRefArray(bool atStreamStart, int count);
void Load_SoundFileRefPtr(bool atStreamStart);
void Load_SoundFileRefPtrArray(bool atStreamStart, int count);
void Load_SpeakerMap(bool atStreamStart);
void Load_SpeakerMapArray(bool atStreamStart, int count);
void Load_SpeakerMapPtr(bool atStreamStart);
void Load_SpeakerMapPtrArray(bool atStreamStart, int count);
void Load_Stage(bool atStreamStart);
void Load_StageArray(bool atStreamStart, int count);
void Load_StagePtr(bool atStreamStart);
void Load_StagePtrArray(bool atStreamStart, int count);
void Load_Statement_s(bool atStreamStart);
void Load_Statement_sArray(bool atStreamStart, int count);
void Load_Statement_sPtr(bool atStreamStart);
void Load_Statement_sPtrArray(bool atStreamStart, int count);
void Load_StaticDvar(bool atStreamStart);
void Load_StaticDvarArray(bool atStreamStart, int count);
void Load_StaticDvarList(bool atStreamStart);
void Load_StaticDvarListArray(bool atStreamStart, int count);
void Load_StaticDvarListPtr(bool atStreamStart);
void Load_StaticDvarListPtrArray(bool atStreamStart, int count);
void Load_StaticDvarPtr(bool atStreamStart);
void Load_StaticDvarPtrArray(bool atStreamStart, int count);
void Load_StreamFileInfo(bool atStreamStart);
void Load_StreamFileInfoArray(bool atStreamStart, int count);
void Load_StreamFileInfoPtr(bool atStreamStart);
void Load_StreamFileInfoPtrArray(bool atStreamStart, int count);
void Load_StreamFileName(bool atStreamStart);
void Load_StreamFileNameArray(bool atStreamStart, int count);
void Load_StreamFileNamePtr(bool atStreamStart);
void Load_StreamFileNamePtrArray(bool atStreamStart, int count);
void Load_StreamFileNameRaw(bool atStreamStart);
void Load_StreamFileNameRawArray(bool atStreamStart, int count);
void Load_StreamFileNameRawPtr(bool atStreamStart);
void Load_StreamFileNameRawPtrArray(bool atStreamStart, int count);
void Load_StreamedSound(bool atStreamStart);
void Load_StreamedSoundArray(bool atStreamStart, int count);
void Load_StreamedSoundPtr(bool atStreamStart);
void Load_StreamedSoundPtrArray(bool atStreamStart, int count);
void Load_StringList(bool atStreamStart);
void Load_StringListArray(bool atStreamStart, int count);
void Load_StringListPtr(bool atStreamStart);
void Load_StringListPtrArray(bool atStreamStart, int count);
void Load_StringTable(bool atStreamStart);
void Load_StringTableArray(bool atStreamStart, int count);
void Load_StringTableAsset(StringTable** asset);
void Load_StringTableCell(bool atStreamStart);
void Load_StringTableCellArray(bool atStreamStart, int count);
void Load_StringTableCellPtr(bool atStreamStart);
void Load_StringTableCellPtrArray(bool atStreamStart, int count);
void Load_StringTablePtr(bool atStreamStart);
void Load_StringTablePtrArray(bool atStreamStart, int count);
void Load_StructuredDataDef(bool atStreamStart);
void Load_StructuredDataDefArray(bool atStreamStart, int count);
void Load_StructuredDataDefPtr(bool atStreamStart);
void Load_StructuredDataDefPtrArray(bool atStreamStart, int count);
void Load_StructuredDataDefSet(bool atStreamStart);
void Load_StructuredDataDefSetArray(bool atStreamStart, int count);
void Load_StructuredDataDefSetAsset(StructuredDataDefSet** asset);
void Load_StructuredDataDefSetPtr(bool atStreamStart);
void Load_StructuredDataDefSetPtrArray(bool atStreamStart, int count);
void Load_StructuredDataEnum(bool atStreamStart);
void Load_StructuredDataEnumArray(bool atStreamStart, int count);
void Load_StructuredDataEnumEntry(bool atStreamStart);
void Load_StructuredDataEnumEntryArray(bool atStreamStart, int count);
void Load_StructuredDataEnumEntryPtr(bool atStreamStart);
void Load_StructuredDataEnumEntryPtrArray(bool atStreamStart, int count);
void Load_StructuredDataEnumPtr(bool atStreamStart);
void Load_StructuredDataEnumPtrArray(bool atStreamStart, int count);
void Load_StructuredDataEnumedArray(bool atStreamStart);
void Load_StructuredDataEnumedArrayArray(bool atStreamStart, int count);
void Load_StructuredDataEnumedArrayPtr(bool atStreamStart);
void Load_StructuredDataEnumedArrayPtrArray(bool atStreamStart, int count);
void Load_StructuredDataIndexedArray(bool atStreamStart);
void Load_StructuredDataIndexedArrayArray(bool atStreamStart, int count);
void Load_StructuredDataIndexedArrayPtr(bool atStreamStart);
void Load_StructuredDataIndexedArrayPtrArray(bool atStreamStart, int count);
void Load_StructuredDataStruct(bool atStreamStart);
void Load_StructuredDataStructArray(bool atStreamStart, int count);
void Load_StructuredDataStructProperty(bool atStreamStart);
void Load_StructuredDataStructPropertyArray(bool atStreamStart, int count);
void Load_StructuredDataStructPropertyPtr(bool atStreamStart);
void Load_StructuredDataStructPropertyPtrArray(bool atStreamStart, int count);
void Load_StructuredDataStructPtr(bool atStreamStart);
void Load_StructuredDataStructPtrArray(bool atStreamStart, int count);
void Load_StructuredDataType(bool atStreamStart);
void Load_StructuredDataTypeArray(bool atStreamStart, int count);
void Load_StructuredDataTypePtr(bool atStreamStart);
void Load_StructuredDataTypePtrArray(bool atStreamStart, int count);
void Load_StructuredDataTypeUnion(bool atStreamStart);
void Load_StructuredDataTypeUnionArray(bool atStreamStart, int count);
void Load_StructuredDataTypeUnionPtr(bool atStreamStart);
void Load_StructuredDataTypeUnionPtrArray(bool atStreamStart, int count);
void Load_TempStringArray(bool atStreamStart, int count);
void Load_TempStringPtr(bool atStreamStart);
void Load_TempStringPtrArray(bool atStreamStart, int count);
void Load_TracerDef(bool atStreamStart);
void Load_TracerDefArray(bool atStreamStart, int count);
void Load_TracerDefAsset(TracerDef** asset);
void Load_TracerDefPtr(bool atStreamStart);
void Load_TracerDefPtrArray(bool atStreamStart, int count);
void Load_TriIndice(bool atStreamStart);
void Load_TriIndiceArray(bool atStreamStart, int count);
void Load_TriIndicePtr(bool atStreamStart);
void Load_TriIndicePtrArray(bool atStreamStart, int count);
void Load_TriggerHull(bool atStreamStart);
void Load_TriggerHullArray(bool atStreamStart, int count);
void Load_TriggerHullPtr(bool atStreamStart);
void Load_TriggerHullPtrArray(bool atStreamStart, int count);
void Load_TriggerModel(bool atStreamStart);
void Load_TriggerModelArray(bool atStreamStart, int count);
void Load_TriggerModelPtr(bool atStreamStart);
void Load_TriggerModelPtrArray(bool atStreamStart, int count);
void Load_TriggerSlab(bool atStreamStart);
void Load_TriggerSlabArray(bool atStreamStart, int count);
void Load_TriggerSlabPtr(bool atStreamStart);
void Load_TriggerSlabPtrArray(bool atStreamStart, int count);
void Load_UIFunctionList(bool atStreamStart);
void Load_UIFunctionListArray(bool atStreamStart, int count);
void Load_UIFunctionListPtr(bool atStreamStart);
void Load_UIFunctionListPtrArray(bool atStreamStart, int count);
void Load_WaterWritable(bool atStreamStart);
void Load_WaterWritableArray(bool atStreamStart, int count);
void Load_WaterWritablePtr(bool atStreamStart);
void Load_WaterWritablePtrArray(bool atStreamStart, int count);
void Load_XAnimDeltaPart(bool atStreamStart);
void Load_XAnimDeltaPartArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartPtr(bool atStreamStart);
void Load_XAnimDeltaPartPtrArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuat(bool atStreamStart);
void Load_XAnimDeltaPartQuat2(bool atStreamStart);
void Load_XAnimDeltaPartQuat2Array(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuat2Ptr(bool atStreamStart);
void Load_XAnimDeltaPartQuat2PtrArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatData(bool atStreamStart);
void Load_XAnimDeltaPartQuatData2(bool atStreamStart);
void Load_XAnimDeltaPartQuatData2Array(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatData2Ptr(bool atStreamStart);
void Load_XAnimDeltaPartQuatData2PtrArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatDataArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatDataFrames(bool atStreamStart);
void Load_XAnimDeltaPartQuatDataFrames2(bool atStreamStart);
void Load_XAnimDeltaPartQuatDataFrames2Array(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatDataFrames2Ptr(bool atStreamStart);
void Load_XAnimDeltaPartQuatDataFrames2PtrArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatDataFramesArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatDataFramesPtr(bool atStreamStart);
void Load_XAnimDeltaPartQuatDataFramesPtrArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatDataPtr(bool atStreamStart);
void Load_XAnimDeltaPartQuatDataPtrArray(bool atStreamStart, int count);
void Load_XAnimDeltaPartQuatPtr(bool atStreamStart);
void Load_XAnimDeltaPartQuatPtrArray(bool atStreamStart, int count);
void Load_XAnimDynamicFrames(bool atStreamStart);
void Load_XAnimDynamicFramesArray(bool atStreamStart, int count);
void Load_XAnimDynamicFramesPtr(bool atStreamStart);
void Load_XAnimDynamicFramesPtrArray(bool atStreamStart, int count);
void Load_XAnimDynamicIndices(bool atStreamStart);
void Load_XAnimDynamicIndicesArray(bool atStreamStart, int count);
void Load_XAnimDynamicIndicesPtr(bool atStreamStart);
void Load_XAnimDynamicIndicesPtrArray(bool atStreamStart, int count);
void Load_XAnimIndices(bool atStreamStart);
void Load_XAnimIndicesArray(bool atStreamStart, int count);
void Load_XAnimIndicesPtr(bool atStreamStart);
void Load_XAnimIndicesPtrArray(bool atStreamStart, int count);
void Load_XAnimNotifyInfo(bool atStreamStart);
void Load_XAnimNotifyInfoArray(bool atStreamStart, int count);
void Load_XAnimNotifyInfoPtr(bool atStreamStart);
void Load_XAnimNotifyInfoPtrArray(bool atStreamStart, int count);
void Load_XAnimPartTrans(bool atStreamStart);
void Load_XAnimPartTransArray(bool atStreamStart, int count);
void Load_XAnimPartTransData(bool atStreamStart);
void Load_XAnimPartTransDataArray(bool atStreamStart, int count);
void Load_XAnimPartTransDataPtr(bool atStreamStart);
void Load_XAnimPartTransDataPtrArray(bool atStreamStart, int count);
void Load_XAnimPartTransFrames(bool atStreamStart);
void Load_XAnimPartTransFramesArray(bool atStreamStart, int count);
void Load_XAnimPartTransFramesPtr(bool atStreamStart);
void Load_XAnimPartTransFramesPtrArray(bool atStreamStart, int count);
void Load_XAnimPartTransPtr(bool atStreamStart);
void Load_XAnimPartTransPtrArray(bool atStreamStart, int count);
void Load_XAnimParts(bool atStreamStart);
void Load_XAnimPartsArray(bool atStreamStart, int count);
void Load_XAnimPartsAsset(XAnimParts** asset);
void Load_XAnimPartsPtr(bool atStreamStart);
void Load_XAnimPartsPtrArray(bool atStreamStart, int count);
void Load_XAsset(bool atStreamStart);
void Load_XAssetArray(bool atStreamStart, int count);
void Load_XAssetHeader(bool atStreamStart);
void Load_XAssetHeaderArray(bool atStreamStart, int count);
void Load_XAssetHeaderPtr(bool atStreamStart);
void Load_XAssetHeaderPtrArray(bool atStreamStart, int count);
void Load_XAssetList(bool atStreamStart);
void Load_XAssetListArray(bool atStreamStart, int count);
void Load_XAssetListAsset(XAssetList** asset);
void Load_XAssetListPtr(bool atStreamStart);
void Load_XAssetListPtrArray(bool atStreamStart, int count);
void Load_XAssetPtr(bool atStreamStart);
void Load_XAssetPtrArray(bool atStreamStart, int count);
void Load_XBoneInfo(bool atStreamStart);
void Load_XBoneInfoArray(bool atStreamStart, int count);
void Load_XBoneInfoPtr(bool atStreamStart);
void Load_XBoneInfoPtrArray(bool atStreamStart, int count);
void Load_XModel(bool atStreamStart);
void Load_XModelArray(bool atStreamStart, int count);
void Load_XModelAsset(XModel** asset);
void Load_XModelCollSurf_s(bool atStreamStart);
void Load_XModelCollSurf_sArray(bool atStreamStart, int count);
void Load_XModelCollSurf_sPtr(bool atStreamStart);
void Load_XModelCollSurf_sPtrArray(bool atStreamStart, int count);
void Load_XModelCollTri_s(bool atStreamStart);
void Load_XModelCollTri_sArray(bool atStreamStart, int count);
void Load_XModelCollTri_sPtr(bool atStreamStart);
void Load_XModelCollTri_sPtrArray(bool atStreamStart, int count);
void Load_XModelLodInfo(bool atStreamStart);
void Load_XModelLodInfoArray(bool atStreamStart, int count);
void Load_XModelLodInfoPtr(bool atStreamStart);
void Load_XModelLodInfoPtrArray(bool atStreamStart, int count);
void Load_XModelPtr(bool atStreamStart);
void Load_XModelPtrArray(bool atStreamStart, int count);
void Load_XModelSurfs(bool atStreamStart);
void Load_XModelSurfsArray(bool atStreamStart, int count);
void Load_XModelSurfsAsset(XModelSurfs** asset);
void Load_XModelSurfsPtr(bool atStreamStart);
void Load_XModelSurfsPtrArray(bool atStreamStart, int count);
void Load_XRigidVertList(bool atStreamStart);
void Load_XRigidVertListArray(bool atStreamStart, int count);
void Load_XRigidVertListPtr(bool atStreamStart);
void Load_XRigidVertListPtrArray(bool atStreamStart, int count);
void Load_XStringArray(bool atStreamStart, int count);
void Load_XStringPtr(bool atStreamStart);
void Load_XStringPtrArray(bool atStreamStart, int count);
void Load_XSurface(bool atStreamStart);
void Load_XSurfaceArray(bool atStreamStart, int count);
void Load_XSurfaceCollisionAabb(bool atStreamStart);
void Load_XSurfaceCollisionAabbArray(bool atStreamStart, int count);
void Load_XSurfaceCollisionAabbPtr(bool atStreamStart);
void Load_XSurfaceCollisionAabbPtrArray(bool atStreamStart, int count);
void Load_XSurfaceCollisionLeaf(bool atStreamStart);
void Load_XSurfaceCollisionLeafArray(bool atStreamStart, int count);
void Load_XSurfaceCollisionLeafPtr(bool atStreamStart);
void Load_XSurfaceCollisionLeafPtrArray(bool atStreamStart, int count);
void Load_XSurfaceCollisionNode(bool atStreamStart);
void Load_XSurfaceCollisionNodeArray(bool atStreamStart, int count);
void Load_XSurfaceCollisionNodePtr(bool atStreamStart);
void Load_XSurfaceCollisionNodePtrArray(bool atStreamStart, int count);
void Load_XSurfaceCollisionTree(bool atStreamStart);
void Load_XSurfaceCollisionTreeArray(bool atStreamStart, int count);
void Load_XSurfaceCollisionTreePtr(bool atStreamStart);
void Load_XSurfaceCollisionTreePtrArray(bool atStreamStart, int count);
void Load_XSurfacePtr(bool atStreamStart);
void Load_XSurfacePtrArray(bool atStreamStart, int count);
void Load_XSurfaceVertexInfo(bool atStreamStart);
void Load_XSurfaceVertexInfoArray(bool atStreamStart, int count);
void Load_XSurfaceVertexInfoPtr(bool atStreamStart);
void Load_XSurfaceVertexInfoPtrArray(bool atStreamStart, int count);
void Load__AILSOUNDINFO(bool atStreamStart);
void Load__AILSOUNDINFOArray(bool atStreamStart, int count);
void Load__AILSOUNDINFOPtr(bool atStreamStart);
void Load__AILSOUNDINFOPtrArray(bool atStreamStart, int count);
void Load_bool(bool atStreamStart);
void Load_boolArray(bool atStreamStart, int count);
void Load_boolPtr(bool atStreamStart);
void Load_boolPtrArray(bool atStreamStart, int count);
void Load_cLeafBrushNodeChildren_t(bool atStreamStart);
void Load_cLeafBrushNodeChildren_tArray(bool atStreamStart, int count);
void Load_cLeafBrushNodeChildren_tPtr(bool atStreamStart);
void Load_cLeafBrushNodeChildren_tPtrArray(bool atStreamStart, int count);
void Load_cLeafBrushNodeData_t(bool atStreamStart);
void Load_cLeafBrushNodeData_tArray(bool atStreamStart, int count);
void Load_cLeafBrushNodeData_tPtr(bool atStreamStart);
void Load_cLeafBrushNodeData_tPtrArray(bool atStreamStart, int count);
void Load_cLeafBrushNodeLeaf_t(bool atStreamStart);
void Load_cLeafBrushNodeLeaf_tArray(bool atStreamStart, int count);
void Load_cLeafBrushNodeLeaf_tPtr(bool atStreamStart);
void Load_cLeafBrushNodeLeaf_tPtrArray(bool atStreamStart, int count);
void Load_cLeafBrushNode_s(bool atStreamStart);
void Load_cLeafBrushNode_sArray(bool atStreamStart, int count);
void Load_cLeafBrushNode_sPtr(bool atStreamStart);
void Load_cLeafBrushNode_sPtrArray(bool atStreamStart, int count);
void Load_cLeaf_t(bool atStreamStart);
void Load_cLeaf_tArray(bool atStreamStart, int count);
void Load_cLeaf_tPtr(bool atStreamStart);
void Load_cLeaf_tPtrArray(bool atStreamStart, int count);
void Load_cNode_t(bool atStreamStart);
void Load_cNode_tArray(bool atStreamStart, int count);
void Load_cNode_tPtr(bool atStreamStart);
void Load_cNode_tPtrArray(bool atStreamStart, int count);
void Load_cStaticModel_s(bool atStreamStart);
void Load_cStaticModel_sArray(bool atStreamStart, int count);
void Load_cStaticModel_sPtr(bool atStreamStart);
void Load_cStaticModel_sPtrArray(bool atStreamStart, int count);
void Load_cbrush_t(bool atStreamStart);
void Load_cbrush_tArray(bool atStreamStart, int count);
void Load_cbrush_tPtr(bool atStreamStart);
void Load_cbrush_tPtrArray(bool atStreamStart, int count);
void Load_cbrushside_t(bool atStreamStart);
void Load_cbrushside_tArray(bool atStreamStart, int count);
void Load_cbrushside_tPtr(bool atStreamStart);
void Load_cbrushside_tPtrArray(bool atStreamStart, int count);
void Load_char(bool atStreamStart);
void Load_char16(bool atStreamStart);
void Load_char16Array(bool atStreamStart, int count);
void Load_char16Ptr(bool atStreamStart);
void Load_char16PtrArray(bool atStreamStart, int count);
void Load_charArray(bool atStreamStart, int count);
void Load_charPtr(bool atStreamStart);
void Load_charPtrArray(bool atStreamStart, int count);
void Load_clipMap_t(bool atStreamStart);
void Load_clipMap_tArray(bool atStreamStart, int count);
void Load_clipMap_tAsset(clipMap_t** asset);
void Load_clipMap_tPtr(bool atStreamStart);
void Load_clipMap_tPtrArray(bool atStreamStart, int count);
void Load_cmodel_t(bool atStreamStart);
void Load_cmodel_tArray(bool atStreamStart, int count);
void Load_cmodel_tPtr(bool atStreamStart);
void Load_cmodel_tPtrArray(bool atStreamStart, int count);
void Load_columnInfo_s(bool atStreamStart);
void Load_columnInfo_sArray(bool atStreamStart, int count);
void Load_columnInfo_sPtr(bool atStreamStart);
void Load_columnInfo_sPtrArray(bool atStreamStart, int count);
void Load_complex_s(bool atStreamStart);
void Load_complex_sArray(bool atStreamStart, int count);
void Load_complex_sPtr(bool atStreamStart);
void Load_complex_sPtrArray(bool atStreamStart, int count);
void Load_cplane_s(bool atStreamStart);
void Load_cplane_sArray(bool atStreamStart, int count);
void Load_cplane_sPtr(bool atStreamStart);
void Load_cplane_sPtrArray(bool atStreamStart, int count);
void Load_double(bool atStreamStart);
void Load_doubleArray(bool atStreamStart, int count);
void Load_doublePtr(bool atStreamStart);
void Load_doublePtrArray(bool atStreamStart, int count);
void Load_editFieldDef_s(bool atStreamStart);
void Load_editFieldDef_sArray(bool atStreamStart, int count);
void Load_editFieldDef_sPtr(bool atStreamStart);
void Load_editFieldDef_sPtrArray(bool atStreamStart, int count);
void Load_entryInternalData(bool atStreamStart);
void Load_entryInternalDataArray(bool atStreamStart, int count);
void Load_entryInternalDataPtr(bool atStreamStart);
void Load_entryInternalDataPtrArray(bool atStreamStart, int count);
void Load_expressionEntry(bool atStreamStart);
void Load_expressionEntryArray(bool atStreamStart, int count);
void Load_expressionEntryPtr(bool atStreamStart);
void Load_expressionEntryPtrArray(bool atStreamStart, int count);
void Load_float(bool atStreamStart);
void Load_float16(bool atStreamStart);
void Load_float16Array(bool atStreamStart, int count);
void Load_float16Ptr(bool atStreamStart);
void Load_float16PtrArray(bool atStreamStart, int count);
void Load_floatArray(bool atStreamStart, int count);
void Load_floatPtr(bool atStreamStart);
void Load_floatPtrArray(bool atStreamStart, int count);
void Load_int16(bool atStreamStart);
void Load_int16Array(bool atStreamStart, int count);
void Load_int16Ptr(bool atStreamStart);
void Load_int16PtrArray(bool atStreamStart, int count);
void Load_int32(bool atStreamStart);
void Load_int32Array(bool atStreamStart, int count);
void Load_int32Ptr(bool atStreamStart);
void Load_int32PtrArray(bool atStreamStart, int count);
void Load_int64(bool atStreamStart);
void Load_int64Array(bool atStreamStart, int count);
void Load_int64Ptr(bool atStreamStart);
void Load_int64PtrArray(bool atStreamStart, int count);
void Load_int8(bool atStreamStart);
void Load_int8Array(bool atStreamStart, int count);
void Load_int8Ptr(bool atStreamStart);
void Load_int8PtrArray(bool atStreamStart, int count);
void Load_itemDefData_t(bool atStreamStart);
void Load_itemDefData_tArray(bool atStreamStart, int count);
void Load_itemDefData_tPtr(bool atStreamStart);
void Load_itemDefData_tPtrArray(bool atStreamStart, int count);
void Load_itemDef_s(bool atStreamStart);
void Load_itemDef_sArray(bool atStreamStart, int count);
void Load_itemDef_sPtr(bool atStreamStart);
void Load_itemDef_sPtrArray(bool atStreamStart, int count);
void Load_listBoxDef_s(bool atStreamStart);
void Load_listBoxDef_sArray(bool atStreamStart, int count);
void Load_listBoxDef_sPtr(bool atStreamStart);
void Load_listBoxDef_sPtrArray(bool atStreamStart, int count);
void Load_menuDef_t(bool atStreamStart);
void Load_menuDef_tArray(bool atStreamStart, int count);
void Load_menuDef_tAsset(menuDef_t** asset);
void Load_menuDef_tPtr(bool atStreamStart);
void Load_menuDef_tPtrArray(bool atStreamStart, int count);
void Load_menuTransition(bool atStreamStart);
void Load_menuTransitionArray(bool atStreamStart, int count);
void Load_menuTransitionPtr(bool atStreamStart);
void Load_menuTransitionPtrArray(bool atStreamStart, int count);
void Load_multiDef_s(bool atStreamStart);
void Load_multiDef_sArray(bool atStreamStart, int count);
void Load_multiDef_sPtr(bool atStreamStart);
void Load_multiDef_sPtrArray(bool atStreamStart, int count);
void Load_newsTickerDef_s(bool atStreamStart);
void Load_newsTickerDef_sArray(bool atStreamStart, int count);
void Load_newsTickerDef_sPtr(bool atStreamStart);
void Load_newsTickerDef_sPtrArray(bool atStreamStart, int count);
void Load_operandInternalDataUnion(bool atStreamStart);
void Load_operandInternalDataUnionArray(bool atStreamStart, int count);
void Load_operandInternalDataUnionPtr(bool atStreamStart);
void Load_operandInternalDataUnionPtrArray(bool atStreamStart, int count);
void Load_rectDef_s(bool atStreamStart);
void Load_rectDef_sArray(bool atStreamStart, int count);
void Load_rectDef_sPtr(bool atStreamStart);
void Load_rectDef_sPtrArray(bool atStreamStart, int count);
void Load_snd_alias_list_t(bool atStreamStart);
void Load_snd_alias_list_tArray(bool atStreamStart, int count);
void Load_snd_alias_list_tAsset(snd_alias_list_t** asset);
void Load_snd_alias_list_tPtr(bool atStreamStart);
void Load_snd_alias_list_tPtrArray(bool atStreamStart, int count);
void Load_snd_alias_t(bool atStreamStart);
void Load_snd_alias_tArray(bool atStreamStart, int count);
void Load_snd_alias_tPtr(bool atStreamStart);
void Load_snd_alias_tPtrArray(bool atStreamStart, int count);
void Load_textScrollDef_s(bool atStreamStart);
void Load_textScrollDef_sArray(bool atStreamStart, int count);
void Load_textScrollDef_sPtr(bool atStreamStart);
void Load_textScrollDef_sPtrArray(bool atStreamStart, int count);
void Load_uint16(bool atStreamStart);
void Load_uint16Array(bool atStreamStart, int count);
void Load_uint16Ptr(bool atStreamStart);
void Load_uint16PtrArray(bool atStreamStart, int count);
void Load_uint32(bool atStreamStart);
void Load_uint32Array(bool atStreamStart, int count);
void Load_uint32Ptr(bool atStreamStart);
void Load_uint32PtrArray(bool atStreamStart, int count);
void Load_uint64(bool atStreamStart);
void Load_uint64Array(bool atStreamStart, int count);
void Load_uint64Ptr(bool atStreamStart);
void Load_uint64PtrArray(bool atStreamStart, int count);
void Load_uint8(bool atStreamStart);
void Load_uint8Array(bool atStreamStart, int count);
void Load_uint8Ptr(bool atStreamStart);
void Load_uint8PtrArray(bool atStreamStart, int count);
void Load_vec1_t(bool atStreamStart);
void Load_vec1_tArray(bool atStreamStart, int count);
void Load_vec1_tPtr(bool atStreamStart);
void Load_vec1_tPtrArray(bool atStreamStart, int count);
void Load_vec2_t(bool atStreamStart);
void Load_vec2_tArray(bool atStreamStart, int count);
void Load_vec2_tPtr(bool atStreamStart);
void Load_vec2_tPtrArray(bool atStreamStart, int count);
void Load_vec3_t(bool atStreamStart);
void Load_vec3_tArray(bool atStreamStart, int count);
void Load_vec3_tPtr(bool atStreamStart);
void Load_vec3_tPtrArray(bool atStreamStart, int count);
void Load_vec4_t(bool atStreamStart);
void Load_vec4_tArray(bool atStreamStart, int count);
void Load_vec4_tPtr(bool atStreamStart);
void Load_vec4_tPtrArray(bool atStreamStart, int count);
void Load_water_t(bool atStreamStart);
void Load_water_tArray(bool atStreamStart, int count);
void Load_water_tPtr(bool atStreamStart);
void Load_water_tPtrArray(bool atStreamStart, int count);
void Load_windowDef_t(bool atStreamStart);
void Load_windowDef_tArray(bool atStreamStart, int count);
void Load_windowDef_tPtr(bool atStreamStart);
void Load_windowDef_tPtrArray(bool atStreamStart, int count);
void Save_$C8D87EB0090687D323381DFB7A82089C(bool atStreamStart);
void Save_$C8D87EB0090687D323381DFB7A82089CArray(bool atStreamStart, int count);
void Save_$C8D87EB0090687D323381DFB7A82089CPtr(bool atStreamStart);
void Save_$C8D87EB0090687D323381DFB7A82089CPtrArray(bool atStreamStart, int count);
void Save_$E43DBA5037697D705289B74D87E76C70(bool atStreamStart);
void Save_$E43DBA5037697D705289B74D87E76C70Array(bool atStreamStart, int count);
void Save_$E43DBA5037697D705289B74D87E76C70Ptr(bool atStreamStart);
void Save_$E43DBA5037697D705289B74D87E76C70PtrArray(bool atStreamStart, int count);
void Save_Bounds(bool atStreamStart);
void Save_BoundsArray(bool atStreamStart, int count);
void Save_BoundsPtr(bool atStreamStart);
void Save_BoundsPtrArray(bool atStreamStart, int count);
void Save_BrushWrapper(bool atStreamStart);
void Save_BrushWrapperArray(bool atStreamStart, int count);
void Save_BrushWrapperPtr(bool atStreamStart);
void Save_BrushWrapperPtrArray(bool atStreamStart, int count);
void Save_CardMemory(bool atStreamStart);
void Save_CardMemoryArray(bool atStreamStart, int count);
void Save_CardMemoryPtr(bool atStreamStart);
void Save_CardMemoryPtrArray(bool atStreamStart, int count);
void Save_ClipMaterial(bool atStreamStart);
void Save_ClipMaterialArray(bool atStreamStart, int count);
void Save_ClipMaterialPtr(bool atStreamStart);
void Save_ClipMaterialPtrArray(bool atStreamStart, int count);
void Save_CollisionAabbTree(bool atStreamStart);
void Save_CollisionAabbTreeArray(bool atStreamStart, int count);
void Save_CollisionAabbTreeIndex(bool atStreamStart);
void Save_CollisionAabbTreeIndexArray(bool atStreamStart, int count);
void Save_CollisionAabbTreeIndexPtr(bool atStreamStart);
void Save_CollisionAabbTreeIndexPtrArray(bool atStreamStart, int count);
void Save_CollisionAabbTreePtr(bool atStreamStart);
void Save_CollisionAabbTreePtrArray(bool atStreamStart, int count);
void Save_CollisionBorder(bool atStreamStart);
void Save_CollisionBorderArray(bool atStreamStart, int count);
void Save_CollisionBorderPtr(bool atStreamStart);
void Save_CollisionBorderPtrArray(bool atStreamStart, int count);
void Save_CollisionPartition(bool atStreamStart);
void Save_CollisionPartitionArray(bool atStreamStart, int count);
void Save_CollisionPartitionPtr(bool atStreamStart);
void Save_CollisionPartitionPtrArray(bool atStreamStart, int count);
void Save_ComPrimaryLight(bool atStreamStart);
void Save_ComPrimaryLightArray(bool atStreamStart, int count);
void Save_ComPrimaryLightPtr(bool atStreamStart);
void Save_ComPrimaryLightPtrArray(bool atStreamStart, int count);
void Save_ComWorld(bool atStreamStart);
void Save_ComWorldArray(bool atStreamStart, int count);
void Save_ComWorldAsset(ComWorld** asset);
void Save_ComWorldPtr(bool atStreamStart);
void Save_ComWorldPtrArray(bool atStreamStart, int count);
void Save_ConditionalScript(bool atStreamStart);
void Save_ConditionalScriptArray(bool atStreamStart, int count);
void Save_ConditionalScriptPtr(bool atStreamStart);
void Save_ConditionalScriptPtrArray(bool atStreamStart, int count);
void Save_DObjAnimMat(bool atStreamStart);
void Save_DObjAnimMatArray(bool atStreamStart, int count);
void Save_DObjAnimMatPtr(bool atStreamStart);
void Save_DObjAnimMatPtrArray(bool atStreamStart, int count);
void Save_DynEntityClient(bool atStreamStart);
void Save_DynEntityClientArray(bool atStreamStart, int count);
void Save_DynEntityClientPtr(bool atStreamStart);
void Save_DynEntityClientPtrArray(bool atStreamStart, int count);
void Save_DynEntityColl(bool atStreamStart);
void Save_DynEntityCollArray(bool atStreamStart, int count);
void Save_DynEntityCollPtr(bool atStreamStart);
void Save_DynEntityCollPtrArray(bool atStreamStart, int count);
void Save_DynEntityDef(bool atStreamStart);
void Save_DynEntityDefArray(bool atStreamStart, int count);
void Save_DynEntityDefPtr(bool atStreamStart);
void Save_DynEntityDefPtrArray(bool atStreamStart, int count);
void Save_DynEntityPose(bool atStreamStart);
void Save_DynEntityPoseArray(bool atStreamStart, int count);
void Save_DynEntityPosePtr(bool atStreamStart);
void Save_DynEntityPosePtrArray(bool atStreamStart, int count);
void Save_EventData(bool atStreamStart);
void Save_EventDataArray(bool atStreamStart, int count);
void Save_EventDataPtr(bool atStreamStart);
void Save_EventDataPtrArray(bool atStreamStart, int count);
void Save_ExpressionString(bool atStreamStart);
void Save_ExpressionStringArray(bool atStreamStart, int count);
void Save_ExpressionStringPtr(bool atStreamStart);
void Save_ExpressionStringPtrArray(bool atStreamStart, int count);
void Save_ExpressionSupportingData(bool atStreamStart);
void Save_ExpressionSupportingDataArray(bool atStreamStart, int count);
void Save_ExpressionSupportingDataPtr(bool atStreamStart);
void Save_ExpressionSupportingDataPtrArray(bool atStreamStart, int count);
void Save_Font_s(bool atStreamStart);
void Save_Font_sArray(bool atStreamStart, int count);
void Save_Font_sAsset(Font_s** asset);
void Save_Font_sPtr(bool atStreamStart);
void Save_Font_sPtrArray(bool atStreamStart, int count);
void Save_FxEffectDef(bool atStreamStart);
void Save_FxEffectDefArray(bool atStreamStart, int count);
void Save_FxEffectDefAsset(FxEffectDef** asset);
void Save_FxEffectDefPtr(bool atStreamStart);
void Save_FxEffectDefPtrArray(bool atStreamStart, int count);
void Save_FxEffectDefRef(bool atStreamStart);
void Save_FxEffectDefRefArray(bool atStreamStart, int count);
void Save_FxEffectDefRefPtr(bool atStreamStart);
void Save_FxEffectDefRefPtrArray(bool atStreamStart, int count);
void Save_FxElemAtlas(bool atStreamStart);
void Save_FxElemAtlasArray(bool atStreamStart, int count);
void Save_FxElemAtlasPtr(bool atStreamStart);
void Save_FxElemAtlasPtrArray(bool atStreamStart, int count);
void Save_FxElemDef(bool atStreamStart);
void Save_FxElemDefArray(bool atStreamStart, int count);
void Save_FxElemDefPtr(bool atStreamStart);
void Save_FxElemDefPtrArray(bool atStreamStart, int count);
void Save_FxElemDefVisuals(bool atStreamStart);
void Save_FxElemDefVisualsArray(bool atStreamStart, int count);
void Save_FxElemDefVisualsPtr(bool atStreamStart);
void Save_FxElemDefVisualsPtrArray(bool atStreamStart, int count);
void Save_FxElemExtendedDefPtr(bool atStreamStart);
void Save_FxElemExtendedDefPtrArray(bool atStreamStart, int count);
void Save_FxElemExtendedDefPtrPtr(bool atStreamStart);
void Save_FxElemExtendedDefPtrPtrArray(bool atStreamStart, int count);
void Save_FxElemMarkVisuals(bool atStreamStart);
void Save_FxElemMarkVisualsArray(bool atStreamStart, int count);
void Save_FxElemMarkVisualsPtr(bool atStreamStart);
void Save_FxElemMarkVisualsPtrArray(bool atStreamStart, int count);
void Save_FxElemVec3Range(bool atStreamStart);
void Save_FxElemVec3RangeArray(bool atStreamStart, int count);
void Save_FxElemVec3RangePtr(bool atStreamStart);
void Save_FxElemVec3RangePtrArray(bool atStreamStart, int count);
void Save_FxElemVelStateInFrame(bool atStreamStart);
void Save_FxElemVelStateInFrameArray(bool atStreamStart, int count);
void Save_FxElemVelStateInFramePtr(bool atStreamStart);
void Save_FxElemVelStateInFramePtrArray(bool atStreamStart, int count);
void Save_FxElemVelStateSample(bool atStreamStart);
void Save_FxElemVelStateSampleArray(bool atStreamStart, int count);
void Save_FxElemVelStateSamplePtr(bool atStreamStart);
void Save_FxElemVelStateSamplePtrArray(bool atStreamStart, int count);
void Save_FxElemVisStateSample(bool atStreamStart);
void Save_FxElemVisStateSampleArray(bool atStreamStart, int count);
void Save_FxElemVisStateSamplePtr(bool atStreamStart);
void Save_FxElemVisStateSamplePtrArray(bool atStreamStart, int count);
void Save_FxElemVisualState(bool atStreamStart);
void Save_FxElemVisualStateArray(bool atStreamStart, int count);
void Save_FxElemVisualStatePtr(bool atStreamStart);
void Save_FxElemVisualStatePtrArray(bool atStreamStart, int count);
void Save_FxElemVisuals(bool atStreamStart);
void Save_FxElemVisualsArray(bool atStreamStart, int count);
void Save_FxElemVisualsPtr(bool atStreamStart);
void Save_FxElemVisualsPtrArray(bool atStreamStart, int count);
void Save_FxFloatRange(bool atStreamStart);
void Save_FxFloatRangeArray(bool atStreamStart, int count);
void Save_FxFloatRangePtr(bool atStreamStart);
void Save_FxFloatRangePtrArray(bool atStreamStart, int count);
void Save_FxGlassCrackHeader(bool atStreamStart);
void Save_FxGlassCrackHeaderArray(bool atStreamStart, int count);
void Save_FxGlassCrackHeaderPtr(bool atStreamStart);
void Save_FxGlassCrackHeaderPtrArray(bool atStreamStart, int count);
void Save_FxGlassDef(bool atStreamStart);
void Save_FxGlassDefArray(bool atStreamStart, int count);
void Save_FxGlassDefPtr(bool atStreamStart);
void Save_FxGlassDefPtrArray(bool atStreamStart, int count);
void Save_FxGlassGeometryData(bool atStreamStart);
void Save_FxGlassGeometryDataArray(bool atStreamStart, int count);
void Save_FxGlassGeometryDataPtr(bool atStreamStart);
void Save_FxGlassGeometryDataPtrArray(bool atStreamStart, int count);
void Save_FxGlassHoleHeader(bool atStreamStart);
void Save_FxGlassHoleHeaderArray(bool atStreamStart, int count);
void Save_FxGlassHoleHeaderPtr(bool atStreamStart);
void Save_FxGlassHoleHeaderPtrArray(bool atStreamStart, int count);
void Save_FxGlassInitPieceState(bool atStreamStart);
void Save_FxGlassInitPieceStateArray(bool atStreamStart, int count);
void Save_FxGlassInitPieceStatePtr(bool atStreamStart);
void Save_FxGlassInitPieceStatePtrArray(bool atStreamStart, int count);
void Save_FxGlassPieceDynamics(bool atStreamStart);
void Save_FxGlassPieceDynamicsArray(bool atStreamStart, int count);
void Save_FxGlassPieceDynamicsPtr(bool atStreamStart);
void Save_FxGlassPieceDynamicsPtrArray(bool atStreamStart, int count);
void Save_FxGlassPiecePlace(bool atStreamStart);
void Save_FxGlassPiecePlaceArray(bool atStreamStart, int count);
void Save_FxGlassPiecePlacePtr(bool atStreamStart);
void Save_FxGlassPiecePlacePtrArray(bool atStreamStart, int count);
void Save_FxGlassPieceState(bool atStreamStart);
void Save_FxGlassPieceStateArray(bool atStreamStart, int count);
void Save_FxGlassPieceStatePtr(bool atStreamStart);
void Save_FxGlassPieceStatePtrArray(bool atStreamStart, int count);
void Save_FxGlassSystem(bool atStreamStart);
void Save_FxGlassSystemArray(bool atStreamStart, int count);
void Save_FxGlassSystemPtr(bool atStreamStart);
void Save_FxGlassSystemPtrArray(bool atStreamStart, int count);
void Save_FxGlassVertex(bool atStreamStart);
void Save_FxGlassVertexArray(bool atStreamStart, int count);
void Save_FxGlassVertexPtr(bool atStreamStart);
void Save_FxGlassVertexPtrArray(bool atStreamStart, int count);
void Save_FxIntRange(bool atStreamStart);
void Save_FxIntRangeArray(bool atStreamStart, int count);
void Save_FxIntRangePtr(bool atStreamStart);
void Save_FxIntRangePtrArray(bool atStreamStart, int count);
void Save_FxSparkFountainDef(bool atStreamStart);
void Save_FxSparkFountainDefArray(bool atStreamStart, int count);
void Save_FxSparkFountainDefPtr(bool atStreamStart);
void Save_FxSparkFountainDefPtrArray(bool atStreamStart, int count);
void Save_FxSpatialFrame(bool atStreamStart);
void Save_FxSpatialFrameArray(bool atStreamStart, int count);
void Save_FxSpatialFramePtr(bool atStreamStart);
void Save_FxSpatialFramePtrArray(bool atStreamStart, int count);
void Save_FxSpawnDef(bool atStreamStart);
void Save_FxSpawnDefArray(bool atStreamStart, int count);
void Save_FxSpawnDefLooping(bool atStreamStart);
void Save_FxSpawnDefLoopingArray(bool atStreamStart, int count);
void Save_FxSpawnDefLoopingPtr(bool atStreamStart);
void Save_FxSpawnDefLoopingPtrArray(bool atStreamStart, int count);
void Save_FxSpawnDefOneShot(bool atStreamStart);
void Save_FxSpawnDefOneShotArray(bool atStreamStart, int count);
void Save_FxSpawnDefOneShotPtr(bool atStreamStart);
void Save_FxSpawnDefOneShotPtrArray(bool atStreamStart, int count);
void Save_FxSpawnDefPtr(bool atStreamStart);
void Save_FxSpawnDefPtrArray(bool atStreamStart, int count);
void Save_FxTrailDef(bool atStreamStart);
void Save_FxTrailDefArray(bool atStreamStart, int count);
void Save_FxTrailDefPtr(bool atStreamStart);
void Save_FxTrailDefPtrArray(bool atStreamStart, int count);
void Save_FxTrailVertex(bool atStreamStart);
void Save_FxTrailVertexArray(bool atStreamStart, int count);
void Save_FxTrailVertexPtr(bool atStreamStart);
void Save_FxTrailVertexPtrArray(bool atStreamStart, int count);
void Save_FxWorld(bool atStreamStart);
void Save_FxWorldArray(bool atStreamStart, int count);
void Save_FxWorldAsset(FxWorld** asset);
void Save_FxWorldPtr(bool atStreamStart);
void Save_FxWorldPtrArray(bool atStreamStart, int count);
void Save_G_GlassData(bool atStreamStart);
void Save_G_GlassDataArray(bool atStreamStart, int count);
void Save_G_GlassDataPtr(bool atStreamStart);
void Save_G_GlassDataPtrArray(bool atStreamStart, int count);
void Save_G_GlassName(bool atStreamStart);
void Save_G_GlassNameArray(bool atStreamStart, int count);
void Save_G_GlassNamePtr(bool atStreamStart);
void Save_G_GlassNamePtrArray(bool atStreamStart, int count);
void Save_G_GlassPiece(bool atStreamStart);
void Save_G_GlassPieceArray(bool atStreamStart, int count);
void Save_G_GlassPiecePtr(bool atStreamStart);
void Save_G_GlassPiecePtrArray(bool atStreamStart, int count);
void Save_GameWorldMp(bool atStreamStart);
void Save_GameWorldMpArray(bool atStreamStart, int count);
void Save_GameWorldMpAsset(GameWorldMp** asset);
void Save_GameWorldMpPtr(bool atStreamStart);
void Save_GameWorldMpPtrArray(bool atStreamStart, int count);
void Save_GfxColor(bool atStreamStart);
void Save_GfxColorArray(bool atStreamStart, int count);
void Save_GfxColorPtr(bool atStreamStart);
void Save_GfxColorPtrArray(bool atStreamStart, int count);
void Save_GfxDrawSurf(bool atStreamStart);
void Save_GfxDrawSurfArray(bool atStreamStart, int count);
void Save_GfxDrawSurfPtr(bool atStreamStart);
void Save_GfxDrawSurfPtrArray(bool atStreamStart, int count);
void Save_GfxImage(bool atStreamStart);
void Save_GfxImageArray(bool atStreamStart, int count);
void Save_GfxImageAsset(GfxImage** asset);
void Save_GfxImageLoadDef(bool atStreamStart);
void Save_GfxImageLoadDefArray(bool atStreamStart, int count);
void Save_GfxImageLoadDefPtr(bool atStreamStart);
void Save_GfxImageLoadDefPtrArray(bool atStreamStart, int count);
void Save_GfxImagePtr(bool atStreamStart);
void Save_GfxImagePtrArray(bool atStreamStart, int count);
void Save_GfxLightDef(bool atStreamStart);
void Save_GfxLightDefArray(bool atStreamStart, int count);
void Save_GfxLightDefAsset(GfxLightDef** asset);
void Save_GfxLightDefPtr(bool atStreamStart);
void Save_GfxLightDefPtrArray(bool atStreamStart, int count);
void Save_GfxLightImage(bool atStreamStart);
void Save_GfxLightImageArray(bool atStreamStart, int count);
void Save_GfxLightImagePtr(bool atStreamStart);
void Save_GfxLightImagePtrArray(bool atStreamStart, int count);
void Save_GfxPackedVertex(bool atStreamStart);
void Save_GfxPackedVertexArray(bool atStreamStart, int count);
void Save_GfxPackedVertexPtr(bool atStreamStart);
void Save_GfxPackedVertexPtrArray(bool atStreamStart, int count);
void Save_GfxPixelShaderLoadDef(bool atStreamStart);
void Save_GfxPixelShaderLoadDefArray(bool atStreamStart, int count);
void Save_GfxPixelShaderLoadDefPtr(bool atStreamStart);
void Save_GfxPixelShaderLoadDefPtrArray(bool atStreamStart, int count);
void Save_GfxPlacement(bool atStreamStart);
void Save_GfxPlacementArray(bool atStreamStart, int count);
void Save_GfxPlacementPtr(bool atStreamStart);
void Save_GfxPlacementPtrArray(bool atStreamStart, int count);
void Save_GfxStateBits(bool atStreamStart);
void Save_GfxStateBitsArray(bool atStreamStart, int count);
void Save_GfxStateBitsPtr(bool atStreamStart);
void Save_GfxStateBitsPtrArray(bool atStreamStart, int count);
void Save_GfxTexture(bool atStreamStart);
void Save_GfxTextureArray(bool atStreamStart, int count);
void Save_GfxTexturePtr(bool atStreamStart);
void Save_GfxTexturePtrArray(bool atStreamStart, int count);
void Save_GfxVertexShaderLoadDef(bool atStreamStart);
void Save_GfxVertexShaderLoadDefArray(bool atStreamStart, int count);
void Save_GfxVertexShaderLoadDefPtr(bool atStreamStart);
void Save_GfxVertexShaderLoadDefPtrArray(bool atStreamStart, int count);
void Save_Glyph(bool atStreamStart);
void Save_GlyphArray(bool atStreamStart, int count);
void Save_GlyphPtr(bool atStreamStart);
void Save_GlyphPtrArray(bool atStreamStart, int count);
void Save_ItemFloatExpression(bool atStreamStart);
void Save_ItemFloatExpressionArray(bool atStreamStart, int count);
void Save_ItemFloatExpressionPtr(bool atStreamStart);
void Save_ItemFloatExpressionPtrArray(bool atStreamStart, int count);
void Save_ItemKeyHandler(bool atStreamStart);
void Save_ItemKeyHandlerArray(bool atStreamStart, int count);
void Save_ItemKeyHandlerPtr(bool atStreamStart);
void Save_ItemKeyHandlerPtrArray(bool atStreamStart, int count);
void Save_LbColumnDef(bool atStreamStart);
void Save_LbColumnDefArray(bool atStreamStart, int count);
void Save_LbColumnDefPtr(bool atStreamStart);
void Save_LbColumnDefPtrArray(bool atStreamStart, int count);
void Save_LeaderboardDef(bool atStreamStart);
void Save_LeaderboardDefArray(bool atStreamStart, int count);
void Save_LeaderboardDefAsset(LeaderboardDef** asset);
void Save_LeaderboardDefPtr(bool atStreamStart);
void Save_LeaderboardDefPtrArray(bool atStreamStart, int count);
void Save_LoadedSound(bool atStreamStart);
void Save_LoadedSoundArray(bool atStreamStart, int count);
void Save_LoadedSoundPtr(bool atStreamStart);
void Save_LoadedSoundPtrArray(bool atStreamStart, int count);
void Save_LocalizeEntry(bool atStreamStart);
void Save_LocalizeEntryArray(bool atStreamStart, int count);
void Save_LocalizeEntryAsset(LocalizeEntry** asset);
void Save_LocalizeEntryPtr(bool atStreamStart);
void Save_LocalizeEntryPtrArray(bool atStreamStart, int count);
void Save_MSSChannelMap(bool atStreamStart);
void Save_MSSChannelMapArray(bool atStreamStart, int count);
void Save_MSSChannelMapPtr(bool atStreamStart);
void Save_MSSChannelMapPtrArray(bool atStreamStart, int count);
void Save_MSSSpeakerLevels(bool atStreamStart);
void Save_MSSSpeakerLevelsArray(bool atStreamStart, int count);
void Save_MSSSpeakerLevelsPtr(bool atStreamStart);
void Save_MSSSpeakerLevelsPtrArray(bool atStreamStart, int count);
void Save_MapEnts(bool atStreamStart);
void Save_MapEntsArray(bool atStreamStart, int count);
void Save_MapEntsAsset(MapEnts** asset);
void Save_MapEntsPtr(bool atStreamStart);
void Save_MapEntsPtrArray(bool atStreamStart, int count);
void Save_MapTriggers(bool atStreamStart);
void Save_MapTriggersArray(bool atStreamStart, int count);
void Save_MapTriggersPtr(bool atStreamStart);
void Save_MapTriggersPtrArray(bool atStreamStart, int count);
void Save_Material(bool atStreamStart);
void Save_MaterialArgumentCodeConst(bool atStreamStart);
void Save_MaterialArgumentCodeConstArray(bool atStreamStart, int count);
void Save_MaterialArgumentCodeConstPtr(bool atStreamStart);
void Save_MaterialArgumentCodeConstPtrArray(bool atStreamStart, int count);
void Save_MaterialArgumentDef(bool atStreamStart);
void Save_MaterialArgumentDefArray(bool atStreamStart, int count);
void Save_MaterialArgumentDefPtr(bool atStreamStart);
void Save_MaterialArgumentDefPtrArray(bool atStreamStart, int count);
void Save_MaterialArray(bool atStreamStart, int count);
void Save_MaterialAsset(Material** asset);
void Save_MaterialConstantDef(bool atStreamStart);
void Save_MaterialConstantDefArray(bool atStreamStart, int count);
void Save_MaterialConstantDefPtr(bool atStreamStart);
void Save_MaterialConstantDefPtrArray(bool atStreamStart, int count);
void Save_MaterialInfo(bool atStreamStart);
void Save_MaterialInfoArray(bool atStreamStart, int count);
void Save_MaterialInfoPtr(bool atStreamStart);
void Save_MaterialInfoPtrArray(bool atStreamStart, int count);
void Save_MaterialPass(bool atStreamStart);
void Save_MaterialPassArray(bool atStreamStart, int count);
void Save_MaterialPassPtr(bool atStreamStart);
void Save_MaterialPassPtrArray(bool atStreamStart, int count);
void Save_MaterialPixelShader(bool atStreamStart);
void Save_MaterialPixelShaderArray(bool atStreamStart, int count);
void Save_MaterialPixelShaderAsset(MaterialPixelShader** asset);
void Save_MaterialPixelShaderProgram(bool atStreamStart);
void Save_MaterialPixelShaderProgramArray(bool atStreamStart, int count);
void Save_MaterialPixelShaderProgramPtr(bool atStreamStart);
void Save_MaterialPixelShaderProgramPtrArray(bool atStreamStart, int count);
void Save_MaterialPixelShaderPtr(bool atStreamStart);
void Save_MaterialPixelShaderPtrArray(bool atStreamStart, int count);
void Save_MaterialPtr(bool atStreamStart);
void Save_MaterialPtrArray(bool atStreamStart, int count);
void Save_MaterialShaderArgument(bool atStreamStart);
void Save_MaterialShaderArgumentArray(bool atStreamStart, int count);
void Save_MaterialShaderArgumentPtr(bool atStreamStart);
void Save_MaterialShaderArgumentPtrArray(bool atStreamStart, int count);
void Save_MaterialStreamRouting(bool atStreamStart);
void Save_MaterialStreamRoutingArray(bool atStreamStart, int count);
void Save_MaterialStreamRoutingPtr(bool atStreamStart);
void Save_MaterialStreamRoutingPtrArray(bool atStreamStart, int count);
void Save_MaterialTechnique(bool atStreamStart);
void Save_MaterialTechniqueArray(bool atStreamStart, int count);
void Save_MaterialTechniquePtr(bool atStreamStart);
void Save_MaterialTechniquePtrArray(bool atStreamStart, int count);
void Save_MaterialTechniqueSet(bool atStreamStart);
void Save_MaterialTechniqueSetArray(bool atStreamStart, int count);
void Save_MaterialTechniqueSetAsset(MaterialTechniqueSet** asset);
void Save_MaterialTechniqueSetPtr(bool atStreamStart);
void Save_MaterialTechniqueSetPtrArray(bool atStreamStart, int count);
void Save_MaterialTextureDef(bool atStreamStart);
void Save_MaterialTextureDefArray(bool atStreamStart, int count);
void Save_MaterialTextureDefInfo(bool atStreamStart);
void Save_MaterialTextureDefInfoArray(bool atStreamStart, int count);
void Save_MaterialTextureDefInfoPtr(bool atStreamStart);
void Save_MaterialTextureDefInfoPtrArray(bool atStreamStart, int count);
void Save_MaterialTextureDefPtr(bool atStreamStart);
void Save_MaterialTextureDefPtrArray(bool atStreamStart, int count);
void Save_MaterialVertexDeclaration(bool atStreamStart);
void Save_MaterialVertexDeclarationArray(bool atStreamStart, int count);
void Save_MaterialVertexDeclarationAsset(MaterialVertexDeclaration** asset);
void Save_MaterialVertexDeclarationPtr(bool atStreamStart);
void Save_MaterialVertexDeclarationPtrArray(bool atStreamStart, int count);
void Save_MaterialVertexShader(bool atStreamStart);
void Save_MaterialVertexShaderArray(bool atStreamStart, int count);
void Save_MaterialVertexShaderAsset(MaterialVertexShader** asset);
void Save_MaterialVertexShaderProgram(bool atStreamStart);
void Save_MaterialVertexShaderProgramArray(bool atStreamStart, int count);
void Save_MaterialVertexShaderProgramPtr(bool atStreamStart);
void Save_MaterialVertexShaderProgramPtrArray(bool atStreamStart, int count);
void Save_MaterialVertexShaderPtr(bool atStreamStart);
void Save_MaterialVertexShaderPtrArray(bool atStreamStart, int count);
void Save_MaterialVertexStreamRouting(bool atStreamStart);
void Save_MaterialVertexStreamRoutingArray(bool atStreamStart, int count);
void Save_MaterialVertexStreamRoutingPtr(bool atStreamStart);
void Save_MaterialVertexStreamRoutingPtrArray(bool atStreamStart, int count);
void Save_MenuEventHandler(bool atStreamStart);
void Save_MenuEventHandlerArray(bool atStreamStart, int count);
void Save_MenuEventHandlerPtr(bool atStreamStart);
void Save_MenuEventHandlerPtrArray(bool atStreamStart, int count);
void Save_MenuEventHandlerSet(bool atStreamStart);
void Save_MenuEventHandlerSetArray(bool atStreamStart, int count);
void Save_MenuEventHandlerSetPtr(bool atStreamStart);
void Save_MenuEventHandlerSetPtrArray(bool atStreamStart, int count);
void Save_MenuList(bool atStreamStart);
void Save_MenuListArray(bool atStreamStart, int count);
void Save_MenuListAsset(MenuList** asset);
void Save_MenuListPtr(bool atStreamStart);
void Save_MenuListPtrArray(bool atStreamStart, int count);
void Save_MssSound(bool atStreamStart);
void Save_MssSoundArray(bool atStreamStart, int count);
void Save_MssSoundPtr(bool atStreamStart);
void Save_MssSoundPtrArray(bool atStreamStart, int count);
void Save_Operand(bool atStreamStart);
void Save_OperandArray(bool atStreamStart, int count);
void Save_OperandPtr(bool atStreamStart);
void Save_OperandPtrArray(bool atStreamStart, int count);
void Save_PackedTexCoords(bool atStreamStart);
void Save_PackedTexCoordsArray(bool atStreamStart, int count);
void Save_PackedTexCoordsPtr(bool atStreamStart);
void Save_PackedTexCoordsPtrArray(bool atStreamStart, int count);
void Save_PackedUnitVec(bool atStreamStart);
void Save_PackedUnitVecArray(bool atStreamStart, int count);
void Save_PackedUnitVecPtr(bool atStreamStart);
void Save_PackedUnitVecPtrArray(bool atStreamStart, int count);
void Save_PhysCollmap(bool atStreamStart);
void Save_PhysCollmapArray(bool atStreamStart, int count);
void Save_PhysCollmapAsset(PhysCollmap** asset);
void Save_PhysCollmapPtr(bool atStreamStart);
void Save_PhysCollmapPtrArray(bool atStreamStart, int count);
void Save_PhysGeomInfo(bool atStreamStart);
void Save_PhysGeomInfoArray(bool atStreamStart, int count);
void Save_PhysGeomInfoPtr(bool atStreamStart);
void Save_PhysGeomInfoPtrArray(bool atStreamStart, int count);
void Save_PhysMass(bool atStreamStart);
void Save_PhysMassArray(bool atStreamStart, int count);
void Save_PhysMassPtr(bool atStreamStart);
void Save_PhysMassPtrArray(bool atStreamStart, int count);
void Save_PhysPreset(bool atStreamStart);
void Save_PhysPresetArray(bool atStreamStart, int count);
void Save_PhysPresetAsset(PhysPreset** asset);
void Save_PhysPresetPtr(bool atStreamStart);
void Save_PhysPresetPtrArray(bool atStreamStart, int count);
void Save_Picmip(bool atStreamStart);
void Save_PicmipArray(bool atStreamStart, int count);
void Save_PicmipPtr(bool atStreamStart);
void Save_PicmipPtrArray(bool atStreamStart, int count);
void Save_RawFile(bool atStreamStart);
void Save_RawFileArray(bool atStreamStart, int count);
void Save_RawFileAsset(RawFile** asset);
void Save_RawFilePtr(bool atStreamStart);
void Save_RawFilePtrArray(bool atStreamStart, int count);
void Save_SModelAabbNode(bool atStreamStart);
void Save_SModelAabbNodeArray(bool atStreamStart, int count);
void Save_SModelAabbNodePtr(bool atStreamStart);
void Save_SModelAabbNodePtrArray(bool atStreamStart, int count);
void Save_ScriptStringList(bool atStreamStart);
void Save_ScriptStringListArray(bool atStreamStart, int count);
void Save_ScriptStringListPtr(bool atStreamStart);
void Save_ScriptStringListPtrArray(bool atStreamStart, int count);
void Save_SetLocalVarData(bool atStreamStart);
void Save_SetLocalVarDataArray(bool atStreamStart, int count);
void Save_SetLocalVarDataPtr(bool atStreamStart);
void Save_SetLocalVarDataPtrArray(bool atStreamStart, int count);
void Save_SndCurve(bool atStreamStart);
void Save_SndCurveArray(bool atStreamStart, int count);
void Save_SndCurveAsset(SndCurve** asset);
void Save_SndCurvePtr(bool atStreamStart);
void Save_SndCurvePtrArray(bool atStreamStart, int count);
void Save_SndDriverGlobals(bool atStreamStart);
void Save_SndDriverGlobalsArray(bool atStreamStart, int count);
void Save_SndDriverGlobalsPtr(bool atStreamStart);
void Save_SndDriverGlobalsPtrArray(bool atStreamStart, int count);
void Save_SoundFile(bool atStreamStart);
void Save_SoundFileArray(bool atStreamStart, int count);
void Save_SoundFilePtr(bool atStreamStart);
void Save_SoundFilePtrArray(bool atStreamStart, int count);
void Save_SoundFileRef(bool atStreamStart);
void Save_SoundFileRefArray(bool atStreamStart, int count);
void Save_SoundFileRefPtr(bool atStreamStart);
void Save_SoundFileRefPtrArray(bool atStreamStart, int count);
void Save_SpeakerMap(bool atStreamStart);
void Save_SpeakerMapArray(bool atStreamStart, int count);
void Save_SpeakerMapPtr(bool atStreamStart);
void Save_SpeakerMapPtrArray(bool atStreamStart, int count);
void Save_Stage(bool atStreamStart);
void Save_StageArray(bool atStreamStart, int count);
void Save_StagePtr(bool atStreamStart);
void Save_StagePtrArray(bool atStreamStart, int count);
void Save_Statement_s(bool atStreamStart);
void Save_Statement_sArray(bool atStreamStart, int count);
void Save_Statement_sPtr(bool atStreamStart);
void Save_Statement_sPtrArray(bool atStreamStart, int count);
void Save_StaticDvar(bool atStreamStart);
void Save_StaticDvarArray(bool atStreamStart, int count);
void Save_StaticDvarList(bool atStreamStart);
void Save_StaticDvarListArray(bool atStreamStart, int count);
void Save_StaticDvarListPtr(bool atStreamStart);
void Save_StaticDvarListPtrArray(bool atStreamStart, int count);
void Save_StaticDvarPtr(bool atStreamStart);
void Save_StaticDvarPtrArray(bool atStreamStart, int count);
void Save_StreamFileInfo(bool atStreamStart);
void Save_StreamFileInfoArray(bool atStreamStart, int count);
void Save_StreamFileInfoPtr(bool atStreamStart);
void Save_StreamFileInfoPtrArray(bool atStreamStart, int count);
void Save_StreamFileName(bool atStreamStart);
void Save_StreamFileNameArray(bool atStreamStart, int count);
void Save_StreamFileNamePtr(bool atStreamStart);
void Save_StreamFileNamePtrArray(bool atStreamStart, int count);
void Save_StreamFileNameRaw(bool atStreamStart);
void Save_StreamFileNameRawArray(bool atStreamStart, int count);
void Save_StreamFileNameRawPtr(bool atStreamStart);
void Save_StreamFileNameRawPtrArray(bool atStreamStart, int count);
void Save_StreamedSound(bool atStreamStart);
void Save_StreamedSoundArray(bool atStreamStart, int count);
void Save_StreamedSoundPtr(bool atStreamStart);
void Save_StreamedSoundPtrArray(bool atStreamStart, int count);
void Save_StringList(bool atStreamStart);
void Save_StringListArray(bool atStreamStart, int count);
void Save_StringListPtr(bool atStreamStart);
void Save_StringListPtrArray(bool atStreamStart, int count);
void Save_StringTable(bool atStreamStart);
void Save_StringTableArray(bool atStreamStart, int count);
void Save_StringTableAsset(StringTable** asset);
void Save_StringTableCell(bool atStreamStart);
void Save_StringTableCellArray(bool atStreamStart, int count);
void Save_StringTableCellPtr(bool atStreamStart);
void Save_StringTableCellPtrArray(bool atStreamStart, int count);
void Save_StringTablePtr(bool atStreamStart);
void Save_StringTablePtrArray(bool atStreamStart, int count);
void Save_StructuredDataDef(bool atStreamStart);
void Save_StructuredDataDefArray(bool atStreamStart, int count);
void Save_StructuredDataDefPtr(bool atStreamStart);
void Save_StructuredDataDefPtrArray(bool atStreamStart, int count);
void Save_StructuredDataDefSet(bool atStreamStart);
void Save_StructuredDataDefSetArray(bool atStreamStart, int count);
void Save_StructuredDataDefSetAsset(StructuredDataDefSet** asset);
void Save_StructuredDataDefSetPtr(bool atStreamStart);
void Save_StructuredDataDefSetPtrArray(bool atStreamStart, int count);
void Save_StructuredDataEnum(bool atStreamStart);
void Save_StructuredDataEnumArray(bool atStreamStart, int count);
void Save_StructuredDataEnumEntry(bool atStreamStart);
void Save_StructuredDataEnumEntryArray(bool atStreamStart, int count);
void Save_StructuredDataEnumEntryPtr(bool atStreamStart);
void Save_StructuredDataEnumEntryPtrArray(bool atStreamStart, int count);
void Save_StructuredDataEnumPtr(bool atStreamStart);
void Save_StructuredDataEnumPtrArray(bool atStreamStart, int count);
void Save_StructuredDataEnumedArray(bool atStreamStart);
void Save_StructuredDataEnumedArrayArray(bool atStreamStart, int count);
void Save_StructuredDataEnumedArrayPtr(bool atStreamStart);
void Save_StructuredDataEnumedArrayPtrArray(bool atStreamStart, int count);
void Save_StructuredDataIndexedArray(bool atStreamStart);
void Save_StructuredDataIndexedArrayArray(bool atStreamStart, int count);
void Save_StructuredDataIndexedArrayPtr(bool atStreamStart);
void Save_StructuredDataIndexedArrayPtrArray(bool atStreamStart, int count);
void Save_StructuredDataStruct(bool atStreamStart);
void Save_StructuredDataStructArray(bool atStreamStart, int count);
void Save_StructuredDataStructProperty(bool atStreamStart);
void Save_StructuredDataStructPropertyArray(bool atStreamStart, int count);
void Save_StructuredDataStructPropertyPtr(bool atStreamStart);
void Save_StructuredDataStructPropertyPtrArray(bool atStreamStart, int count);
void Save_StructuredDataStructPtr(bool atStreamStart);
void Save_StructuredDataStructPtrArray(bool atStreamStart, int count);
void Save_StructuredDataType(bool atStreamStart);
void Save_StructuredDataTypeArray(bool atStreamStart, int count);
void Save_StructuredDataTypePtr(bool atStreamStart);
void Save_StructuredDataTypePtrArray(bool atStreamStart, int count);
void Save_StructuredDataTypeUnion(bool atStreamStart);
void Save_StructuredDataTypeUnionArray(bool atStreamStart, int count);
void Save_StructuredDataTypeUnionPtr(bool atStreamStart);
void Save_StructuredDataTypeUnionPtrArray(bool atStreamStart, int count);
void Save_TempString(bool atStreamStart);
void Save_TempStringArray(bool atStreamStart, int count);
void Save_TempStringPtr(bool atStreamStart);
void Save_TempStringPtrArray(bool atStreamStart, int count);
void Save_TracerDef(bool atStreamStart);
void Save_TracerDefArray(bool atStreamStart, int count);
void Save_TracerDefAsset(TracerDef** asset);
void Save_TracerDefPtr(bool atStreamStart);
void Save_TracerDefPtrArray(bool atStreamStart, int count);
void Save_TriIndice(bool atStreamStart);
void Save_TriIndiceArray(bool atStreamStart, int count);
void Save_TriIndicePtr(bool atStreamStart);
void Save_TriIndicePtrArray(bool atStreamStart, int count);
void Save_TriggerHull(bool atStreamStart);
void Save_TriggerHullArray(bool atStreamStart, int count);
void Save_TriggerHullPtr(bool atStreamStart);
void Save_TriggerHullPtrArray(bool atStreamStart, int count);
void Save_TriggerModel(bool atStreamStart);
void Save_TriggerModelArray(bool atStreamStart, int count);
void Save_TriggerModelPtr(bool atStreamStart);
void Save_TriggerModelPtrArray(bool atStreamStart, int count);
void Save_TriggerSlab(bool atStreamStart);
void Save_TriggerSlabArray(bool atStreamStart, int count);
void Save_TriggerSlabPtr(bool atStreamStart);
void Save_TriggerSlabPtrArray(bool atStreamStart, int count);
void Save_UIFunctionList(bool atStreamStart);
void Save_UIFunctionListArray(bool atStreamStart, int count);
void Save_UIFunctionListPtr(bool atStreamStart);
void Save_UIFunctionListPtrArray(bool atStreamStart, int count);
void Save_WaterWritable(bool atStreamStart);
void Save_WaterWritableArray(bool atStreamStart, int count);
void Save_WaterWritablePtr(bool atStreamStart);
void Save_WaterWritablePtrArray(bool atStreamStart, int count);
void Save_XAnimDeltaPart(bool atStreamStart);
void Save_XAnimDeltaPartArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartPtr(bool atStreamStart);
void Save_XAnimDeltaPartPtrArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuat(bool atStreamStart);
void Save_XAnimDeltaPartQuat2(bool atStreamStart);
void Save_XAnimDeltaPartQuat2Array(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuat2Ptr(bool atStreamStart);
void Save_XAnimDeltaPartQuat2PtrArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatData(bool atStreamStart);
void Save_XAnimDeltaPartQuatData2(bool atStreamStart);
void Save_XAnimDeltaPartQuatData2Array(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatData2Ptr(bool atStreamStart);
void Save_XAnimDeltaPartQuatData2PtrArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatDataArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatDataFrames(bool atStreamStart);
void Save_XAnimDeltaPartQuatDataFrames2(bool atStreamStart);
void Save_XAnimDeltaPartQuatDataFrames2Array(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatDataFrames2Ptr(bool atStreamStart);
void Save_XAnimDeltaPartQuatDataFrames2PtrArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatDataFramesArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatDataFramesPtr(bool atStreamStart);
void Save_XAnimDeltaPartQuatDataFramesPtrArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatDataPtr(bool atStreamStart);
void Save_XAnimDeltaPartQuatDataPtrArray(bool atStreamStart, int count);
void Save_XAnimDeltaPartQuatPtr(bool atStreamStart);
void Save_XAnimDeltaPartQuatPtrArray(bool atStreamStart, int count);
void Save_XAnimDynamicFrames(bool atStreamStart);
void Save_XAnimDynamicFramesArray(bool atStreamStart, int count);
void Save_XAnimDynamicFramesPtr(bool atStreamStart);
void Save_XAnimDynamicFramesPtrArray(bool atStreamStart, int count);
void Save_XAnimDynamicIndices(bool atStreamStart);
void Save_XAnimDynamicIndicesArray(bool atStreamStart, int count);
void Save_XAnimDynamicIndicesPtr(bool atStreamStart);
void Save_XAnimDynamicIndicesPtrArray(bool atStreamStart, int count);
void Save_XAnimIndices(bool atStreamStart);
void Save_XAnimIndicesArray(bool atStreamStart, int count);
void Save_XAnimIndicesPtr(bool atStreamStart);
void Save_XAnimIndicesPtrArray(bool atStreamStart, int count);
void Save_XAnimNotifyInfo(bool atStreamStart);
void Save_XAnimNotifyInfoArray(bool atStreamStart, int count);
void Save_XAnimNotifyInfoPtr(bool atStreamStart);
void Save_XAnimNotifyInfoPtrArray(bool atStreamStart, int count);
void Save_XAnimPartTrans(bool atStreamStart);
void Save_XAnimPartTransArray(bool atStreamStart, int count);
void Save_XAnimPartTransData(bool atStreamStart);
void Save_XAnimPartTransDataArray(bool atStreamStart, int count);
void Save_XAnimPartTransDataPtr(bool atStreamStart);
void Save_XAnimPartTransDataPtrArray(bool atStreamStart, int count);
void Save_XAnimPartTransFrames(bool atStreamStart);
void Save_XAnimPartTransFramesArray(bool atStreamStart, int count);
void Save_XAnimPartTransFramesPtr(bool atStreamStart);
void Save_XAnimPartTransFramesPtrArray(bool atStreamStart, int count);
void Save_XAnimPartTransPtr(bool atStreamStart);
void Save_XAnimPartTransPtrArray(bool atStreamStart, int count);
void Save_XAnimParts(bool atStreamStart);
void Save_XAnimPartsArray(bool atStreamStart, int count);
void Save_XAnimPartsAsset(XAnimParts** asset);
void Save_XAnimPartsPtr(bool atStreamStart);
void Save_XAnimPartsPtrArray(bool atStreamStart, int count);
void Save_XAsset(bool atStreamStart);
void Save_XAssetArray(bool atStreamStart, int count);
void Save_XAssetHeader(bool atStreamStart);
void Save_XAssetHeaderArray(bool atStreamStart, int count);
void Save_XAssetHeaderPtr(bool atStreamStart);
void Save_XAssetHeaderPtrArray(bool atStreamStart, int count);
void Save_XAssetList(bool atStreamStart);
void Save_XAssetListArray(bool atStreamStart, int count);
void Save_XAssetListAsset(XAssetList** asset);
void Save_XAssetListPtr(bool atStreamStart);
void Save_XAssetListPtrArray(bool atStreamStart, int count);
void Save_XAssetPtr(bool atStreamStart);
void Save_XAssetPtrArray(bool atStreamStart, int count);
void Save_XBoneInfo(bool atStreamStart);
void Save_XBoneInfoArray(bool atStreamStart, int count);
void Save_XBoneInfoPtr(bool atStreamStart);
void Save_XBoneInfoPtrArray(bool atStreamStart, int count);
void Save_XModel(bool atStreamStart);
void Save_XModelArray(bool atStreamStart, int count);
void Save_XModelAsset(XModel** asset);
void Save_XModelCollSurf_s(bool atStreamStart);
void Save_XModelCollSurf_sArray(bool atStreamStart, int count);
void Save_XModelCollSurf_sPtr(bool atStreamStart);
void Save_XModelCollSurf_sPtrArray(bool atStreamStart, int count);
void Save_XModelCollTri_s(bool atStreamStart);
void Save_XModelCollTri_sArray(bool atStreamStart, int count);
void Save_XModelCollTri_sPtr(bool atStreamStart);
void Save_XModelCollTri_sPtrArray(bool atStreamStart, int count);
void Save_XModelLodInfo(bool atStreamStart);
void Save_XModelLodInfoArray(bool atStreamStart, int count);
void Save_XModelLodInfoPtr(bool atStreamStart);
void Save_XModelLodInfoPtrArray(bool atStreamStart, int count);
void Save_XModelPtr(bool atStreamStart);
void Save_XModelPtrArray(bool atStreamStart, int count);
void Save_XModelSurfs(bool atStreamStart);
void Save_XModelSurfsArray(bool atStreamStart, int count);
void Save_XModelSurfsAsset(XModelSurfs** asset);
void Save_XModelSurfsPtr(bool atStreamStart);
void Save_XModelSurfsPtrArray(bool atStreamStart, int count);
void Save_XRigidVertList(bool atStreamStart);
void Save_XRigidVertListArray(bool atStreamStart, int count);
void Save_XRigidVertListPtr(bool atStreamStart);
void Save_XRigidVertListPtrArray(bool atStreamStart, int count);
void Save_XString(bool atStreamStart);
void Save_XStringArray(bool atStreamStart, int count);
void Save_XStringPtr(bool atStreamStart);
void Save_XStringPtrArray(bool atStreamStart, int count);
void Save_XSurface(bool atStreamStart);
void Save_XSurfaceArray(bool atStreamStart, int count);
void Save_XSurfaceCollisionAabb(bool atStreamStart);
void Save_XSurfaceCollisionAabbArray(bool atStreamStart, int count);
void Save_XSurfaceCollisionAabbPtr(bool atStreamStart);
void Save_XSurfaceCollisionAabbPtrArray(bool atStreamStart, int count);
void Save_XSurfaceCollisionLeaf(bool atStreamStart);
void Save_XSurfaceCollisionLeafArray(bool atStreamStart, int count);
void Save_XSurfaceCollisionLeafPtr(bool atStreamStart);
void Save_XSurfaceCollisionLeafPtrArray(bool atStreamStart, int count);
void Save_XSurfaceCollisionNode(bool atStreamStart);
void Save_XSurfaceCollisionNodeArray(bool atStreamStart, int count);
void Save_XSurfaceCollisionNodePtr(bool atStreamStart);
void Save_XSurfaceCollisionNodePtrArray(bool atStreamStart, int count);
void Save_XSurfaceCollisionTree(bool atStreamStart);
void Save_XSurfaceCollisionTreeArray(bool atStreamStart, int count);
void Save_XSurfaceCollisionTreePtr(bool atStreamStart);
void Save_XSurfaceCollisionTreePtrArray(bool atStreamStart, int count);
void Save_XSurfacePtr(bool atStreamStart);
void Save_XSurfacePtrArray(bool atStreamStart, int count);
void Save_XSurfaceVertexInfo(bool atStreamStart);
void Save_XSurfaceVertexInfoArray(bool atStreamStart, int count);
void Save_XSurfaceVertexInfoPtr(bool atStreamStart);
void Save_XSurfaceVertexInfoPtrArray(bool atStreamStart, int count);
void Save__AILSOUNDINFO(bool atStreamStart);
void Save__AILSOUNDINFOArray(bool atStreamStart, int count);
void Save__AILSOUNDINFOPtr(bool atStreamStart);
void Save__AILSOUNDINFOPtrArray(bool atStreamStart, int count);
void Save_bool(bool atStreamStart);
void Save_boolArray(bool atStreamStart, int count);
void Save_boolPtr(bool atStreamStart);
void Save_boolPtrArray(bool atStreamStart, int count);
void Save_cLeafBrushNodeChildren_t(bool atStreamStart);
void Save_cLeafBrushNodeChildren_tArray(bool atStreamStart, int count);
void Save_cLeafBrushNodeChildren_tPtr(bool atStreamStart);
void Save_cLeafBrushNodeChildren_tPtrArray(bool atStreamStart, int count);
void Save_cLeafBrushNodeData_t(bool atStreamStart);
void Save_cLeafBrushNodeData_tArray(bool atStreamStart, int count);
void Save_cLeafBrushNodeData_tPtr(bool atStreamStart);
void Save_cLeafBrushNodeData_tPtrArray(bool atStreamStart, int count);
void Save_cLeafBrushNodeLeaf_t(bool atStreamStart);
void Save_cLeafBrushNodeLeaf_tArray(bool atStreamStart, int count);
void Save_cLeafBrushNodeLeaf_tPtr(bool atStreamStart);
void Save_cLeafBrushNodeLeaf_tPtrArray(bool atStreamStart, int count);
void Save_cLeafBrushNode_s(bool atStreamStart);
void Save_cLeafBrushNode_sArray(bool atStreamStart, int count);
void Save_cLeafBrushNode_sPtr(bool atStreamStart);
void Save_cLeafBrushNode_sPtrArray(bool atStreamStart, int count);
void Save_cLeaf_t(bool atStreamStart);
void Save_cLeaf_tArray(bool atStreamStart, int count);
void Save_cLeaf_tPtr(bool atStreamStart);
void Save_cLeaf_tPtrArray(bool atStreamStart, int count);
void Save_cNode_t(bool atStreamStart);
void Save_cNode_tArray(bool atStreamStart, int count);
void Save_cNode_tPtr(bool atStreamStart);
void Save_cNode_tPtrArray(bool atStreamStart, int count);
void Save_cStaticModel_s(bool atStreamStart);
void Save_cStaticModel_sArray(bool atStreamStart, int count);
void Save_cStaticModel_sPtr(bool atStreamStart);
void Save_cStaticModel_sPtrArray(bool atStreamStart, int count);
void Save_cbrush_t(bool atStreamStart);
void Save_cbrush_tArray(bool atStreamStart, int count);
void Save_cbrush_tPtr(bool atStreamStart);
void Save_cbrush_tPtrArray(bool atStreamStart, int count);
void Save_cbrushside_t(bool atStreamStart);
void Save_cbrushside_tArray(bool atStreamStart, int count);
void Save_cbrushside_tPtr(bool atStreamStart);
void Save_cbrushside_tPtrArray(bool atStreamStart, int count);
void Save_char(bool atStreamStart);
void Save_char16(bool atStreamStart);
void Save_char16Array(bool atStreamStart, int count);
void Save_char16Ptr(bool atStreamStart);
void Save_char16PtrArray(bool atStreamStart, int count);
void Save_charArray(bool atStreamStart, int count);
void Save_charPtr(bool atStreamStart);
void Save_charPtrArray(bool atStreamStart, int count);
void Save_clipMap_t(bool atStreamStart);
void Save_clipMap_tArray(bool atStreamStart, int count);
void Save_clipMap_tAsset(clipMap_t** asset);
void Save_clipMap_tPtr(bool atStreamStart);
void Save_clipMap_tPtrArray(bool atStreamStart, int count);
void Save_cmodel_t(bool atStreamStart);
void Save_cmodel_tArray(bool atStreamStart, int count);
void Save_cmodel_tPtr(bool atStreamStart);
void Save_cmodel_tPtrArray(bool atStreamStart, int count);
void Save_columnInfo_s(bool atStreamStart);
void Save_columnInfo_sArray(bool atStreamStart, int count);
void Save_columnInfo_sPtr(bool atStreamStart);
void Save_columnInfo_sPtrArray(bool atStreamStart, int count);
void Save_complex_s(bool atStreamStart);
void Save_complex_sArray(bool atStreamStart, int count);
void Save_complex_sPtr(bool atStreamStart);
void Save_complex_sPtrArray(bool atStreamStart, int count);
void Save_cplane_s(bool atStreamStart);
void Save_cplane_sArray(bool atStreamStart, int count);
void Save_cplane_sPtr(bool atStreamStart);
void Save_cplane_sPtrArray(bool atStreamStart, int count);
void Save_double(bool atStreamStart);
void Save_doubleArray(bool atStreamStart, int count);
void Save_doublePtr(bool atStreamStart);
void Save_doublePtrArray(bool atStreamStart, int count);
void Save_editFieldDef_s(bool atStreamStart);
void Save_editFieldDef_sArray(bool atStreamStart, int count);
void Save_editFieldDef_sPtr(bool atStreamStart);
void Save_editFieldDef_sPtrArray(bool atStreamStart, int count);
void Save_entryInternalData(bool atStreamStart);
void Save_entryInternalDataArray(bool atStreamStart, int count);
void Save_entryInternalDataPtr(bool atStreamStart);
void Save_entryInternalDataPtrArray(bool atStreamStart, int count);
void Save_expressionEntry(bool atStreamStart);
void Save_expressionEntryArray(bool atStreamStart, int count);
void Save_expressionEntryPtr(bool atStreamStart);
void Save_expressionEntryPtrArray(bool atStreamStart, int count);
void Save_float(bool atStreamStart);
void Save_float16(bool atStreamStart);
void Save_float16Array(bool atStreamStart, int count);
void Save_float16Ptr(bool atStreamStart);
void Save_float16PtrArray(bool atStreamStart, int count);
void Save_floatArray(bool atStreamStart, int count);
void Save_floatPtr(bool atStreamStart);
void Save_floatPtrArray(bool atStreamStart, int count);
void Save_int16(bool atStreamStart);
void Save_int16Array(bool atStreamStart, int count);
void Save_int16Ptr(bool atStreamStart);
void Save_int16PtrArray(bool atStreamStart, int count);
void Save_int32(bool atStreamStart);
void Save_int32Array(bool atStreamStart, int count);
void Save_int32Ptr(bool atStreamStart);
void Save_int32PtrArray(bool atStreamStart, int count);
void Save_int64(bool atStreamStart);
void Save_int64Array(bool atStreamStart, int count);
void Save_int64Ptr(bool atStreamStart);
void Save_int64PtrArray(bool atStreamStart, int count);
void Save_int8(bool atStreamStart);
void Save_int8Array(bool atStreamStart, int count);
void Save_int8Ptr(bool atStreamStart);
void Save_int8PtrArray(bool atStreamStart, int count);
void Save_itemDefData_t(bool atStreamStart);
void Save_itemDefData_tArray(bool atStreamStart, int count);
void Save_itemDefData_tPtr(bool atStreamStart);
void Save_itemDefData_tPtrArray(bool atStreamStart, int count);
void Save_itemDef_s(bool atStreamStart);
void Save_itemDef_sArray(bool atStreamStart, int count);
void Save_itemDef_sPtr(bool atStreamStart);
void Save_itemDef_sPtrArray(bool atStreamStart, int count);
void Save_listBoxDef_s(bool atStreamStart);
void Save_listBoxDef_sArray(bool atStreamStart, int count);
void Save_listBoxDef_sPtr(bool atStreamStart);
void Save_listBoxDef_sPtrArray(bool atStreamStart, int count);
void Save_menuDef_t(bool atStreamStart);
void Save_menuDef_tArray(bool atStreamStart, int count);
void Save_menuDef_tAsset(menuDef_t** asset);
void Save_menuDef_tPtr(bool atStreamStart);
void Save_menuDef_tPtrArray(bool atStreamStart, int count);
void Save_menuTransition(bool atStreamStart);
void Save_menuTransitionArray(bool atStreamStart, int count);
void Save_menuTransitionPtr(bool atStreamStart);
void Save_menuTransitionPtrArray(bool atStreamStart, int count);
void Save_multiDef_s(bool atStreamStart);
void Save_multiDef_sArray(bool atStreamStart, int count);
void Save_multiDef_sPtr(bool atStreamStart);
void Save_multiDef_sPtrArray(bool atStreamStart, int count);
void Save_newsTickerDef_s(bool atStreamStart);
void Save_newsTickerDef_sArray(bool atStreamStart, int count);
void Save_newsTickerDef_sPtr(bool atStreamStart);
void Save_newsTickerDef_sPtrArray(bool atStreamStart, int count);
void Save_operandInternalDataUnion(bool atStreamStart);
void Save_operandInternalDataUnionArray(bool atStreamStart, int count);
void Save_operandInternalDataUnionPtr(bool atStreamStart);
void Save_operandInternalDataUnionPtrArray(bool atStreamStart, int count);
void Save_rectDef_s(bool atStreamStart);
void Save_rectDef_sArray(bool atStreamStart, int count);
void Save_rectDef_sPtr(bool atStreamStart);
void Save_rectDef_sPtrArray(bool atStreamStart, int count);
void Save_snd_alias_list_t(bool atStreamStart);
void Save_snd_alias_list_tArray(bool atStreamStart, int count);
void Save_snd_alias_list_tAsset(snd_alias_list_t** asset);
void Save_snd_alias_list_tPtr(bool atStreamStart);
void Save_snd_alias_list_tPtrArray(bool atStreamStart, int count);
void Save_snd_alias_t(bool atStreamStart);
void Save_snd_alias_tArray(bool atStreamStart, int count);
void Save_snd_alias_tPtr(bool atStreamStart);
void Save_snd_alias_tPtrArray(bool atStreamStart, int count);
void Save_textScrollDef_s(bool atStreamStart);
void Save_textScrollDef_sArray(bool atStreamStart, int count);
void Save_textScrollDef_sPtr(bool atStreamStart);
void Save_textScrollDef_sPtrArray(bool atStreamStart, int count);
void Save_uint16(bool atStreamStart);
void Save_uint16Array(bool atStreamStart, int count);
void Save_uint16Ptr(bool atStreamStart);
void Save_uint16PtrArray(bool atStreamStart, int count);
void Save_uint32(bool atStreamStart);
void Save_uint32Array(bool atStreamStart, int count);
void Save_uint32Ptr(bool atStreamStart);
void Save_uint32PtrArray(bool atStreamStart, int count);
void Save_uint64(bool atStreamStart);
void Save_uint64Array(bool atStreamStart, int count);
void Save_uint64Ptr(bool atStreamStart);
void Save_uint64PtrArray(bool atStreamStart, int count);
void Save_uint8(bool atStreamStart);
void Save_uint8Array(bool atStreamStart, int count);
void Save_uint8Ptr(bool atStreamStart);
void Save_uint8PtrArray(bool atStreamStart, int count);
void Save_vec1_t(bool atStreamStart);
void Save_vec1_tArray(bool atStreamStart, int count);
void Save_vec1_tPtr(bool atStreamStart);
void Save_vec1_tPtrArray(bool atStreamStart, int count);
void Save_vec2_t(bool atStreamStart);
void Save_vec2_tArray(bool atStreamStart, int count);
void Save_vec2_tPtr(bool atStreamStart);
void Save_vec2_tPtrArray(bool atStreamStart, int count);
void Save_vec3_t(bool atStreamStart);
void Save_vec3_tArray(bool atStreamStart, int count);
void Save_vec3_tPtr(bool atStreamStart);
void Save_vec3_tPtrArray(bool atStreamStart, int count);
void Save_vec4_t(bool atStreamStart);
void Save_vec4_tArray(bool atStreamStart, int count);
void Save_vec4_tPtr(bool atStreamStart);
void Save_vec4_tPtrArray(bool atStreamStart, int count);
void Save_water_t(bool atStreamStart);
void Save_water_tArray(bool atStreamStart, int count);
void Save_water_tPtr(bool atStreamStart);
void Save_water_tPtrArray(bool atStreamStart, int count);
void Save_windowDef_t(bool atStreamStart);
void Save_windowDef_tArray(bool atStreamStart, int count);
void Save_windowDef_tPtr(bool atStreamStart);
void Save_windowDef_tPtrArray(bool atStreamStart, int count);
water_t* AllocLoad_water_t();
water_t* AllocSave_water_t();
water_t** AllocLoad_water_tPtr();
water_t** AllocSave_water_tPtr();
windowDef_t* AllocLoad_windowDef_t();
windowDef_t* AllocSave_windowDef_t();
windowDef_t** AllocLoad_windowDef_tPtr();
windowDef_t** AllocSave_windowDef_tPtr();

int64* varint64;
int64** varint64Ptr;
int64* outint64;
int64** outint64Ptr;
int64* streamint64;
int64** streamint64Ptr;
uint64* varuint64;
uint64** varuint64Ptr;
uint64* outuint64;
uint64** outuint64Ptr;
uint64* streamuint64;
uint64** streamuint64Ptr;
double* vardouble;
double** vardoublePtr;
double* outdouble;
double** outdoublePtr;
double* streamdouble;
double** streamdoublePtr;
int32* varint32;
int32** varint32Ptr;
int32* outint32;
int32** outint32Ptr;
int32* streamint32;
int32** streamint32Ptr;
uint32* varuint32;
uint32** varuint32Ptr;
uint32* outuint32;
uint32** outuint32Ptr;
uint32* streamuint32;
uint32** streamuint32Ptr;
float* varfloat;
float** varfloatPtr;
float* outfloat;
float** outfloatPtr;
float* streamfloat;
float** streamfloatPtr;
int16* varint16;
int16** varint16Ptr;
int16* outint16;
int16** outint16Ptr;
int16* streamint16;
int16** streamint16Ptr;
uint16* varuint16;
uint16** varuint16Ptr;
uint16* outuint16;
uint16** outuint16Ptr;
uint16* streamuint16;
uint16** streamuint16Ptr;
int8* varint8;
int8** varint8Ptr;
int8* outint8;
int8** outint8Ptr;
int8* streamint8;
int8** streamint8Ptr;
uint8* varuint8;
uint8** varuint8Ptr;
uint8* outuint8;
uint8** outuint8Ptr;
uint8* streamuint8;
uint8** streamuint8Ptr;
char* varchar;
char** varcharPtr;
char* outchar;
char** outcharPtr;
char* streamchar;
char** streamcharPtr;
bool* varbool;
bool** varboolPtr;
bool* outbool;
bool** outboolPtr;
bool* streambool;
bool** streamboolPtr;
void* varvoid;
void** varvoidPtr;
void* outvoid;
void** outvoidPtr;
void* streamvoid;
void** streamvoidPtr;
XString** varXStringPtr;
XString* outXString;
XString** outXStringPtr;
XString* streamXString;
XString** streamXStringPtr;
TempString** varTempStringPtr;
TempString* outTempString;
TempString** outTempStringPtr;
TempString* streamTempString;
TempString** streamTempStringPtr;
XFileBlock* varXFileBlock;
XFileBlock** varXFileBlockPtr;
XFileBlock* outXFileBlock;
XFileBlock** outXFileBlockPtr;
XFileBlock* streamXFileBlock;
XFileBlock** streamXFileBlockPtr;
vec1_t* varvec1_t;
vec1_t** varvec1_tPtr;
vec1_t* outvec1_t;
vec1_t** outvec1_tPtr;
vec1_t* streamvec1_t;
vec1_t** streamvec1_tPtr;
vec2_t* varvec2_t;
vec2_t** varvec2_tPtr;
vec2_t* outvec2_t;
vec2_t** outvec2_tPtr;
vec2_t* streamvec2_t;
vec2_t** streamvec2_tPtr;
vec3_t* varvec3_t;
vec3_t** varvec3_tPtr;
vec3_t* outvec3_t;
vec3_t** outvec3_tPtr;
vec3_t* streamvec3_t;
vec3_t** streamvec3_tPtr;
vec4_t* varvec4_t;
vec4_t** varvec4_tPtr;
vec4_t* outvec4_t;
vec4_t** outvec4_tPtr;
vec4_t* streamvec4_t;
vec4_t** streamvec4_tPtr;
Bounds* varBounds;
Bounds** varBoundsPtr;
Bounds* outBounds;
Bounds** outBoundsPtr;
Bounds* streamBounds;
Bounds** streamBoundsPtr;
cplane_s* varcplane_s;
cplane_s** varcplane_sPtr;
cplane_s* outcplane_s;
cplane_s** outcplane_sPtr;
cplane_s* streamcplane_s;
cplane_s** streamcplane_sPtr;
cbrush_t* varcbrush_t;
cbrush_t** varcbrush_tPtr;
cbrush_t* outcbrush_t;
cbrush_t** outcbrush_tPtr;
cbrush_t* streamcbrush_t;
cbrush_t** streamcbrush_tPtr;
BrushWrapper* varBrushWrapper;
BrushWrapper** varBrushWrapperPtr;
BrushWrapper* outBrushWrapper;
BrushWrapper** outBrushWrapperPtr;
BrushWrapper* streamBrushWrapper;
BrushWrapper** streamBrushWrapperPtr;
DObjAnimMat* varDObjAnimMat;
DObjAnimMat** varDObjAnimMatPtr;
DObjAnimMat* outDObjAnimMat;
DObjAnimMat** outDObjAnimMatPtr;
DObjAnimMat* streamDObjAnimMat;
DObjAnimMat** streamDObjAnimMatPtr;
XSurfaceVertexInfo* varXSurfaceVertexInfo;
XSurfaceVertexInfo** varXSurfaceVertexInfoPtr;
XSurfaceVertexInfo* outXSurfaceVertexInfo;
XSurfaceVertexInfo** outXSurfaceVertexInfoPtr;
XSurfaceVertexInfo* streamXSurfaceVertexInfo;
XSurfaceVertexInfo** streamXSurfaceVertexInfoPtr;
GfxColor* varGfxColor;
GfxColor** varGfxColorPtr;
GfxColor* outGfxColor;
GfxColor** outGfxColorPtr;
GfxColor* streamGfxColor;
GfxColor** streamGfxColorPtr;
PackedTexCoords* varPackedTexCoords;
PackedTexCoords** varPackedTexCoordsPtr;
PackedTexCoords* outPackedTexCoords;
PackedTexCoords** outPackedTexCoordsPtr;
PackedTexCoords* streamPackedTexCoords;
PackedTexCoords** streamPackedTexCoordsPtr;
PackedUnitVec* varPackedUnitVec;
PackedUnitVec** varPackedUnitVecPtr;
PackedUnitVec* outPackedUnitVec;
PackedUnitVec** outPackedUnitVecPtr;
PackedUnitVec* streamPackedUnitVec;
PackedUnitVec** streamPackedUnitVecPtr;
GfxPackedVertex* varGfxPackedVertex;
GfxPackedVertex** varGfxPackedVertexPtr;
GfxPackedVertex* outGfxPackedVertex;
GfxPackedVertex** outGfxPackedVertexPtr;
GfxPackedVertex* streamGfxPackedVertex;
GfxPackedVertex** streamGfxPackedVertexPtr;
XSurfaceCollisionAabb* varXSurfaceCollisionAabb;
XSurfaceCollisionAabb** varXSurfaceCollisionAabbPtr;
XSurfaceCollisionAabb* outXSurfaceCollisionAabb;
XSurfaceCollisionAabb** outXSurfaceCollisionAabbPtr;
XSurfaceCollisionAabb* streamXSurfaceCollisionAabb;
XSurfaceCollisionAabb** streamXSurfaceCollisionAabbPtr;
XSurfaceCollisionNode* varXSurfaceCollisionNode;
XSurfaceCollisionNode** varXSurfaceCollisionNodePtr;
XSurfaceCollisionNode* outXSurfaceCollisionNode;
XSurfaceCollisionNode** outXSurfaceCollisionNodePtr;
XSurfaceCollisionNode* streamXSurfaceCollisionNode;
XSurfaceCollisionNode** streamXSurfaceCollisionNodePtr;
XSurfaceCollisionLeaf* varXSurfaceCollisionLeaf;
XSurfaceCollisionLeaf** varXSurfaceCollisionLeafPtr;
XSurfaceCollisionLeaf* outXSurfaceCollisionLeaf;
XSurfaceCollisionLeaf** outXSurfaceCollisionLeafPtr;
XSurfaceCollisionLeaf* streamXSurfaceCollisionLeaf;
XSurfaceCollisionLeaf** streamXSurfaceCollisionLeafPtr;
XSurfaceCollisionTree* varXSurfaceCollisionTree;
XSurfaceCollisionTree** varXSurfaceCollisionTreePtr;
XSurfaceCollisionTree* outXSurfaceCollisionTree;
XSurfaceCollisionTree** outXSurfaceCollisionTreePtr;
XSurfaceCollisionTree* streamXSurfaceCollisionTree;
XSurfaceCollisionTree** streamXSurfaceCollisionTreePtr;
XRigidVertList* varXRigidVertList;
XRigidVertList** varXRigidVertListPtr;
XRigidVertList* outXRigidVertList;
XRigidVertList** outXRigidVertListPtr;
XRigidVertList* streamXRigidVertList;
XRigidVertList** streamXRigidVertListPtr;
TriIndice* varTriIndice;
TriIndice** varTriIndicePtr;
TriIndice* outTriIndice;
TriIndice** outTriIndicePtr;
TriIndice* streamTriIndice;
TriIndice** streamTriIndicePtr;
XSurface* varXSurface;
XSurface** varXSurfacePtr;
XSurface* outXSurface;
XSurface** outXSurfacePtr;
XSurface* streamXSurface;
XSurface** streamXSurfacePtr;
XModelSurfs* varXModelSurfs;
XModelSurfs** varXModelSurfsPtr;
XModelSurfs* outXModelSurfs;
XModelSurfs** outXModelSurfsPtr;
XModelSurfs* streamXModelSurfs;
XModelSurfs** streamXModelSurfsPtr;
XModelLodInfo* varXModelLodInfo;
XModelLodInfo** varXModelLodInfoPtr;
XModelLodInfo* outXModelLodInfo;
XModelLodInfo** outXModelLodInfoPtr;
XModelLodInfo* streamXModelLodInfo;
XModelLodInfo** streamXModelLodInfoPtr;
XModelCollTri_s* varXModelCollTri_s;
XModelCollTri_s** varXModelCollTri_sPtr;
XModelCollTri_s* outXModelCollTri_s;
XModelCollTri_s** outXModelCollTri_sPtr;
XModelCollTri_s* streamXModelCollTri_s;
XModelCollTri_s** streamXModelCollTri_sPtr;
XModelCollSurf_s* varXModelCollSurf_s;
XModelCollSurf_s** varXModelCollSurf_sPtr;
XModelCollSurf_s* outXModelCollSurf_s;
XModelCollSurf_s** outXModelCollSurf_sPtr;
XModelCollSurf_s* streamXModelCollSurf_s;
XModelCollSurf_s** streamXModelCollSurf_sPtr;
XBoneInfo* varXBoneInfo;
XBoneInfo** varXBoneInfoPtr;
XBoneInfo* outXBoneInfo;
XBoneInfo** outXBoneInfoPtr;
XBoneInfo* streamXBoneInfo;
XBoneInfo** streamXBoneInfoPtr;
XAnimIndices* varXAnimIndices;
XAnimIndices** varXAnimIndicesPtr;
XAnimIndices* outXAnimIndices;
XAnimIndices** outXAnimIndicesPtr;
XAnimIndices* streamXAnimIndices;
XAnimIndices** streamXAnimIndicesPtr;
XAnimNotifyInfo* varXAnimNotifyInfo;
XAnimNotifyInfo** varXAnimNotifyInfoPtr;
XAnimNotifyInfo* outXAnimNotifyInfo;
XAnimNotifyInfo** outXAnimNotifyInfoPtr;
XAnimNotifyInfo* streamXAnimNotifyInfo;
XAnimNotifyInfo** streamXAnimNotifyInfoPtr;
XAnimDynamicFrames* varXAnimDynamicFrames;
XAnimDynamicFrames** varXAnimDynamicFramesPtr;
XAnimDynamicFrames* outXAnimDynamicFrames;
XAnimDynamicFrames** outXAnimDynamicFramesPtr;
XAnimDynamicFrames* streamXAnimDynamicFrames;
XAnimDynamicFrames** streamXAnimDynamicFramesPtr;
XAnimDynamicIndices* varXAnimDynamicIndices;
XAnimDynamicIndices** varXAnimDynamicIndicesPtr;
XAnimDynamicIndices* outXAnimDynamicIndices;
XAnimDynamicIndices** outXAnimDynamicIndicesPtr;
XAnimDynamicIndices* streamXAnimDynamicIndices;
XAnimDynamicIndices** streamXAnimDynamicIndicesPtr;
XAnimPartTransFrames* varXAnimPartTransFrames;
XAnimPartTransFrames** varXAnimPartTransFramesPtr;
XAnimPartTransFrames* outXAnimPartTransFrames;
XAnimPartTransFrames** outXAnimPartTransFramesPtr;
XAnimPartTransFrames* streamXAnimPartTransFrames;
XAnimPartTransFrames** streamXAnimPartTransFramesPtr;
XAnimPartTransData* varXAnimPartTransData;
XAnimPartTransData** varXAnimPartTransDataPtr;
XAnimPartTransData* outXAnimPartTransData;
XAnimPartTransData** outXAnimPartTransDataPtr;
XAnimPartTransData* streamXAnimPartTransData;
XAnimPartTransData** streamXAnimPartTransDataPtr;
XAnimPartTrans* varXAnimPartTrans;
XAnimPartTrans** varXAnimPartTransPtr;
XAnimPartTrans* outXAnimPartTrans;
XAnimPartTrans** outXAnimPartTransPtr;
XAnimPartTrans* streamXAnimPartTrans;
XAnimPartTrans** streamXAnimPartTransPtr;
XAnimDeltaPartQuatDataFrames2* varXAnimDeltaPartQuatDataFrames2;
XAnimDeltaPartQuatDataFrames2** varXAnimDeltaPartQuatDataFrames2Ptr;
XAnimDeltaPartQuatDataFrames2* outXAnimDeltaPartQuatDataFrames2;
XAnimDeltaPartQuatDataFrames2** outXAnimDeltaPartQuatDataFrames2Ptr;
XAnimDeltaPartQuatDataFrames2* streamXAnimDeltaPartQuatDataFrames2;
XAnimDeltaPartQuatDataFrames2** streamXAnimDeltaPartQuatDataFrames2Ptr;
XAnimDeltaPartQuatData2* varXAnimDeltaPartQuatData2;
XAnimDeltaPartQuatData2** varXAnimDeltaPartQuatData2Ptr;
XAnimDeltaPartQuatData2* outXAnimDeltaPartQuatData2;
XAnimDeltaPartQuatData2** outXAnimDeltaPartQuatData2Ptr;
XAnimDeltaPartQuatData2* streamXAnimDeltaPartQuatData2;
XAnimDeltaPartQuatData2** streamXAnimDeltaPartQuatData2Ptr;
XAnimDeltaPartQuat2* varXAnimDeltaPartQuat2;
XAnimDeltaPartQuat2** varXAnimDeltaPartQuat2Ptr;
XAnimDeltaPartQuat2* outXAnimDeltaPartQuat2;
XAnimDeltaPartQuat2** outXAnimDeltaPartQuat2Ptr;
XAnimDeltaPartQuat2* streamXAnimDeltaPartQuat2;
XAnimDeltaPartQuat2** streamXAnimDeltaPartQuat2Ptr;
XAnimDeltaPartQuatDataFrames* varXAnimDeltaPartQuatDataFrames;
XAnimDeltaPartQuatDataFrames** varXAnimDeltaPartQuatDataFramesPtr;
XAnimDeltaPartQuatDataFrames* outXAnimDeltaPartQuatDataFrames;
XAnimDeltaPartQuatDataFrames** outXAnimDeltaPartQuatDataFramesPtr;
XAnimDeltaPartQuatDataFrames* streamXAnimDeltaPartQuatDataFrames;
XAnimDeltaPartQuatDataFrames** streamXAnimDeltaPartQuatDataFramesPtr;
XAnimDeltaPartQuatData* varXAnimDeltaPartQuatData;
XAnimDeltaPartQuatData** varXAnimDeltaPartQuatDataPtr;
XAnimDeltaPartQuatData* outXAnimDeltaPartQuatData;
XAnimDeltaPartQuatData** outXAnimDeltaPartQuatDataPtr;
XAnimDeltaPartQuatData* streamXAnimDeltaPartQuatData;
XAnimDeltaPartQuatData** streamXAnimDeltaPartQuatDataPtr;
XAnimDeltaPartQuat* varXAnimDeltaPartQuat;
XAnimDeltaPartQuat** varXAnimDeltaPartQuatPtr;
XAnimDeltaPartQuat* outXAnimDeltaPartQuat;
XAnimDeltaPartQuat** outXAnimDeltaPartQuatPtr;
XAnimDeltaPartQuat* streamXAnimDeltaPartQuat;
XAnimDeltaPartQuat** streamXAnimDeltaPartQuatPtr;
XAnimDeltaPart* varXAnimDeltaPart;
XAnimDeltaPart** varXAnimDeltaPartPtr;
XAnimDeltaPart* outXAnimDeltaPart;
XAnimDeltaPart** outXAnimDeltaPartPtr;
XAnimDeltaPart* streamXAnimDeltaPart;
XAnimDeltaPart** streamXAnimDeltaPartPtr;
XAnimParts* varXAnimParts;
XAnimParts** varXAnimPartsPtr;
XAnimParts* outXAnimParts;
XAnimParts** outXAnimPartsPtr;
XAnimParts* streamXAnimParts;
XAnimParts** streamXAnimPartsPtr;
PhysPreset* varPhysPreset;
PhysPreset** varPhysPresetPtr;
PhysPreset* outPhysPreset;
PhysPreset** outPhysPresetPtr;
PhysPreset* streamPhysPreset;
PhysPreset** streamPhysPresetPtr;
PhysGeomInfo* varPhysGeomInfo;
PhysGeomInfo** varPhysGeomInfoPtr;
PhysGeomInfo* outPhysGeomInfo;
PhysGeomInfo** outPhysGeomInfoPtr;
PhysGeomInfo* streamPhysGeomInfo;
PhysGeomInfo** streamPhysGeomInfoPtr;
PhysMass* varPhysMass;
PhysMass** varPhysMassPtr;
PhysMass* outPhysMass;
PhysMass** outPhysMassPtr;
PhysMass* streamPhysMass;
PhysMass** streamPhysMassPtr;
PhysCollmap* varPhysCollmap;
PhysCollmap** varPhysCollmapPtr;
PhysCollmap* outPhysCollmap;
PhysCollmap** outPhysCollmapPtr;
PhysCollmap* streamPhysCollmap;
PhysCollmap** streamPhysCollmapPtr;
GfxDrawSurf* varGfxDrawSurf;
GfxDrawSurf** varGfxDrawSurfPtr;
GfxDrawSurf* outGfxDrawSurf;
GfxDrawSurf** outGfxDrawSurfPtr;
GfxDrawSurf* streamGfxDrawSurf;
GfxDrawSurf** streamGfxDrawSurfPtr;
MaterialInfo* varMaterialInfo;
MaterialInfo** varMaterialInfoPtr;
MaterialInfo* outMaterialInfo;
MaterialInfo** outMaterialInfoPtr;
MaterialInfo* streamMaterialInfo;
MaterialInfo** streamMaterialInfoPtr;
MaterialStreamRouting* varMaterialStreamRouting;
MaterialStreamRouting** varMaterialStreamRoutingPtr;
MaterialStreamRouting* outMaterialStreamRouting;
MaterialStreamRouting** outMaterialStreamRoutingPtr;
MaterialStreamRouting* streamMaterialStreamRouting;
MaterialStreamRouting** streamMaterialStreamRoutingPtr;
MaterialVertexStreamRouting* varMaterialVertexStreamRouting;
MaterialVertexStreamRouting** varMaterialVertexStreamRoutingPtr;
MaterialVertexStreamRouting* outMaterialVertexStreamRouting;
MaterialVertexStreamRouting** outMaterialVertexStreamRoutingPtr;
MaterialVertexStreamRouting* streamMaterialVertexStreamRouting;
MaterialVertexStreamRouting** streamMaterialVertexStreamRoutingPtr;
MaterialVertexDeclaration* varMaterialVertexDeclaration;
MaterialVertexDeclaration** varMaterialVertexDeclarationPtr;
MaterialVertexDeclaration* outMaterialVertexDeclaration;
MaterialVertexDeclaration** outMaterialVertexDeclarationPtr;
MaterialVertexDeclaration* streamMaterialVertexDeclaration;
MaterialVertexDeclaration** streamMaterialVertexDeclarationPtr;
GfxVertexShaderLoadDef* varGfxVertexShaderLoadDef;
GfxVertexShaderLoadDef** varGfxVertexShaderLoadDefPtr;
GfxVertexShaderLoadDef* outGfxVertexShaderLoadDef;
GfxVertexShaderLoadDef** outGfxVertexShaderLoadDefPtr;
GfxVertexShaderLoadDef* streamGfxVertexShaderLoadDef;
GfxVertexShaderLoadDef** streamGfxVertexShaderLoadDefPtr;
MaterialVertexShaderProgram* varMaterialVertexShaderProgram;
MaterialVertexShaderProgram** varMaterialVertexShaderProgramPtr;
MaterialVertexShaderProgram* outMaterialVertexShaderProgram;
MaterialVertexShaderProgram** outMaterialVertexShaderProgramPtr;
MaterialVertexShaderProgram* streamMaterialVertexShaderProgram;
MaterialVertexShaderProgram** streamMaterialVertexShaderProgramPtr;
MaterialVertexShader* varMaterialVertexShader;
MaterialVertexShader** varMaterialVertexShaderPtr;
MaterialVertexShader* outMaterialVertexShader;
MaterialVertexShader** outMaterialVertexShaderPtr;
MaterialVertexShader* streamMaterialVertexShader;
MaterialVertexShader** streamMaterialVertexShaderPtr;
GfxPixelShaderLoadDef* varGfxPixelShaderLoadDef;
GfxPixelShaderLoadDef** varGfxPixelShaderLoadDefPtr;
GfxPixelShaderLoadDef* outGfxPixelShaderLoadDef;
GfxPixelShaderLoadDef** outGfxPixelShaderLoadDefPtr;
GfxPixelShaderLoadDef* streamGfxPixelShaderLoadDef;
GfxPixelShaderLoadDef** streamGfxPixelShaderLoadDefPtr;
MaterialPixelShaderProgram* varMaterialPixelShaderProgram;
MaterialPixelShaderProgram** varMaterialPixelShaderProgramPtr;
MaterialPixelShaderProgram* outMaterialPixelShaderProgram;
MaterialPixelShaderProgram** outMaterialPixelShaderProgramPtr;
MaterialPixelShaderProgram* streamMaterialPixelShaderProgram;
MaterialPixelShaderProgram** streamMaterialPixelShaderProgramPtr;
MaterialPixelShader* varMaterialPixelShader;
MaterialPixelShader** varMaterialPixelShaderPtr;
MaterialPixelShader* outMaterialPixelShader;
MaterialPixelShader** outMaterialPixelShaderPtr;
MaterialPixelShader* streamMaterialPixelShader;
MaterialPixelShader** streamMaterialPixelShaderPtr;
MaterialArgumentCodeConst* varMaterialArgumentCodeConst;
MaterialArgumentCodeConst** varMaterialArgumentCodeConstPtr;
MaterialArgumentCodeConst* outMaterialArgumentCodeConst;
MaterialArgumentCodeConst** outMaterialArgumentCodeConstPtr;
MaterialArgumentCodeConst* streamMaterialArgumentCodeConst;
MaterialArgumentCodeConst** streamMaterialArgumentCodeConstPtr;
MaterialArgumentDef* varMaterialArgumentDef;
MaterialArgumentDef** varMaterialArgumentDefPtr;
MaterialArgumentDef* outMaterialArgumentDef;
MaterialArgumentDef** outMaterialArgumentDefPtr;
MaterialArgumentDef* streamMaterialArgumentDef;
MaterialArgumentDef** streamMaterialArgumentDefPtr;
MaterialShaderArgument* varMaterialShaderArgument;
MaterialShaderArgument** varMaterialShaderArgumentPtr;
MaterialShaderArgument* outMaterialShaderArgument;
MaterialShaderArgument** outMaterialShaderArgumentPtr;
MaterialShaderArgument* streamMaterialShaderArgument;
MaterialShaderArgument** streamMaterialShaderArgumentPtr;
MaterialPass* varMaterialPass;
MaterialPass** varMaterialPassPtr;
MaterialPass* outMaterialPass;
MaterialPass** outMaterialPassPtr;
MaterialPass* streamMaterialPass;
MaterialPass** streamMaterialPassPtr;
MaterialTechnique* varMaterialTechnique;
MaterialTechnique** varMaterialTechniquePtr;
MaterialTechnique* outMaterialTechnique;
MaterialTechnique** outMaterialTechniquePtr;
MaterialTechnique* streamMaterialTechnique;
MaterialTechnique** streamMaterialTechniquePtr;
MaterialTechniqueSet* varMaterialTechniqueSet;
MaterialTechniqueSet** varMaterialTechniqueSetPtr;
MaterialTechniqueSet* outMaterialTechniqueSet;
MaterialTechniqueSet** outMaterialTechniqueSetPtr;
MaterialTechniqueSet* streamMaterialTechniqueSet;
MaterialTechniqueSet** streamMaterialTechniqueSetPtr;
WaterWritable* varWaterWritable;
WaterWritable** varWaterWritablePtr;
WaterWritable* outWaterWritable;
WaterWritable** outWaterWritablePtr;
WaterWritable* streamWaterWritable;
WaterWritable** streamWaterWritablePtr;
complex_s* varcomplex_s;
complex_s** varcomplex_sPtr;
complex_s* outcomplex_s;
complex_s** outcomplex_sPtr;
complex_s* streamcomplex_s;
complex_s** streamcomplex_sPtr;
GfxImageLoadDef* varGfxImageLoadDef;
GfxImageLoadDef** varGfxImageLoadDefPtr;
GfxImageLoadDef* outGfxImageLoadDef;
GfxImageLoadDef** outGfxImageLoadDefPtr;
GfxImageLoadDef* streamGfxImageLoadDef;
GfxImageLoadDef** streamGfxImageLoadDefPtr;
GfxTexture* varGfxTexture;
GfxTexture** varGfxTexturePtr;
GfxTexture* outGfxTexture;
GfxTexture** outGfxTexturePtr;
GfxTexture* streamGfxTexture;
GfxTexture** streamGfxTexturePtr;
Picmip* varPicmip;
Picmip** varPicmipPtr;
Picmip* outPicmip;
Picmip** outPicmipPtr;
Picmip* streamPicmip;
Picmip** streamPicmipPtr;
CardMemory* varCardMemory;
CardMemory** varCardMemoryPtr;
CardMemory* outCardMemory;
CardMemory** outCardMemoryPtr;
CardMemory* streamCardMemory;
CardMemory** streamCardMemoryPtr;
GfxImage* varGfxImage;
GfxImage** varGfxImagePtr;
GfxImage* outGfxImage;
GfxImage** outGfxImagePtr;
GfxImage* streamGfxImage;
GfxImage** streamGfxImagePtr;
water_t* varwater_t;
water_t** varwater_tPtr;
water_t* outwater_t;
water_t** outwater_tPtr;
water_t* streamwater_t;
water_t** streamwater_tPtr;
MaterialTextureDefInfo* varMaterialTextureDefInfo;
MaterialTextureDefInfo** varMaterialTextureDefInfoPtr;
MaterialTextureDefInfo* outMaterialTextureDefInfo;
MaterialTextureDefInfo** outMaterialTextureDefInfoPtr;
MaterialTextureDefInfo* streamMaterialTextureDefInfo;
MaterialTextureDefInfo** streamMaterialTextureDefInfoPtr;
MaterialTextureDef* varMaterialTextureDef;
MaterialTextureDef** varMaterialTextureDefPtr;
MaterialTextureDef* outMaterialTextureDef;
MaterialTextureDef** outMaterialTextureDefPtr;
MaterialTextureDef* streamMaterialTextureDef;
MaterialTextureDef** streamMaterialTextureDefPtr;
MaterialConstantDef* varMaterialConstantDef;
MaterialConstantDef** varMaterialConstantDefPtr;
MaterialConstantDef* outMaterialConstantDef;
MaterialConstantDef** outMaterialConstantDefPtr;
MaterialConstantDef* streamMaterialConstantDef;
MaterialConstantDef** streamMaterialConstantDefPtr;
GfxStateBits* varGfxStateBits;
GfxStateBits** varGfxStateBitsPtr;
GfxStateBits* outGfxStateBits;
GfxStateBits** outGfxStateBitsPtr;
GfxStateBits* streamGfxStateBits;
GfxStateBits** streamGfxStateBitsPtr;
Material* varMaterial;
Material** varMaterialPtr;
Material* outMaterial;
Material** outMaterialPtr;
Material* streamMaterial;
Material** streamMaterialPtr;
XModel* varXModel;
XModel** varXModelPtr;
XModel* outXModel;
XModel** outXModelPtr;
XModel* streamXModel;
XModel** streamXModelPtr;
FxEffectDefRef* varFxEffectDefRef;
FxEffectDefRef** varFxEffectDefRefPtr;
FxEffectDefRef* outFxEffectDefRef;
FxEffectDefRef** outFxEffectDefRefPtr;
FxEffectDefRef* streamFxEffectDefRef;
FxEffectDefRef** streamFxEffectDefRefPtr;
FxElemVisuals* varFxElemVisuals;
FxElemVisuals** varFxElemVisualsPtr;
FxElemVisuals* outFxElemVisuals;
FxElemVisuals** outFxElemVisualsPtr;
FxElemVisuals* streamFxElemVisuals;
FxElemVisuals** streamFxElemVisualsPtr;
FxElemMarkVisuals* varFxElemMarkVisuals;
FxElemMarkVisuals** varFxElemMarkVisualsPtr;
FxElemMarkVisuals* outFxElemMarkVisuals;
FxElemMarkVisuals** outFxElemMarkVisualsPtr;
FxElemMarkVisuals* streamFxElemMarkVisuals;
FxElemMarkVisuals** streamFxElemMarkVisualsPtr;
FxElemDefVisuals* varFxElemDefVisuals;
FxElemDefVisuals** varFxElemDefVisualsPtr;
FxElemDefVisuals* outFxElemDefVisuals;
FxElemDefVisuals** outFxElemDefVisualsPtr;
FxElemDefVisuals* streamFxElemDefVisuals;
FxElemDefVisuals** streamFxElemDefVisualsPtr;
FxTrailVertex* varFxTrailVertex;
FxTrailVertex** varFxTrailVertexPtr;
FxTrailVertex* outFxTrailVertex;
FxTrailVertex** outFxTrailVertexPtr;
FxTrailVertex* streamFxTrailVertex;
FxTrailVertex** streamFxTrailVertexPtr;
FxTrailDef* varFxTrailDef;
FxTrailDef** varFxTrailDefPtr;
FxTrailDef* outFxTrailDef;
FxTrailDef** outFxTrailDefPtr;
FxTrailDef* streamFxTrailDef;
FxTrailDef** streamFxTrailDefPtr;
FxSparkFountainDef* varFxSparkFountainDef;
FxSparkFountainDef** varFxSparkFountainDefPtr;
FxSparkFountainDef* outFxSparkFountainDef;
FxSparkFountainDef** outFxSparkFountainDefPtr;
FxSparkFountainDef* streamFxSparkFountainDef;
FxSparkFountainDef** streamFxSparkFountainDefPtr;
FxElemExtendedDefPtr* varFxElemExtendedDefPtr;
FxElemExtendedDefPtr** varFxElemExtendedDefPtrPtr;
FxElemExtendedDefPtr* outFxElemExtendedDefPtr;
FxElemExtendedDefPtr** outFxElemExtendedDefPtrPtr;
FxElemExtendedDefPtr* streamFxElemExtendedDefPtr;
FxElemExtendedDefPtr** streamFxElemExtendedDefPtrPtr;
FxElemVec3Range* varFxElemVec3Range;
FxElemVec3Range** varFxElemVec3RangePtr;
FxElemVec3Range* outFxElemVec3Range;
FxElemVec3Range** outFxElemVec3RangePtr;
FxElemVec3Range* streamFxElemVec3Range;
FxElemVec3Range** streamFxElemVec3RangePtr;
FxIntRange* varFxIntRange;
FxIntRange** varFxIntRangePtr;
FxIntRange* outFxIntRange;
FxIntRange** outFxIntRangePtr;
FxIntRange* streamFxIntRange;
FxIntRange** streamFxIntRangePtr;
FxSpawnDefOneShot* varFxSpawnDefOneShot;
FxSpawnDefOneShot** varFxSpawnDefOneShotPtr;
FxSpawnDefOneShot* outFxSpawnDefOneShot;
FxSpawnDefOneShot** outFxSpawnDefOneShotPtr;
FxSpawnDefOneShot* streamFxSpawnDefOneShot;
FxSpawnDefOneShot** streamFxSpawnDefOneShotPtr;
FxSpawnDefLooping* varFxSpawnDefLooping;
FxSpawnDefLooping** varFxSpawnDefLoopingPtr;
FxSpawnDefLooping* outFxSpawnDefLooping;
FxSpawnDefLooping** outFxSpawnDefLoopingPtr;
FxSpawnDefLooping* streamFxSpawnDefLooping;
FxSpawnDefLooping** streamFxSpawnDefLoopingPtr;
FxSpawnDef* varFxSpawnDef;
FxSpawnDef** varFxSpawnDefPtr;
FxSpawnDef* outFxSpawnDef;
FxSpawnDef** outFxSpawnDefPtr;
FxSpawnDef* streamFxSpawnDef;
FxSpawnDef** streamFxSpawnDefPtr;
FxFloatRange* varFxFloatRange;
FxFloatRange** varFxFloatRangePtr;
FxFloatRange* outFxFloatRange;
FxFloatRange** outFxFloatRangePtr;
FxFloatRange* streamFxFloatRange;
FxFloatRange** streamFxFloatRangePtr;
FxElemAtlas* varFxElemAtlas;
FxElemAtlas** varFxElemAtlasPtr;
FxElemAtlas* outFxElemAtlas;
FxElemAtlas** outFxElemAtlasPtr;
FxElemAtlas* streamFxElemAtlas;
FxElemAtlas** streamFxElemAtlasPtr;
FxElemVelStateInFrame* varFxElemVelStateInFrame;
FxElemVelStateInFrame** varFxElemVelStateInFramePtr;
FxElemVelStateInFrame* outFxElemVelStateInFrame;
FxElemVelStateInFrame** outFxElemVelStateInFramePtr;
FxElemVelStateInFrame* streamFxElemVelStateInFrame;
FxElemVelStateInFrame** streamFxElemVelStateInFramePtr;
FxElemVelStateSample* varFxElemVelStateSample;
FxElemVelStateSample** varFxElemVelStateSamplePtr;
FxElemVelStateSample* outFxElemVelStateSample;
FxElemVelStateSample** outFxElemVelStateSamplePtr;
FxElemVelStateSample* streamFxElemVelStateSample;
FxElemVelStateSample** streamFxElemVelStateSamplePtr;
FxElemVisualState* varFxElemVisualState;
FxElemVisualState** varFxElemVisualStatePtr;
FxElemVisualState* outFxElemVisualState;
FxElemVisualState** outFxElemVisualStatePtr;
FxElemVisualState* streamFxElemVisualState;
FxElemVisualState** streamFxElemVisualStatePtr;
FxElemVisStateSample* varFxElemVisStateSample;
FxElemVisStateSample** varFxElemVisStateSamplePtr;
FxElemVisStateSample* outFxElemVisStateSample;
FxElemVisStateSample** outFxElemVisStateSamplePtr;
FxElemVisStateSample* streamFxElemVisStateSample;
FxElemVisStateSample** streamFxElemVisStateSamplePtr;
FxElemDef* varFxElemDef;
FxElemDef** varFxElemDefPtr;
FxElemDef* outFxElemDef;
FxElemDef** outFxElemDefPtr;
FxElemDef* streamFxElemDef;
FxElemDef** streamFxElemDefPtr;
FxEffectDef* varFxEffectDef;
FxEffectDef** varFxEffectDefPtr;
FxEffectDef* outFxEffectDef;
FxEffectDef** outFxEffectDefPtr;
FxEffectDef* streamFxEffectDef;
FxEffectDef** streamFxEffectDefPtr;
cLeafBrushNodeLeaf_t* varcLeafBrushNodeLeaf_t;
cLeafBrushNodeLeaf_t** varcLeafBrushNodeLeaf_tPtr;
cLeafBrushNodeLeaf_t* outcLeafBrushNodeLeaf_t;
cLeafBrushNodeLeaf_t** outcLeafBrushNodeLeaf_tPtr;
cLeafBrushNodeLeaf_t* streamcLeafBrushNodeLeaf_t;
cLeafBrushNodeLeaf_t** streamcLeafBrushNodeLeaf_tPtr;
cLeafBrushNodeChildren_t* varcLeafBrushNodeChildren_t;
cLeafBrushNodeChildren_t** varcLeafBrushNodeChildren_tPtr;
cLeafBrushNodeChildren_t* outcLeafBrushNodeChildren_t;
cLeafBrushNodeChildren_t** outcLeafBrushNodeChildren_tPtr;
cLeafBrushNodeChildren_t* streamcLeafBrushNodeChildren_t;
cLeafBrushNodeChildren_t** streamcLeafBrushNodeChildren_tPtr;
cLeafBrushNodeData_t* varcLeafBrushNodeData_t;
cLeafBrushNodeData_t** varcLeafBrushNodeData_tPtr;
cLeafBrushNodeData_t* outcLeafBrushNodeData_t;
cLeafBrushNodeData_t** outcLeafBrushNodeData_tPtr;
cLeafBrushNodeData_t* streamcLeafBrushNodeData_t;
cLeafBrushNodeData_t** streamcLeafBrushNodeData_tPtr;
cLeafBrushNode_s* varcLeafBrushNode_s;
cLeafBrushNode_s** varcLeafBrushNode_sPtr;
cLeafBrushNode_s* outcLeafBrushNode_s;
cLeafBrushNode_s** outcLeafBrushNode_sPtr;
cLeafBrushNode_s* streamcLeafBrushNode_s;
cLeafBrushNode_s** streamcLeafBrushNode_sPtr;
ClipMaterial* varClipMaterial;
ClipMaterial** varClipMaterialPtr;
ClipMaterial* outClipMaterial;
ClipMaterial** outClipMaterialPtr;
ClipMaterial* streamClipMaterial;
ClipMaterial** streamClipMaterialPtr;
cStaticModel_s* varcStaticModel_s;
cStaticModel_s** varcStaticModel_sPtr;
cStaticModel_s* outcStaticModel_s;
cStaticModel_s** outcStaticModel_sPtr;
cStaticModel_s* streamcStaticModel_s;
cStaticModel_s** streamcStaticModel_sPtr;
CollisionBorder* varCollisionBorder;
CollisionBorder** varCollisionBorderPtr;
CollisionBorder* outCollisionBorder;
CollisionBorder** outCollisionBorderPtr;
CollisionBorder* streamCollisionBorder;
CollisionBorder** streamCollisionBorderPtr;
CollisionPartition* varCollisionPartition;
CollisionPartition** varCollisionPartitionPtr;
CollisionPartition* outCollisionPartition;
CollisionPartition** outCollisionPartitionPtr;
CollisionPartition* streamCollisionPartition;
CollisionPartition** streamCollisionPartitionPtr;
CollisionAabbTreeIndex* varCollisionAabbTreeIndex;
CollisionAabbTreeIndex** varCollisionAabbTreeIndexPtr;
CollisionAabbTreeIndex* outCollisionAabbTreeIndex;
CollisionAabbTreeIndex** outCollisionAabbTreeIndexPtr;
CollisionAabbTreeIndex* streamCollisionAabbTreeIndex;
CollisionAabbTreeIndex** streamCollisionAabbTreeIndexPtr;
CollisionAabbTree* varCollisionAabbTree;
CollisionAabbTree** varCollisionAabbTreePtr;
CollisionAabbTree* outCollisionAabbTree;
CollisionAabbTree** outCollisionAabbTreePtr;
CollisionAabbTree* streamCollisionAabbTree;
CollisionAabbTree** streamCollisionAabbTreePtr;
cLeaf_t* varcLeaf_t;
cLeaf_t** varcLeaf_tPtr;
cLeaf_t* outcLeaf_t;
cLeaf_t** outcLeaf_tPtr;
cLeaf_t* streamcLeaf_t;
cLeaf_t** streamcLeaf_tPtr;
cmodel_t* varcmodel_t;
cmodel_t** varcmodel_tPtr;
cmodel_t* outcmodel_t;
cmodel_t** outcmodel_tPtr;
cmodel_t* streamcmodel_t;
cmodel_t** streamcmodel_tPtr;
TriggerModel* varTriggerModel;
TriggerModel** varTriggerModelPtr;
TriggerModel* outTriggerModel;
TriggerModel** outTriggerModelPtr;
TriggerModel* streamTriggerModel;
TriggerModel** streamTriggerModelPtr;
TriggerSlab* varTriggerSlab;
TriggerSlab** varTriggerSlabPtr;
TriggerSlab* outTriggerSlab;
TriggerSlab** outTriggerSlabPtr;
TriggerSlab* streamTriggerSlab;
TriggerSlab** streamTriggerSlabPtr;
TriggerHull* varTriggerHull;
TriggerHull** varTriggerHullPtr;
TriggerHull* outTriggerHull;
TriggerHull** outTriggerHullPtr;
TriggerHull* streamTriggerHull;
TriggerHull** streamTriggerHullPtr;
MapTriggers* varMapTriggers;
MapTriggers** varMapTriggersPtr;
MapTriggers* outMapTriggers;
MapTriggers** outMapTriggersPtr;
MapTriggers* streamMapTriggers;
MapTriggers** streamMapTriggersPtr;
Stage* varStage;
Stage** varStagePtr;
Stage* outStage;
Stage** outStagePtr;
Stage* streamStage;
Stage** streamStagePtr;
MapEnts* varMapEnts;
MapEnts** varMapEntsPtr;
MapEnts* outMapEnts;
MapEnts** outMapEntsPtr;
MapEnts* streamMapEnts;
MapEnts** streamMapEntsPtr;
SModelAabbNode* varSModelAabbNode;
SModelAabbNode** varSModelAabbNodePtr;
SModelAabbNode* outSModelAabbNode;
SModelAabbNode** outSModelAabbNodePtr;
SModelAabbNode* streamSModelAabbNode;
SModelAabbNode** streamSModelAabbNodePtr;
GfxPlacement* varGfxPlacement;
GfxPlacement** varGfxPlacementPtr;
GfxPlacement* outGfxPlacement;
GfxPlacement** outGfxPlacementPtr;
GfxPlacement* streamGfxPlacement;
GfxPlacement** streamGfxPlacementPtr;
DynEntityType* varDynEntityType;
DynEntityType** varDynEntityTypePtr;
DynEntityType* outDynEntityType;
DynEntityType** outDynEntityTypePtr;
DynEntityType* streamDynEntityType;
DynEntityType** streamDynEntityTypePtr;
DynEntityDef* varDynEntityDef;
DynEntityDef** varDynEntityDefPtr;
DynEntityDef* outDynEntityDef;
DynEntityDef** outDynEntityDefPtr;
DynEntityDef* streamDynEntityDef;
DynEntityDef** streamDynEntityDefPtr;
DynEntityPose* varDynEntityPose;
DynEntityPose** varDynEntityPosePtr;
DynEntityPose* outDynEntityPose;
DynEntityPose** outDynEntityPosePtr;
DynEntityPose* streamDynEntityPose;
DynEntityPose** streamDynEntityPosePtr;
DynEntityClient* varDynEntityClient;
DynEntityClient** varDynEntityClientPtr;
DynEntityClient* outDynEntityClient;
DynEntityClient** outDynEntityClientPtr;
DynEntityClient* streamDynEntityClient;
DynEntityClient** streamDynEntityClientPtr;
DynEntityColl* varDynEntityColl;
DynEntityColl** varDynEntityCollPtr;
DynEntityColl* outDynEntityColl;
DynEntityColl** outDynEntityCollPtr;
DynEntityColl* streamDynEntityColl;
DynEntityColl** streamDynEntityCollPtr;
cbrushside_t* varcbrushside_t;
cbrushside_t** varcbrushside_tPtr;
cbrushside_t* outcbrushside_t;
cbrushside_t** outcbrushside_tPtr;
cbrushside_t* streamcbrushside_t;
cbrushside_t** streamcbrushside_tPtr;
cNode_t* varcNode_t;
cNode_t** varcNode_tPtr;
cNode_t* outcNode_t;
cNode_t** outcNode_tPtr;
cNode_t* streamcNode_t;
cNode_t** streamcNode_tPtr;
clipMap_t* varclipMap_t;
clipMap_t** varclipMap_tPtr;
clipMap_t* outclipMap_t;
clipMap_t** outclipMap_tPtr;
clipMap_t* streamclipMap_t;
clipMap_t** streamclipMap_tPtr;
RawFile* varRawFile;
RawFile** varRawFilePtr;
RawFile* outRawFile;
RawFile** outRawFilePtr;
RawFile* streamRawFile;
RawFile** streamRawFilePtr;
TracerDef* varTracerDef;
TracerDef** varTracerDefPtr;
TracerDef* outTracerDef;
TracerDef** outTracerDefPtr;
TracerDef* streamTracerDef;
TracerDef** streamTracerDefPtr;
MSSSpeakerLevels* varMSSSpeakerLevels;
MSSSpeakerLevels** varMSSSpeakerLevelsPtr;
MSSSpeakerLevels* outMSSSpeakerLevels;
MSSSpeakerLevels** outMSSSpeakerLevelsPtr;
MSSSpeakerLevels* streamMSSSpeakerLevels;
MSSSpeakerLevels** streamMSSSpeakerLevelsPtr;
MSSChannelMap* varMSSChannelMap;
MSSChannelMap** varMSSChannelMapPtr;
MSSChannelMap* outMSSChannelMap;
MSSChannelMap** outMSSChannelMapPtr;
MSSChannelMap* streamMSSChannelMap;
MSSChannelMap** streamMSSChannelMapPtr;
SpeakerMap* varSpeakerMap;
SpeakerMap** varSpeakerMapPtr;
SpeakerMap* outSpeakerMap;
SpeakerMap** outSpeakerMapPtr;
SpeakerMap* streamSpeakerMap;
SpeakerMap** streamSpeakerMapPtr;
_AILSOUNDINFO* var_AILSOUNDINFO;
_AILSOUNDINFO** var_AILSOUNDINFOPtr;
_AILSOUNDINFO* out_AILSOUNDINFO;
_AILSOUNDINFO** out_AILSOUNDINFOPtr;
_AILSOUNDINFO* stream_AILSOUNDINFO;
_AILSOUNDINFO** stream_AILSOUNDINFOPtr;
MssSound* varMssSound;
MssSound** varMssSoundPtr;
MssSound* outMssSound;
MssSound** outMssSoundPtr;
MssSound* streamMssSound;
MssSound** streamMssSoundPtr;
LoadedSound* varLoadedSound;
LoadedSound** varLoadedSoundPtr;
LoadedSound* outLoadedSound;
LoadedSound** outLoadedSoundPtr;
LoadedSound* streamLoadedSound;
LoadedSound** streamLoadedSoundPtr;
StreamFileNameRaw* varStreamFileNameRaw;
StreamFileNameRaw** varStreamFileNameRawPtr;
StreamFileNameRaw* outStreamFileNameRaw;
StreamFileNameRaw** outStreamFileNameRawPtr;
StreamFileNameRaw* streamStreamFileNameRaw;
StreamFileNameRaw** streamStreamFileNameRawPtr;
StreamFileInfo* varStreamFileInfo;
StreamFileInfo** varStreamFileInfoPtr;
StreamFileInfo* outStreamFileInfo;
StreamFileInfo** outStreamFileInfoPtr;
StreamFileInfo* streamStreamFileInfo;
StreamFileInfo** streamStreamFileInfoPtr;
StreamFileName* varStreamFileName;
StreamFileName** varStreamFileNamePtr;
StreamFileName* outStreamFileName;
StreamFileName** outStreamFileNamePtr;
StreamFileName* streamStreamFileName;
StreamFileName** streamStreamFileNamePtr;
StreamedSound* varStreamedSound;
StreamedSound** varStreamedSoundPtr;
StreamedSound* outStreamedSound;
StreamedSound** outStreamedSoundPtr;
StreamedSound* streamStreamedSound;
StreamedSound** streamStreamedSoundPtr;
SoundFileRef* varSoundFileRef;
SoundFileRef** varSoundFileRefPtr;
SoundFileRef* outSoundFileRef;
SoundFileRef** outSoundFileRefPtr;
SoundFileRef* streamSoundFileRef;
SoundFileRef** streamSoundFileRefPtr;
SoundFile* varSoundFile;
SoundFile** varSoundFilePtr;
SoundFile* outSoundFile;
SoundFile** outSoundFilePtr;
SoundFile* streamSoundFile;
SoundFile** streamSoundFilePtr;
SndCurve* varSndCurve;
SndCurve** varSndCurvePtr;
SndCurve* outSndCurve;
SndCurve** outSndCurvePtr;
SndCurve* streamSndCurve;
SndCurve** streamSndCurvePtr;
$C8D87EB0090687D323381DFB7A82089C* var$C8D87EB0090687D323381DFB7A82089C;
$C8D87EB0090687D323381DFB7A82089C** var$C8D87EB0090687D323381DFB7A82089CPtr;
$C8D87EB0090687D323381DFB7A82089C* out$C8D87EB0090687D323381DFB7A82089C;
$C8D87EB0090687D323381DFB7A82089C** out$C8D87EB0090687D323381DFB7A82089CPtr;
$C8D87EB0090687D323381DFB7A82089C* stream$C8D87EB0090687D323381DFB7A82089C;
$C8D87EB0090687D323381DFB7A82089C** stream$C8D87EB0090687D323381DFB7A82089CPtr;
snd_alias_t* varsnd_alias_t;
snd_alias_t** varsnd_alias_tPtr;
snd_alias_t* outsnd_alias_t;
snd_alias_t** outsnd_alias_tPtr;
snd_alias_t* streamsnd_alias_t;
snd_alias_t** streamsnd_alias_tPtr;
snd_alias_list_t* varsnd_alias_list_t;
snd_alias_list_t** varsnd_alias_list_tPtr;
snd_alias_list_t* outsnd_alias_list_t;
snd_alias_list_t** outsnd_alias_list_tPtr;
snd_alias_list_t* streamsnd_alias_list_t;
snd_alias_list_t** streamsnd_alias_list_tPtr;
StringTableCell* varStringTableCell;
StringTableCell** varStringTableCellPtr;
StringTableCell* outStringTableCell;
StringTableCell** outStringTableCellPtr;
StringTableCell* streamStringTableCell;
StringTableCell** streamStringTableCellPtr;
StringTable* varStringTable;
StringTable** varStringTablePtr;
StringTable* outStringTable;
StringTable** outStringTablePtr;
StringTable* streamStringTable;
StringTable** streamStringTablePtr;
SndDriverGlobals* varSndDriverGlobals;
SndDriverGlobals** varSndDriverGlobalsPtr;
SndDriverGlobals* outSndDriverGlobals;
SndDriverGlobals** outSndDriverGlobalsPtr;
SndDriverGlobals* streamSndDriverGlobals;
SndDriverGlobals** streamSndDriverGlobalsPtr;
menuDef_t* varmenuDef_t;
menuDef_t** varmenuDef_tPtr;
menuDef_t* outmenuDef_t;
menuDef_t** outmenuDef_tPtr;
menuDef_t* streammenuDef_t;
menuDef_t** streammenuDef_tPtr;
MenuEventHandlerSet* varMenuEventHandlerSet;
MenuEventHandlerSet** varMenuEventHandlerSetPtr;
MenuEventHandlerSet* outMenuEventHandlerSet;
MenuEventHandlerSet** outMenuEventHandlerSetPtr;
MenuEventHandlerSet* streamMenuEventHandlerSet;
MenuEventHandlerSet** streamMenuEventHandlerSetPtr;
Statement_s* varStatement_s;
Statement_s** varStatement_sPtr;
Statement_s* outStatement_s;
Statement_s** outStatement_sPtr;
Statement_s* streamStatement_s;
Statement_s** streamStatement_sPtr;
ExpressionSupportingData* varExpressionSupportingData;
ExpressionSupportingData** varExpressionSupportingDataPtr;
ExpressionSupportingData* outExpressionSupportingData;
ExpressionSupportingData** outExpressionSupportingDataPtr;
ExpressionSupportingData* streamExpressionSupportingData;
ExpressionSupportingData** streamExpressionSupportingDataPtr;
columnInfo_s* varcolumnInfo_s;
columnInfo_s** varcolumnInfo_sPtr;
columnInfo_s* outcolumnInfo_s;
columnInfo_s** outcolumnInfo_sPtr;
columnInfo_s* streamcolumnInfo_s;
columnInfo_s** streamcolumnInfo_sPtr;
listBoxDef_s* varlistBoxDef_s;
listBoxDef_s** varlistBoxDef_sPtr;
listBoxDef_s* outlistBoxDef_s;
listBoxDef_s** outlistBoxDef_sPtr;
listBoxDef_s* streamlistBoxDef_s;
listBoxDef_s** streamlistBoxDef_sPtr;
editFieldDef_s* vareditFieldDef_s;
editFieldDef_s** vareditFieldDef_sPtr;
editFieldDef_s* outeditFieldDef_s;
editFieldDef_s** outeditFieldDef_sPtr;
editFieldDef_s* streameditFieldDef_s;
editFieldDef_s** streameditFieldDef_sPtr;
multiDef_s* varmultiDef_s;
multiDef_s** varmultiDef_sPtr;
multiDef_s* outmultiDef_s;
multiDef_s** outmultiDef_sPtr;
multiDef_s* streammultiDef_s;
multiDef_s** streammultiDef_sPtr;
newsTickerDef_s* varnewsTickerDef_s;
newsTickerDef_s** varnewsTickerDef_sPtr;
newsTickerDef_s* outnewsTickerDef_s;
newsTickerDef_s** outnewsTickerDef_sPtr;
newsTickerDef_s* streamnewsTickerDef_s;
newsTickerDef_s** streamnewsTickerDef_sPtr;
textScrollDef_s* vartextScrollDef_s;
textScrollDef_s** vartextScrollDef_sPtr;
textScrollDef_s* outtextScrollDef_s;
textScrollDef_s** outtextScrollDef_sPtr;
textScrollDef_s* streamtextScrollDef_s;
textScrollDef_s** streamtextScrollDef_sPtr;
itemDefData_t* varitemDefData_t;
itemDefData_t** varitemDefData_tPtr;
itemDefData_t* outitemDefData_t;
itemDefData_t** outitemDefData_tPtr;
itemDefData_t* streamitemDefData_t;
itemDefData_t** streamitemDefData_tPtr;
ExpressionString* varExpressionString;
ExpressionString** varExpressionStringPtr;
ExpressionString* outExpressionString;
ExpressionString** outExpressionStringPtr;
ExpressionString* streamExpressionString;
ExpressionString** streamExpressionStringPtr;
operandInternalDataUnion* varoperandInternalDataUnion;
operandInternalDataUnion** varoperandInternalDataUnionPtr;
operandInternalDataUnion* outoperandInternalDataUnion;
operandInternalDataUnion** outoperandInternalDataUnionPtr;
operandInternalDataUnion* streamoperandInternalDataUnion;
operandInternalDataUnion** streamoperandInternalDataUnionPtr;
expDataType* varexpDataType;
expDataType** varexpDataTypePtr;
expDataType* outexpDataType;
expDataType** outexpDataTypePtr;
expDataType* streamexpDataType;
expDataType** streamexpDataTypePtr;
Operand* varOperand;
Operand** varOperandPtr;
Operand* outOperand;
Operand** outOperandPtr;
Operand* streamOperand;
Operand** streamOperandPtr;
entryInternalData* varentryInternalData;
entryInternalData** varentryInternalDataPtr;
entryInternalData* outentryInternalData;
entryInternalData** outentryInternalDataPtr;
entryInternalData* streamentryInternalData;
entryInternalData** streamentryInternalDataPtr;
expressionEntry* varexpressionEntry;
expressionEntry** varexpressionEntryPtr;
expressionEntry* outexpressionEntry;
expressionEntry** outexpressionEntryPtr;
expressionEntry* streamexpressionEntry;
expressionEntry** streamexpressionEntryPtr;
UIFunctionList* varUIFunctionList;
UIFunctionList** varUIFunctionListPtr;
UIFunctionList* outUIFunctionList;
UIFunctionList** outUIFunctionListPtr;
UIFunctionList* streamUIFunctionList;
UIFunctionList** streamUIFunctionListPtr;
StringList* varStringList;
StringList** varStringListPtr;
StringList* outStringList;
StringList** outStringListPtr;
StringList* streamStringList;
StringList** streamStringListPtr;
StaticDvar* varStaticDvar;
StaticDvar** varStaticDvarPtr;
StaticDvar* outStaticDvar;
StaticDvar** outStaticDvarPtr;
StaticDvar* streamStaticDvar;
StaticDvar** streamStaticDvarPtr;
StaticDvarList* varStaticDvarList;
StaticDvarList** varStaticDvarListPtr;
StaticDvarList* outStaticDvarList;
StaticDvarList** outStaticDvarListPtr;
StaticDvarList* streamStaticDvarList;
StaticDvarList** streamStaticDvarListPtr;
ConditionalScript* varConditionalScript;
ConditionalScript** varConditionalScriptPtr;
ConditionalScript* outConditionalScript;
ConditionalScript** outConditionalScriptPtr;
ConditionalScript* streamConditionalScript;
ConditionalScript** streamConditionalScriptPtr;
SetLocalVarData* varSetLocalVarData;
SetLocalVarData** varSetLocalVarDataPtr;
SetLocalVarData* outSetLocalVarData;
SetLocalVarData** outSetLocalVarDataPtr;
SetLocalVarData* streamSetLocalVarData;
SetLocalVarData** streamSetLocalVarDataPtr;
EventData* varEventData;
EventData** varEventDataPtr;
EventData* outEventData;
EventData** outEventDataPtr;
EventData* streamEventData;
EventData** streamEventDataPtr;
EventType* varEventType;
EventType** varEventTypePtr;
EventType* outEventType;
EventType** outEventTypePtr;
EventType* streamEventType;
EventType** streamEventTypePtr;
MenuEventHandler* varMenuEventHandler;
MenuEventHandler** varMenuEventHandlerPtr;
MenuEventHandler* outMenuEventHandler;
MenuEventHandler** outMenuEventHandlerPtr;
MenuEventHandler* streamMenuEventHandler;
MenuEventHandler** streamMenuEventHandlerPtr;
ItemKeyHandler* varItemKeyHandler;
ItemKeyHandler** varItemKeyHandlerPtr;
ItemKeyHandler* outItemKeyHandler;
ItemKeyHandler** outItemKeyHandlerPtr;
ItemKeyHandler* streamItemKeyHandler;
ItemKeyHandler** streamItemKeyHandlerPtr;
ItemFloatExpression* varItemFloatExpression;
ItemFloatExpression** varItemFloatExpressionPtr;
ItemFloatExpression* outItemFloatExpression;
ItemFloatExpression** outItemFloatExpressionPtr;
ItemFloatExpression* streamItemFloatExpression;
ItemFloatExpression** streamItemFloatExpressionPtr;
menuTransition* varmenuTransition;
menuTransition** varmenuTransitionPtr;
menuTransition* outmenuTransition;
menuTransition** outmenuTransitionPtr;
menuTransition* streammenuTransition;
menuTransition** streammenuTransitionPtr;
rectDef_s* varrectDef_s;
rectDef_s** varrectDef_sPtr;
rectDef_s* outrectDef_s;
rectDef_s** outrectDef_sPtr;
rectDef_s* streamrectDef_s;
rectDef_s** streamrectDef_sPtr;
windowDef_t* varwindowDef_t;
windowDef_t** varwindowDef_tPtr;
windowDef_t* outwindowDef_t;
windowDef_t** outwindowDef_tPtr;
windowDef_t* streamwindowDef_t;
windowDef_t** streamwindowDef_tPtr;
itemDef_s* varitemDef_s;
itemDef_s** varitemDef_sPtr;
itemDef_s* outitemDef_s;
itemDef_s** outitemDef_sPtr;
itemDef_s* streamitemDef_s;
itemDef_s** streamitemDef_sPtr;
MenuList* varMenuList;
MenuList** varMenuListPtr;
MenuList* outMenuList;
MenuList** outMenuListPtr;
MenuList* streamMenuList;
MenuList** streamMenuListPtr;
ComPrimaryLight* varComPrimaryLight;
ComPrimaryLight** varComPrimaryLightPtr;
ComPrimaryLight* outComPrimaryLight;
ComPrimaryLight** outComPrimaryLightPtr;
ComPrimaryLight* streamComPrimaryLight;
ComPrimaryLight** streamComPrimaryLightPtr;
ComWorld* varComWorld;
ComWorld** varComWorldPtr;
ComWorld* outComWorld;
ComWorld** outComWorldPtr;
ComWorld* streamComWorld;
ComWorld** streamComWorldPtr;
LocalizeEntry* varLocalizeEntry;
LocalizeEntry** varLocalizeEntryPtr;
LocalizeEntry* outLocalizeEntry;
LocalizeEntry** outLocalizeEntryPtr;
LocalizeEntry* streamLocalizeEntry;
LocalizeEntry** streamLocalizeEntryPtr;
G_GlassPiece* varG_GlassPiece;
G_GlassPiece** varG_GlassPiecePtr;
G_GlassPiece* outG_GlassPiece;
G_GlassPiece** outG_GlassPiecePtr;
G_GlassPiece* streamG_GlassPiece;
G_GlassPiece** streamG_GlassPiecePtr;
G_GlassName* varG_GlassName;
G_GlassName** varG_GlassNamePtr;
G_GlassName* outG_GlassName;
G_GlassName** outG_GlassNamePtr;
G_GlassName* streamG_GlassName;
G_GlassName** streamG_GlassNamePtr;
G_GlassData* varG_GlassData;
G_GlassData** varG_GlassDataPtr;
G_GlassData* outG_GlassData;
G_GlassData** outG_GlassDataPtr;
G_GlassData* streamG_GlassData;
G_GlassData** streamG_GlassDataPtr;
GameWorldMp* varGameWorldMp;
GameWorldMp** varGameWorldMpPtr;
GameWorldMp* outGameWorldMp;
GameWorldMp** outGameWorldMpPtr;
GameWorldMp* streamGameWorldMp;
GameWorldMp** streamGameWorldMpPtr;
FxGlassPieceState* varFxGlassPieceState;
FxGlassPieceState** varFxGlassPieceStatePtr;
FxGlassPieceState* outFxGlassPieceState;
FxGlassPieceState** outFxGlassPieceStatePtr;
FxGlassPieceState* streamFxGlassPieceState;
FxGlassPieceState** streamFxGlassPieceStatePtr;
FxGlassPieceDynamics* varFxGlassPieceDynamics;
FxGlassPieceDynamics** varFxGlassPieceDynamicsPtr;
FxGlassPieceDynamics* outFxGlassPieceDynamics;
FxGlassPieceDynamics** outFxGlassPieceDynamicsPtr;
FxGlassPieceDynamics* streamFxGlassPieceDynamics;
FxGlassPieceDynamics** streamFxGlassPieceDynamicsPtr;
FxGlassVertex* varFxGlassVertex;
FxGlassVertex** varFxGlassVertexPtr;
FxGlassVertex* outFxGlassVertex;
FxGlassVertex** outFxGlassVertexPtr;
FxGlassVertex* streamFxGlassVertex;
FxGlassVertex** streamFxGlassVertexPtr;
FxGlassHoleHeader* varFxGlassHoleHeader;
FxGlassHoleHeader** varFxGlassHoleHeaderPtr;
FxGlassHoleHeader* outFxGlassHoleHeader;
FxGlassHoleHeader** outFxGlassHoleHeaderPtr;
FxGlassHoleHeader* streamFxGlassHoleHeader;
FxGlassHoleHeader** streamFxGlassHoleHeaderPtr;
FxGlassCrackHeader* varFxGlassCrackHeader;
FxGlassCrackHeader** varFxGlassCrackHeaderPtr;
FxGlassCrackHeader* outFxGlassCrackHeader;
FxGlassCrackHeader** outFxGlassCrackHeaderPtr;
FxGlassCrackHeader* streamFxGlassCrackHeader;
FxGlassCrackHeader** streamFxGlassCrackHeaderPtr;
FxGlassGeometryData* varFxGlassGeometryData;
FxGlassGeometryData** varFxGlassGeometryDataPtr;
FxGlassGeometryData* outFxGlassGeometryData;
FxGlassGeometryData** outFxGlassGeometryDataPtr;
FxGlassGeometryData* streamFxGlassGeometryData;
FxGlassGeometryData** streamFxGlassGeometryDataPtr;
FxGlassDef* varFxGlassDef;
FxGlassDef** varFxGlassDefPtr;
FxGlassDef* outFxGlassDef;
FxGlassDef** outFxGlassDefPtr;
FxGlassDef* streamFxGlassDef;
FxGlassDef** streamFxGlassDefPtr;
FxSpatialFrame* varFxSpatialFrame;
FxSpatialFrame** varFxSpatialFramePtr;
FxSpatialFrame* outFxSpatialFrame;
FxSpatialFrame** outFxSpatialFramePtr;
FxSpatialFrame* streamFxSpatialFrame;
FxSpatialFrame** streamFxSpatialFramePtr;
$E43DBA5037697D705289B74D87E76C70* var$E43DBA5037697D705289B74D87E76C70;
$E43DBA5037697D705289B74D87E76C70** var$E43DBA5037697D705289B74D87E76C70Ptr;
$E43DBA5037697D705289B74D87E76C70* out$E43DBA5037697D705289B74D87E76C70;
$E43DBA5037697D705289B74D87E76C70** out$E43DBA5037697D705289B74D87E76C70Ptr;
$E43DBA5037697D705289B74D87E76C70* stream$E43DBA5037697D705289B74D87E76C70;
$E43DBA5037697D705289B74D87E76C70** stream$E43DBA5037697D705289B74D87E76C70Ptr;
FxGlassPiecePlace* varFxGlassPiecePlace;
FxGlassPiecePlace** varFxGlassPiecePlacePtr;
FxGlassPiecePlace* outFxGlassPiecePlace;
FxGlassPiecePlace** outFxGlassPiecePlacePtr;
FxGlassPiecePlace* streamFxGlassPiecePlace;
FxGlassPiecePlace** streamFxGlassPiecePlacePtr;
FxGlassInitPieceState* varFxGlassInitPieceState;
FxGlassInitPieceState** varFxGlassInitPieceStatePtr;
FxGlassInitPieceState* outFxGlassInitPieceState;
FxGlassInitPieceState** outFxGlassInitPieceStatePtr;
FxGlassInitPieceState* streamFxGlassInitPieceState;
FxGlassInitPieceState** streamFxGlassInitPieceStatePtr;
char16* varchar16;
char16** varchar16Ptr;
char16* outchar16;
char16** outchar16Ptr;
char16* streamchar16;
char16** streamchar16Ptr;
float16* varfloat16;
float16** varfloat16Ptr;
float16* outfloat16;
float16** outfloat16Ptr;
float16* streamfloat16;
float16** streamfloat16Ptr;
FxGlassSystem* varFxGlassSystem;
FxGlassSystem** varFxGlassSystemPtr;
FxGlassSystem* outFxGlassSystem;
FxGlassSystem** outFxGlassSystemPtr;
FxGlassSystem* streamFxGlassSystem;
FxGlassSystem** streamFxGlassSystemPtr;
FxWorld* varFxWorld;
FxWorld** varFxWorldPtr;
FxWorld* outFxWorld;
FxWorld** outFxWorldPtr;
FxWorld* streamFxWorld;
FxWorld** streamFxWorldPtr;
GfxLightImage* varGfxLightImage;
GfxLightImage** varGfxLightImagePtr;
GfxLightImage* outGfxLightImage;
GfxLightImage** outGfxLightImagePtr;
GfxLightImage* streamGfxLightImage;
GfxLightImage** streamGfxLightImagePtr;
GfxLightDef* varGfxLightDef;
GfxLightDef** varGfxLightDefPtr;
GfxLightDef* outGfxLightDef;
GfxLightDef** outGfxLightDefPtr;
GfxLightDef* streamGfxLightDef;
GfxLightDef** streamGfxLightDefPtr;
Glyph* varGlyph;
Glyph** varGlyphPtr;
Glyph* outGlyph;
Glyph** outGlyphPtr;
Glyph* streamGlyph;
Glyph** streamGlyphPtr;
Font_s* varFont_s;
Font_s** varFont_sPtr;
Font_s* outFont_s;
Font_s** outFont_sPtr;
Font_s* streamFont_s;
Font_s** streamFont_sPtr;
LbColType* varLbColType;
LbColType** varLbColTypePtr;
LbColType* outLbColType;
LbColType** outLbColTypePtr;
LbColType* streamLbColType;
LbColType** streamLbColTypePtr;
LbAggType* varLbAggType;
LbAggType** varLbAggTypePtr;
LbAggType* outLbAggType;
LbAggType** outLbAggTypePtr;
LbAggType* streamLbAggType;
LbAggType** streamLbAggTypePtr;
LbColumnDef* varLbColumnDef;
LbColumnDef** varLbColumnDefPtr;
LbColumnDef* outLbColumnDef;
LbColumnDef** outLbColumnDefPtr;
LbColumnDef* streamLbColumnDef;
LbColumnDef** streamLbColumnDefPtr;
LeaderboardDef* varLeaderboardDef;
LeaderboardDef** varLeaderboardDefPtr;
LeaderboardDef* outLeaderboardDef;
LeaderboardDef** outLeaderboardDefPtr;
LeaderboardDef* streamLeaderboardDef;
LeaderboardDef** streamLeaderboardDefPtr;
StructuredDataEnumEntry* varStructuredDataEnumEntry;
StructuredDataEnumEntry** varStructuredDataEnumEntryPtr;
StructuredDataEnumEntry* outStructuredDataEnumEntry;
StructuredDataEnumEntry** outStructuredDataEnumEntryPtr;
StructuredDataEnumEntry* streamStructuredDataEnumEntry;
StructuredDataEnumEntry** streamStructuredDataEnumEntryPtr;
StructuredDataEnum* varStructuredDataEnum;
StructuredDataEnum** varStructuredDataEnumPtr;
StructuredDataEnum* outStructuredDataEnum;
StructuredDataEnum** outStructuredDataEnumPtr;
StructuredDataEnum* streamStructuredDataEnum;
StructuredDataEnum** streamStructuredDataEnumPtr;
StructuredDataTypeUnion* varStructuredDataTypeUnion;
StructuredDataTypeUnion** varStructuredDataTypeUnionPtr;
StructuredDataTypeUnion* outStructuredDataTypeUnion;
StructuredDataTypeUnion** outStructuredDataTypeUnionPtr;
StructuredDataTypeUnion* streamStructuredDataTypeUnion;
StructuredDataTypeUnion** streamStructuredDataTypeUnionPtr;
StructuredDataTypeCategory* varStructuredDataTypeCategory;
StructuredDataTypeCategory** varStructuredDataTypeCategoryPtr;
StructuredDataTypeCategory* outStructuredDataTypeCategory;
StructuredDataTypeCategory** outStructuredDataTypeCategoryPtr;
StructuredDataTypeCategory* streamStructuredDataTypeCategory;
StructuredDataTypeCategory** streamStructuredDataTypeCategoryPtr;
StructuredDataType* varStructuredDataType;
StructuredDataType** varStructuredDataTypePtr;
StructuredDataType* outStructuredDataType;
StructuredDataType** outStructuredDataTypePtr;
StructuredDataType* streamStructuredDataType;
StructuredDataType** streamStructuredDataTypePtr;
StructuredDataStructProperty* varStructuredDataStructProperty;
StructuredDataStructProperty** varStructuredDataStructPropertyPtr;
StructuredDataStructProperty* outStructuredDataStructProperty;
StructuredDataStructProperty** outStructuredDataStructPropertyPtr;
StructuredDataStructProperty* streamStructuredDataStructProperty;
StructuredDataStructProperty** streamStructuredDataStructPropertyPtr;
StructuredDataStruct* varStructuredDataStruct;
StructuredDataStruct** varStructuredDataStructPtr;
StructuredDataStruct* outStructuredDataStruct;
StructuredDataStruct** outStructuredDataStructPtr;
StructuredDataStruct* streamStructuredDataStruct;
StructuredDataStruct** streamStructuredDataStructPtr;
StructuredDataIndexedArray* varStructuredDataIndexedArray;
StructuredDataIndexedArray** varStructuredDataIndexedArrayPtr;
StructuredDataIndexedArray* outStructuredDataIndexedArray;
StructuredDataIndexedArray** outStructuredDataIndexedArrayPtr;
StructuredDataIndexedArray* streamStructuredDataIndexedArray;
StructuredDataIndexedArray** streamStructuredDataIndexedArrayPtr;
StructuredDataEnumedArray* varStructuredDataEnumedArray;
StructuredDataEnumedArray** varStructuredDataEnumedArrayPtr;
StructuredDataEnumedArray* outStructuredDataEnumedArray;
StructuredDataEnumedArray** outStructuredDataEnumedArrayPtr;
StructuredDataEnumedArray* streamStructuredDataEnumedArray;
StructuredDataEnumedArray** streamStructuredDataEnumedArrayPtr;
StructuredDataDef* varStructuredDataDef;
StructuredDataDef** varStructuredDataDefPtr;
StructuredDataDef* outStructuredDataDef;
StructuredDataDef** outStructuredDataDefPtr;
StructuredDataDef* streamStructuredDataDef;
StructuredDataDef** streamStructuredDataDefPtr;
StructuredDataDefSet* varStructuredDataDefSet;
StructuredDataDefSet** varStructuredDataDefSetPtr;
StructuredDataDefSet* outStructuredDataDefSet;
StructuredDataDefSet** outStructuredDataDefSetPtr;
StructuredDataDefSet* streamStructuredDataDefSet;
StructuredDataDefSet** streamStructuredDataDefSetPtr;
XAssetType* varXAssetType;
XAssetType** varXAssetTypePtr;
XAssetType* outXAssetType;
XAssetType** outXAssetTypePtr;
XAssetType* streamXAssetType;
XAssetType** streamXAssetTypePtr;
ScriptStringList* varScriptStringList;
ScriptStringList** varScriptStringListPtr;
ScriptStringList* outScriptStringList;
ScriptStringList** outScriptStringListPtr;
ScriptStringList* streamScriptStringList;
ScriptStringList** streamScriptStringListPtr;
XAsset* varXAsset;
XAsset** varXAssetPtr;
XAsset* outXAsset;
XAsset** outXAssetPtr;
XAsset* streamXAsset;
XAsset** streamXAssetPtr;
XAssetList* varXAssetList;
XAssetList** varXAssetListPtr;
XAssetList* outXAssetList;
XAssetList** outXAssetListPtr;
XAssetList* streamXAssetList;
XAssetList** streamXAssetListPtr;
XAssetHeader* varXAssetHeader;
XAssetHeader** varXAssetHeaderPtr;
XAssetHeader* outXAssetHeader;
XAssetHeader** outXAssetHeaderPtr;
XAssetHeader* streamXAssetHeader;
XAssetHeader** streamXAssetHeaderPtr;

$C8D87EB0090687D323381DFB7A82089C* AllocLoad_$C8D87EB0090687D323381DFB7A82089C()
{
	return ($C8D87EB0090687D323381DFB7A82089C*)DB_AllocStreamPos(3);
}

$C8D87EB0090687D323381DFB7A82089C* AllocSave_$C8D87EB0090687D323381DFB7A82089C()
{
	return ($C8D87EB0090687D323381DFB7A82089C*)DB_AllocStreamPos(3);
}

$C8D87EB0090687D323381DFB7A82089C** AllocLoad_$C8D87EB0090687D323381DFB7A82089CPtr()
{
	return ($C8D87EB0090687D323381DFB7A82089C**)DB_AllocStreamPos(3);
}

$C8D87EB0090687D323381DFB7A82089C** AllocSave_$C8D87EB0090687D323381DFB7A82089CPtr()
{
	return ($C8D87EB0090687D323381DFB7A82089C**)DB_AllocStreamPos(3);
}

$E43DBA5037697D705289B74D87E76C70* AllocLoad_$E43DBA5037697D705289B74D87E76C70()
{
	return ($E43DBA5037697D705289B74D87E76C70*)DB_AllocStreamPos(3);
}

$E43DBA5037697D705289B74D87E76C70* AllocSave_$E43DBA5037697D705289B74D87E76C70()
{
	return ($E43DBA5037697D705289B74D87E76C70*)DB_AllocStreamPos(3);
}

$E43DBA5037697D705289B74D87E76C70** AllocLoad_$E43DBA5037697D705289B74D87E76C70Ptr()
{
	return ($E43DBA5037697D705289B74D87E76C70**)DB_AllocStreamPos(3);
}

$E43DBA5037697D705289B74D87E76C70** AllocSave_$E43DBA5037697D705289B74D87E76C70Ptr()
{
	return ($E43DBA5037697D705289B74D87E76C70**)DB_AllocStreamPos(3);
}

Bounds* AllocLoad_Bounds()
{
	return (Bounds*)DB_AllocStreamPos(3);
}

Bounds* AllocSave_Bounds()
{
	return (Bounds*)DB_AllocStreamPos(3);
}

Bounds** AllocLoad_BoundsPtr()
{
	return (Bounds**)DB_AllocStreamPos(3);
}

Bounds** AllocSave_BoundsPtr()
{
	return (Bounds**)DB_AllocStreamPos(3);
}

BrushWrapper* AllocLoad_BrushWrapper()
{
	return (BrushWrapper*)DB_AllocStreamPos(3);
}

BrushWrapper* AllocSave_BrushWrapper()
{
	return (BrushWrapper*)DB_AllocStreamPos(3);
}

BrushWrapper** AllocLoad_BrushWrapperPtr()
{
	return (BrushWrapper**)DB_AllocStreamPos(3);
}

BrushWrapper** AllocSave_BrushWrapperPtr()
{
	return (BrushWrapper**)DB_AllocStreamPos(3);
}

CardMemory* AllocLoad_CardMemory()
{
	return (CardMemory*)DB_AllocStreamPos(3);
}

CardMemory* AllocSave_CardMemory()
{
	return (CardMemory*)DB_AllocStreamPos(3);
}

CardMemory** AllocLoad_CardMemoryPtr()
{
	return (CardMemory**)DB_AllocStreamPos(3);
}

CardMemory** AllocSave_CardMemoryPtr()
{
	return (CardMemory**)DB_AllocStreamPos(3);
}

ClipMaterial* AllocLoad_ClipMaterial()
{
	return (ClipMaterial*)DB_AllocStreamPos(3);
}

ClipMaterial* AllocSave_ClipMaterial()
{
	return (ClipMaterial*)DB_AllocStreamPos(3);
}

ClipMaterial** AllocLoad_ClipMaterialPtr()
{
	return (ClipMaterial**)DB_AllocStreamPos(3);
}

ClipMaterial** AllocSave_ClipMaterialPtr()
{
	return (ClipMaterial**)DB_AllocStreamPos(3);
}

CollisionAabbTree* AllocLoad_CollisionAabbTree()
{
	return (CollisionAabbTree*)DB_AllocStreamPos(15);
}

CollisionAabbTree* AllocSave_CollisionAabbTree()
{
	return (CollisionAabbTree*)DB_AllocStreamPos(15);
}

CollisionAabbTree** AllocLoad_CollisionAabbTreePtr()
{
	return (CollisionAabbTree**)DB_AllocStreamPos(15);
}

CollisionAabbTree** AllocSave_CollisionAabbTreePtr()
{
	return (CollisionAabbTree**)DB_AllocStreamPos(15);
}

CollisionAabbTreeIndex* AllocLoad_CollisionAabbTreeIndex()
{
	return (CollisionAabbTreeIndex*)DB_AllocStreamPos(3);
}

CollisionAabbTreeIndex* AllocSave_CollisionAabbTreeIndex()
{
	return (CollisionAabbTreeIndex*)DB_AllocStreamPos(3);
}

CollisionAabbTreeIndex** AllocLoad_CollisionAabbTreeIndexPtr()
{
	return (CollisionAabbTreeIndex**)DB_AllocStreamPos(3);
}

CollisionAabbTreeIndex** AllocSave_CollisionAabbTreeIndexPtr()
{
	return (CollisionAabbTreeIndex**)DB_AllocStreamPos(3);
}

CollisionBorder* AllocLoad_CollisionBorder()
{
	return (CollisionBorder*)DB_AllocStreamPos(3);
}

CollisionBorder* AllocSave_CollisionBorder()
{
	return (CollisionBorder*)DB_AllocStreamPos(3);
}

CollisionBorder** AllocLoad_CollisionBorderPtr()
{
	return (CollisionBorder**)DB_AllocStreamPos(3);
}

CollisionBorder** AllocSave_CollisionBorderPtr()
{
	return (CollisionBorder**)DB_AllocStreamPos(3);
}

CollisionPartition* AllocLoad_CollisionPartition()
{
	return (CollisionPartition*)DB_AllocStreamPos(3);
}

CollisionPartition* AllocSave_CollisionPartition()
{
	return (CollisionPartition*)DB_AllocStreamPos(3);
}

CollisionPartition** AllocLoad_CollisionPartitionPtr()
{
	return (CollisionPartition**)DB_AllocStreamPos(3);
}

CollisionPartition** AllocSave_CollisionPartitionPtr()
{
	return (CollisionPartition**)DB_AllocStreamPos(3);
}

ComPrimaryLight* AllocLoad_ComPrimaryLight()
{
	return (ComPrimaryLight*)DB_AllocStreamPos(3);
}

ComPrimaryLight* AllocSave_ComPrimaryLight()
{
	return (ComPrimaryLight*)DB_AllocStreamPos(3);
}

ComPrimaryLight** AllocLoad_ComPrimaryLightPtr()
{
	return (ComPrimaryLight**)DB_AllocStreamPos(3);
}

ComPrimaryLight** AllocSave_ComPrimaryLightPtr()
{
	return (ComPrimaryLight**)DB_AllocStreamPos(3);
}

ComWorld* AllocLoad_ComWorld()
{
	return (ComWorld*)DB_AllocStreamPos(3);
}

ComWorld* AllocSave_ComWorld()
{
	return (ComWorld*)DB_AllocStreamPos(3);
}

ComWorld** AllocLoad_ComWorldPtr()
{
	return (ComWorld**)DB_AllocStreamPos(3);
}

ComWorld** AllocSave_ComWorldPtr()
{
	return (ComWorld**)DB_AllocStreamPos(3);
}

ConditionalScript* AllocLoad_ConditionalScript()
{
	return (ConditionalScript*)DB_AllocStreamPos(3);
}

ConditionalScript* AllocSave_ConditionalScript()
{
	return (ConditionalScript*)DB_AllocStreamPos(3);
}

ConditionalScript** AllocLoad_ConditionalScriptPtr()
{
	return (ConditionalScript**)DB_AllocStreamPos(3);
}

ConditionalScript** AllocSave_ConditionalScriptPtr()
{
	return (ConditionalScript**)DB_AllocStreamPos(3);
}

DObjAnimMat* AllocLoad_DObjAnimMat()
{
	return (DObjAnimMat*)DB_AllocStreamPos(3);
}

DObjAnimMat* AllocSave_DObjAnimMat()
{
	return (DObjAnimMat*)DB_AllocStreamPos(3);
}

DObjAnimMat** AllocLoad_DObjAnimMatPtr()
{
	return (DObjAnimMat**)DB_AllocStreamPos(3);
}

DObjAnimMat** AllocSave_DObjAnimMatPtr()
{
	return (DObjAnimMat**)DB_AllocStreamPos(3);
}

DynEntityClient* AllocLoad_DynEntityClient()
{
	return (DynEntityClient*)DB_AllocStreamPos(3);
}

DynEntityClient* AllocSave_DynEntityClient()
{
	return (DynEntityClient*)DB_AllocStreamPos(3);
}

DynEntityClient** AllocLoad_DynEntityClientPtr()
{
	return (DynEntityClient**)DB_AllocStreamPos(3);
}

DynEntityClient** AllocSave_DynEntityClientPtr()
{
	return (DynEntityClient**)DB_AllocStreamPos(3);
}

DynEntityColl* AllocLoad_DynEntityColl()
{
	return (DynEntityColl*)DB_AllocStreamPos(3);
}

DynEntityColl* AllocSave_DynEntityColl()
{
	return (DynEntityColl*)DB_AllocStreamPos(3);
}

DynEntityColl** AllocLoad_DynEntityCollPtr()
{
	return (DynEntityColl**)DB_AllocStreamPos(3);
}

DynEntityColl** AllocSave_DynEntityCollPtr()
{
	return (DynEntityColl**)DB_AllocStreamPos(3);
}

DynEntityDef* AllocLoad_DynEntityDef()
{
	return (DynEntityDef*)DB_AllocStreamPos(3);
}

DynEntityDef* AllocSave_DynEntityDef()
{
	return (DynEntityDef*)DB_AllocStreamPos(3);
}

DynEntityDef** AllocLoad_DynEntityDefPtr()
{
	return (DynEntityDef**)DB_AllocStreamPos(3);
}

DynEntityDef** AllocSave_DynEntityDefPtr()
{
	return (DynEntityDef**)DB_AllocStreamPos(3);
}

DynEntityPose* AllocLoad_DynEntityPose()
{
	return (DynEntityPose*)DB_AllocStreamPos(3);
}

DynEntityPose* AllocSave_DynEntityPose()
{
	return (DynEntityPose*)DB_AllocStreamPos(3);
}

DynEntityPose** AllocLoad_DynEntityPosePtr()
{
	return (DynEntityPose**)DB_AllocStreamPos(3);
}

DynEntityPose** AllocSave_DynEntityPosePtr()
{
	return (DynEntityPose**)DB_AllocStreamPos(3);
}

EventData* AllocLoad_EventData()
{
	return (EventData*)DB_AllocStreamPos(3);
}

EventData* AllocSave_EventData()
{
	return (EventData*)DB_AllocStreamPos(3);
}

EventData** AllocLoad_EventDataPtr()
{
	return (EventData**)DB_AllocStreamPos(3);
}

EventData** AllocSave_EventDataPtr()
{
	return (EventData**)DB_AllocStreamPos(3);
}

ExpressionString* AllocLoad_ExpressionString()
{
	return (ExpressionString*)DB_AllocStreamPos(3);
}

ExpressionString* AllocSave_ExpressionString()
{
	return (ExpressionString*)DB_AllocStreamPos(3);
}

ExpressionString** AllocLoad_ExpressionStringPtr()
{
	return (ExpressionString**)DB_AllocStreamPos(3);
}

ExpressionString** AllocSave_ExpressionStringPtr()
{
	return (ExpressionString**)DB_AllocStreamPos(3);
}

ExpressionSupportingData* AllocLoad_ExpressionSupportingData()
{
	return (ExpressionSupportingData*)DB_AllocStreamPos(3);
}

ExpressionSupportingData* AllocSave_ExpressionSupportingData()
{
	return (ExpressionSupportingData*)DB_AllocStreamPos(3);
}

ExpressionSupportingData** AllocLoad_ExpressionSupportingDataPtr()
{
	return (ExpressionSupportingData**)DB_AllocStreamPos(3);
}

ExpressionSupportingData** AllocSave_ExpressionSupportingDataPtr()
{
	return (ExpressionSupportingData**)DB_AllocStreamPos(3);
}

Font_s* AllocLoad_Font_s()
{
	return (Font_s*)DB_AllocStreamPos(3);
}

Font_s* AllocSave_Font_s()
{
	return (Font_s*)DB_AllocStreamPos(3);
}

Font_s** AllocLoad_Font_sPtr()
{
	return (Font_s**)DB_AllocStreamPos(3);
}

Font_s** AllocSave_Font_sPtr()
{
	return (Font_s**)DB_AllocStreamPos(3);
}

FxEffectDef* AllocLoad_FxEffectDef()
{
	return (FxEffectDef*)DB_AllocStreamPos(3);
}

FxEffectDef* AllocSave_FxEffectDef()
{
	return (FxEffectDef*)DB_AllocStreamPos(3);
}

FxEffectDef** AllocLoad_FxEffectDefPtr()
{
	return (FxEffectDef**)DB_AllocStreamPos(3);
}

FxEffectDef** AllocSave_FxEffectDefPtr()
{
	return (FxEffectDef**)DB_AllocStreamPos(3);
}

FxEffectDefRef* AllocLoad_FxEffectDefRef()
{
	return (FxEffectDefRef*)DB_AllocStreamPos(3);
}

FxEffectDefRef* AllocSave_FxEffectDefRef()
{
	return (FxEffectDefRef*)DB_AllocStreamPos(3);
}

FxEffectDefRef** AllocLoad_FxEffectDefRefPtr()
{
	return (FxEffectDefRef**)DB_AllocStreamPos(3);
}

FxEffectDefRef** AllocSave_FxEffectDefRefPtr()
{
	return (FxEffectDefRef**)DB_AllocStreamPos(3);
}

FxElemAtlas* AllocLoad_FxElemAtlas()
{
	return (FxElemAtlas*)DB_AllocStreamPos(3);
}

FxElemAtlas* AllocSave_FxElemAtlas()
{
	return (FxElemAtlas*)DB_AllocStreamPos(3);
}

FxElemAtlas** AllocLoad_FxElemAtlasPtr()
{
	return (FxElemAtlas**)DB_AllocStreamPos(3);
}

FxElemAtlas** AllocSave_FxElemAtlasPtr()
{
	return (FxElemAtlas**)DB_AllocStreamPos(3);
}

FxElemDef* AllocLoad_FxElemDef()
{
	return (FxElemDef*)DB_AllocStreamPos(3);
}

FxElemDef* AllocSave_FxElemDef()
{
	return (FxElemDef*)DB_AllocStreamPos(3);
}

FxElemDef** AllocLoad_FxElemDefPtr()
{
	return (FxElemDef**)DB_AllocStreamPos(3);
}

FxElemDef** AllocSave_FxElemDefPtr()
{
	return (FxElemDef**)DB_AllocStreamPos(3);
}

FxElemDefVisuals* AllocLoad_FxElemDefVisuals()
{
	return (FxElemDefVisuals*)DB_AllocStreamPos(3);
}

FxElemDefVisuals* AllocSave_FxElemDefVisuals()
{
	return (FxElemDefVisuals*)DB_AllocStreamPos(3);
}

FxElemDefVisuals** AllocLoad_FxElemDefVisualsPtr()
{
	return (FxElemDefVisuals**)DB_AllocStreamPos(3);
}

FxElemDefVisuals** AllocSave_FxElemDefVisualsPtr()
{
	return (FxElemDefVisuals**)DB_AllocStreamPos(3);
}

FxElemExtendedDefPtr* AllocLoad_FxElemExtendedDefPtr()
{
	return (FxElemExtendedDefPtr*)DB_AllocStreamPos(3);
}

FxElemExtendedDefPtr* AllocSave_FxElemExtendedDefPtr()
{
	return (FxElemExtendedDefPtr*)DB_AllocStreamPos(3);
}

FxElemExtendedDefPtr** AllocLoad_FxElemExtendedDefPtrPtr()
{
	return (FxElemExtendedDefPtr**)DB_AllocStreamPos(3);
}

FxElemExtendedDefPtr** AllocSave_FxElemExtendedDefPtrPtr()
{
	return (FxElemExtendedDefPtr**)DB_AllocStreamPos(3);
}

FxElemMarkVisuals* AllocLoad_FxElemMarkVisuals()
{
	return (FxElemMarkVisuals*)DB_AllocStreamPos(3);
}

FxElemMarkVisuals* AllocSave_FxElemMarkVisuals()
{
	return (FxElemMarkVisuals*)DB_AllocStreamPos(3);
}

FxElemMarkVisuals** AllocLoad_FxElemMarkVisualsPtr()
{
	return (FxElemMarkVisuals**)DB_AllocStreamPos(3);
}

FxElemMarkVisuals** AllocSave_FxElemMarkVisualsPtr()
{
	return (FxElemMarkVisuals**)DB_AllocStreamPos(3);
}

FxElemVec3Range* AllocLoad_FxElemVec3Range()
{
	return (FxElemVec3Range*)DB_AllocStreamPos(3);
}

FxElemVec3Range* AllocSave_FxElemVec3Range()
{
	return (FxElemVec3Range*)DB_AllocStreamPos(3);
}

FxElemVec3Range** AllocLoad_FxElemVec3RangePtr()
{
	return (FxElemVec3Range**)DB_AllocStreamPos(3);
}

FxElemVec3Range** AllocSave_FxElemVec3RangePtr()
{
	return (FxElemVec3Range**)DB_AllocStreamPos(3);
}

FxElemVelStateInFrame* AllocLoad_FxElemVelStateInFrame()
{
	return (FxElemVelStateInFrame*)DB_AllocStreamPos(3);
}

FxElemVelStateInFrame* AllocSave_FxElemVelStateInFrame()
{
	return (FxElemVelStateInFrame*)DB_AllocStreamPos(3);
}

FxElemVelStateInFrame** AllocLoad_FxElemVelStateInFramePtr()
{
	return (FxElemVelStateInFrame**)DB_AllocStreamPos(3);
}

FxElemVelStateInFrame** AllocSave_FxElemVelStateInFramePtr()
{
	return (FxElemVelStateInFrame**)DB_AllocStreamPos(3);
}

FxElemVelStateSample* AllocLoad_FxElemVelStateSample()
{
	return (FxElemVelStateSample*)DB_AllocStreamPos(3);
}

FxElemVelStateSample* AllocSave_FxElemVelStateSample()
{
	return (FxElemVelStateSample*)DB_AllocStreamPos(3);
}

FxElemVelStateSample** AllocLoad_FxElemVelStateSamplePtr()
{
	return (FxElemVelStateSample**)DB_AllocStreamPos(3);
}

FxElemVelStateSample** AllocSave_FxElemVelStateSamplePtr()
{
	return (FxElemVelStateSample**)DB_AllocStreamPos(3);
}

FxElemVisStateSample* AllocLoad_FxElemVisStateSample()
{
	return (FxElemVisStateSample*)DB_AllocStreamPos(3);
}

FxElemVisStateSample* AllocSave_FxElemVisStateSample()
{
	return (FxElemVisStateSample*)DB_AllocStreamPos(3);
}

FxElemVisStateSample** AllocLoad_FxElemVisStateSamplePtr()
{
	return (FxElemVisStateSample**)DB_AllocStreamPos(3);
}

FxElemVisStateSample** AllocSave_FxElemVisStateSamplePtr()
{
	return (FxElemVisStateSample**)DB_AllocStreamPos(3);
}

FxElemVisualState* AllocLoad_FxElemVisualState()
{
	return (FxElemVisualState*)DB_AllocStreamPos(3);
}

FxElemVisualState* AllocSave_FxElemVisualState()
{
	return (FxElemVisualState*)DB_AllocStreamPos(3);
}

FxElemVisualState** AllocLoad_FxElemVisualStatePtr()
{
	return (FxElemVisualState**)DB_AllocStreamPos(3);
}

FxElemVisualState** AllocSave_FxElemVisualStatePtr()
{
	return (FxElemVisualState**)DB_AllocStreamPos(3);
}

FxElemVisuals* AllocLoad_FxElemVisuals()
{
	return (FxElemVisuals*)DB_AllocStreamPos(3);
}

FxElemVisuals* AllocSave_FxElemVisuals()
{
	return (FxElemVisuals*)DB_AllocStreamPos(3);
}

FxElemVisuals** AllocLoad_FxElemVisualsPtr()
{
	return (FxElemVisuals**)DB_AllocStreamPos(3);
}

FxElemVisuals** AllocSave_FxElemVisualsPtr()
{
	return (FxElemVisuals**)DB_AllocStreamPos(3);
}

FxFloatRange* AllocLoad_FxFloatRange()
{
	return (FxFloatRange*)DB_AllocStreamPos(3);
}

FxFloatRange* AllocSave_FxFloatRange()
{
	return (FxFloatRange*)DB_AllocStreamPos(3);
}

FxFloatRange** AllocLoad_FxFloatRangePtr()
{
	return (FxFloatRange**)DB_AllocStreamPos(3);
}

FxFloatRange** AllocSave_FxFloatRangePtr()
{
	return (FxFloatRange**)DB_AllocStreamPos(3);
}

FxGlassCrackHeader* AllocLoad_FxGlassCrackHeader()
{
	return (FxGlassCrackHeader*)DB_AllocStreamPos(3);
}

FxGlassCrackHeader* AllocSave_FxGlassCrackHeader()
{
	return (FxGlassCrackHeader*)DB_AllocStreamPos(3);
}

FxGlassCrackHeader** AllocLoad_FxGlassCrackHeaderPtr()
{
	return (FxGlassCrackHeader**)DB_AllocStreamPos(3);
}

FxGlassCrackHeader** AllocSave_FxGlassCrackHeaderPtr()
{
	return (FxGlassCrackHeader**)DB_AllocStreamPos(3);
}

FxGlassDef* AllocLoad_FxGlassDef()
{
	return (FxGlassDef*)DB_AllocStreamPos(3);
}

FxGlassDef* AllocSave_FxGlassDef()
{
	return (FxGlassDef*)DB_AllocStreamPos(3);
}

FxGlassDef** AllocLoad_FxGlassDefPtr()
{
	return (FxGlassDef**)DB_AllocStreamPos(3);
}

FxGlassDef** AllocSave_FxGlassDefPtr()
{
	return (FxGlassDef**)DB_AllocStreamPos(3);
}

FxGlassGeometryData* AllocLoad_FxGlassGeometryData()
{
	return (FxGlassGeometryData*)DB_AllocStreamPos(3);
}

FxGlassGeometryData* AllocSave_FxGlassGeometryData()
{
	return (FxGlassGeometryData*)DB_AllocStreamPos(3);
}

FxGlassGeometryData** AllocLoad_FxGlassGeometryDataPtr()
{
	return (FxGlassGeometryData**)DB_AllocStreamPos(3);
}

FxGlassGeometryData** AllocSave_FxGlassGeometryDataPtr()
{
	return (FxGlassGeometryData**)DB_AllocStreamPos(3);
}

FxGlassHoleHeader* AllocLoad_FxGlassHoleHeader()
{
	return (FxGlassHoleHeader*)DB_AllocStreamPos(3);
}

FxGlassHoleHeader* AllocSave_FxGlassHoleHeader()
{
	return (FxGlassHoleHeader*)DB_AllocStreamPos(3);
}

FxGlassHoleHeader** AllocLoad_FxGlassHoleHeaderPtr()
{
	return (FxGlassHoleHeader**)DB_AllocStreamPos(3);
}

FxGlassHoleHeader** AllocSave_FxGlassHoleHeaderPtr()
{
	return (FxGlassHoleHeader**)DB_AllocStreamPos(3);
}

FxGlassInitPieceState* AllocLoad_FxGlassInitPieceState()
{
	return (FxGlassInitPieceState*)DB_AllocStreamPos(3);
}

FxGlassInitPieceState* AllocSave_FxGlassInitPieceState()
{
	return (FxGlassInitPieceState*)DB_AllocStreamPos(3);
}

FxGlassInitPieceState** AllocLoad_FxGlassInitPieceStatePtr()
{
	return (FxGlassInitPieceState**)DB_AllocStreamPos(3);
}

FxGlassInitPieceState** AllocSave_FxGlassInitPieceStatePtr()
{
	return (FxGlassInitPieceState**)DB_AllocStreamPos(3);
}

FxGlassPieceDynamics* AllocLoad_FxGlassPieceDynamics()
{
	return (FxGlassPieceDynamics*)DB_AllocStreamPos(3);
}

FxGlassPieceDynamics* AllocSave_FxGlassPieceDynamics()
{
	return (FxGlassPieceDynamics*)DB_AllocStreamPos(3);
}

FxGlassPieceDynamics** AllocLoad_FxGlassPieceDynamicsPtr()
{
	return (FxGlassPieceDynamics**)DB_AllocStreamPos(3);
}

FxGlassPieceDynamics** AllocSave_FxGlassPieceDynamicsPtr()
{
	return (FxGlassPieceDynamics**)DB_AllocStreamPos(3);
}

FxGlassPiecePlace* AllocLoad_FxGlassPiecePlace()
{
	return (FxGlassPiecePlace*)DB_AllocStreamPos(3);
}

FxGlassPiecePlace* AllocSave_FxGlassPiecePlace()
{
	return (FxGlassPiecePlace*)DB_AllocStreamPos(3);
}

FxGlassPiecePlace** AllocLoad_FxGlassPiecePlacePtr()
{
	return (FxGlassPiecePlace**)DB_AllocStreamPos(3);
}

FxGlassPiecePlace** AllocSave_FxGlassPiecePlacePtr()
{
	return (FxGlassPiecePlace**)DB_AllocStreamPos(3);
}

FxGlassPieceState* AllocLoad_FxGlassPieceState()
{
	return (FxGlassPieceState*)DB_AllocStreamPos(3);
}

FxGlassPieceState* AllocSave_FxGlassPieceState()
{
	return (FxGlassPieceState*)DB_AllocStreamPos(3);
}

FxGlassPieceState** AllocLoad_FxGlassPieceStatePtr()
{
	return (FxGlassPieceState**)DB_AllocStreamPos(3);
}

FxGlassPieceState** AllocSave_FxGlassPieceStatePtr()
{
	return (FxGlassPieceState**)DB_AllocStreamPos(3);
}

FxGlassSystem* AllocLoad_FxGlassSystem()
{
	return (FxGlassSystem*)DB_AllocStreamPos(3);
}

FxGlassSystem* AllocSave_FxGlassSystem()
{
	return (FxGlassSystem*)DB_AllocStreamPos(3);
}

FxGlassSystem** AllocLoad_FxGlassSystemPtr()
{
	return (FxGlassSystem**)DB_AllocStreamPos(3);
}

FxGlassSystem** AllocSave_FxGlassSystemPtr()
{
	return (FxGlassSystem**)DB_AllocStreamPos(3);
}

FxGlassVertex* AllocLoad_FxGlassVertex()
{
	return (FxGlassVertex*)DB_AllocStreamPos(3);
}

FxGlassVertex* AllocSave_FxGlassVertex()
{
	return (FxGlassVertex*)DB_AllocStreamPos(3);
}

FxGlassVertex** AllocLoad_FxGlassVertexPtr()
{
	return (FxGlassVertex**)DB_AllocStreamPos(3);
}

FxGlassVertex** AllocSave_FxGlassVertexPtr()
{
	return (FxGlassVertex**)DB_AllocStreamPos(3);
}

FxIntRange* AllocLoad_FxIntRange()
{
	return (FxIntRange*)DB_AllocStreamPos(3);
}

FxIntRange* AllocSave_FxIntRange()
{
	return (FxIntRange*)DB_AllocStreamPos(3);
}

FxIntRange** AllocLoad_FxIntRangePtr()
{
	return (FxIntRange**)DB_AllocStreamPos(3);
}

FxIntRange** AllocSave_FxIntRangePtr()
{
	return (FxIntRange**)DB_AllocStreamPos(3);
}

FxSparkFountainDef* AllocLoad_FxSparkFountainDef()
{
	return (FxSparkFountainDef*)DB_AllocStreamPos(3);
}

FxSparkFountainDef* AllocSave_FxSparkFountainDef()
{
	return (FxSparkFountainDef*)DB_AllocStreamPos(3);
}

FxSparkFountainDef** AllocLoad_FxSparkFountainDefPtr()
{
	return (FxSparkFountainDef**)DB_AllocStreamPos(3);
}

FxSparkFountainDef** AllocSave_FxSparkFountainDefPtr()
{
	return (FxSparkFountainDef**)DB_AllocStreamPos(3);
}

FxSpatialFrame* AllocLoad_FxSpatialFrame()
{
	return (FxSpatialFrame*)DB_AllocStreamPos(3);
}

FxSpatialFrame* AllocSave_FxSpatialFrame()
{
	return (FxSpatialFrame*)DB_AllocStreamPos(3);
}

FxSpatialFrame** AllocLoad_FxSpatialFramePtr()
{
	return (FxSpatialFrame**)DB_AllocStreamPos(3);
}

FxSpatialFrame** AllocSave_FxSpatialFramePtr()
{
	return (FxSpatialFrame**)DB_AllocStreamPos(3);
}

FxSpawnDef* AllocLoad_FxSpawnDef()
{
	return (FxSpawnDef*)DB_AllocStreamPos(3);
}

FxSpawnDef* AllocSave_FxSpawnDef()
{
	return (FxSpawnDef*)DB_AllocStreamPos(3);
}

FxSpawnDef** AllocLoad_FxSpawnDefPtr()
{
	return (FxSpawnDef**)DB_AllocStreamPos(3);
}

FxSpawnDef** AllocSave_FxSpawnDefPtr()
{
	return (FxSpawnDef**)DB_AllocStreamPos(3);
}

FxSpawnDefLooping* AllocLoad_FxSpawnDefLooping()
{
	return (FxSpawnDefLooping*)DB_AllocStreamPos(3);
}

FxSpawnDefLooping* AllocSave_FxSpawnDefLooping()
{
	return (FxSpawnDefLooping*)DB_AllocStreamPos(3);
}

FxSpawnDefLooping** AllocLoad_FxSpawnDefLoopingPtr()
{
	return (FxSpawnDefLooping**)DB_AllocStreamPos(3);
}

FxSpawnDefLooping** AllocSave_FxSpawnDefLoopingPtr()
{
	return (FxSpawnDefLooping**)DB_AllocStreamPos(3);
}

FxSpawnDefOneShot* AllocLoad_FxSpawnDefOneShot()
{
	return (FxSpawnDefOneShot*)DB_AllocStreamPos(3);
}

FxSpawnDefOneShot* AllocSave_FxSpawnDefOneShot()
{
	return (FxSpawnDefOneShot*)DB_AllocStreamPos(3);
}

FxSpawnDefOneShot** AllocLoad_FxSpawnDefOneShotPtr()
{
	return (FxSpawnDefOneShot**)DB_AllocStreamPos(3);
}

FxSpawnDefOneShot** AllocSave_FxSpawnDefOneShotPtr()
{
	return (FxSpawnDefOneShot**)DB_AllocStreamPos(3);
}

FxTrailDef* AllocLoad_FxTrailDef()
{
	return (FxTrailDef*)DB_AllocStreamPos(3);
}

FxTrailDef* AllocSave_FxTrailDef()
{
	return (FxTrailDef*)DB_AllocStreamPos(3);
}

FxTrailDef** AllocLoad_FxTrailDefPtr()
{
	return (FxTrailDef**)DB_AllocStreamPos(3);
}

FxTrailDef** AllocSave_FxTrailDefPtr()
{
	return (FxTrailDef**)DB_AllocStreamPos(3);
}

FxTrailVertex* AllocLoad_FxTrailVertex()
{
	return (FxTrailVertex*)DB_AllocStreamPos(3);
}

FxTrailVertex* AllocSave_FxTrailVertex()
{
	return (FxTrailVertex*)DB_AllocStreamPos(3);
}

FxTrailVertex** AllocLoad_FxTrailVertexPtr()
{
	return (FxTrailVertex**)DB_AllocStreamPos(3);
}

FxTrailVertex** AllocSave_FxTrailVertexPtr()
{
	return (FxTrailVertex**)DB_AllocStreamPos(3);
}

FxWorld* AllocLoad_FxWorld()
{
	return (FxWorld*)DB_AllocStreamPos(3);
}

FxWorld* AllocSave_FxWorld()
{
	return (FxWorld*)DB_AllocStreamPos(3);
}

FxWorld** AllocLoad_FxWorldPtr()
{
	return (FxWorld**)DB_AllocStreamPos(3);
}

FxWorld** AllocSave_FxWorldPtr()
{
	return (FxWorld**)DB_AllocStreamPos(3);
}

G_GlassData* AllocLoad_G_GlassData()
{
	return (G_GlassData*)DB_AllocStreamPos(3);
}

G_GlassData* AllocSave_G_GlassData()
{
	return (G_GlassData*)DB_AllocStreamPos(3);
}

G_GlassData** AllocLoad_G_GlassDataPtr()
{
	return (G_GlassData**)DB_AllocStreamPos(3);
}

G_GlassData** AllocSave_G_GlassDataPtr()
{
	return (G_GlassData**)DB_AllocStreamPos(3);
}

G_GlassName* AllocLoad_G_GlassName()
{
	return (G_GlassName*)DB_AllocStreamPos(3);
}

G_GlassName* AllocSave_G_GlassName()
{
	return (G_GlassName*)DB_AllocStreamPos(3);
}

G_GlassName** AllocLoad_G_GlassNamePtr()
{
	return (G_GlassName**)DB_AllocStreamPos(3);
}

G_GlassName** AllocSave_G_GlassNamePtr()
{
	return (G_GlassName**)DB_AllocStreamPos(3);
}

G_GlassPiece* AllocLoad_G_GlassPiece()
{
	return (G_GlassPiece*)DB_AllocStreamPos(1);
}

G_GlassPiece* AllocSave_G_GlassPiece()
{
	return (G_GlassPiece*)DB_AllocStreamPos(1);
}

G_GlassPiece** AllocLoad_G_GlassPiecePtr()
{
	return (G_GlassPiece**)DB_AllocStreamPos(1);
}

G_GlassPiece** AllocSave_G_GlassPiecePtr()
{
	return (G_GlassPiece**)DB_AllocStreamPos(1);
}

GameWorldMp* AllocLoad_GameWorldMp()
{
	return (GameWorldMp*)DB_AllocStreamPos(3);
}

GameWorldMp* AllocSave_GameWorldMp()
{
	return (GameWorldMp*)DB_AllocStreamPos(3);
}

GameWorldMp** AllocLoad_GameWorldMpPtr()
{
	return (GameWorldMp**)DB_AllocStreamPos(3);
}

GameWorldMp** AllocSave_GameWorldMpPtr()
{
	return (GameWorldMp**)DB_AllocStreamPos(3);
}

GfxColor* AllocLoad_GfxColor()
{
	return (GfxColor*)DB_AllocStreamPos(3);
}

GfxColor* AllocSave_GfxColor()
{
	return (GfxColor*)DB_AllocStreamPos(3);
}

GfxColor** AllocLoad_GfxColorPtr()
{
	return (GfxColor**)DB_AllocStreamPos(3);
}

GfxColor** AllocSave_GfxColorPtr()
{
	return (GfxColor**)DB_AllocStreamPos(3);
}

GfxDrawSurf* AllocLoad_GfxDrawSurf()
{
	return (GfxDrawSurf*)DB_AllocStreamPos(3);
}

GfxDrawSurf* AllocSave_GfxDrawSurf()
{
	return (GfxDrawSurf*)DB_AllocStreamPos(3);
}

GfxDrawSurf** AllocLoad_GfxDrawSurfPtr()
{
	return (GfxDrawSurf**)DB_AllocStreamPos(3);
}

GfxDrawSurf** AllocSave_GfxDrawSurfPtr()
{
	return (GfxDrawSurf**)DB_AllocStreamPos(3);
}

GfxImage* AllocLoad_GfxImage()
{
	return (GfxImage*)DB_AllocStreamPos(3);
}

GfxImage* AllocSave_GfxImage()
{
	return (GfxImage*)DB_AllocStreamPos(3);
}

GfxImage** AllocLoad_GfxImagePtr()
{
	return (GfxImage**)DB_AllocStreamPos(3);
}

GfxImage** AllocSave_GfxImagePtr()
{
	return (GfxImage**)DB_AllocStreamPos(3);
}

GfxImageLoadDef* AllocLoad_GfxImageLoadDef()
{
	return (GfxImageLoadDef*)DB_AllocStreamPos(3);
}

GfxImageLoadDef* AllocSave_GfxImageLoadDef()
{
	return (GfxImageLoadDef*)DB_AllocStreamPos(3);
}

GfxImageLoadDef** AllocLoad_GfxImageLoadDefPtr()
{
	return (GfxImageLoadDef**)DB_AllocStreamPos(3);
}

GfxImageLoadDef** AllocSave_GfxImageLoadDefPtr()
{
	return (GfxImageLoadDef**)DB_AllocStreamPos(3);
}

GfxLightDef* AllocLoad_GfxLightDef()
{
	return (GfxLightDef*)DB_AllocStreamPos(3);
}

GfxLightDef* AllocSave_GfxLightDef()
{
	return (GfxLightDef*)DB_AllocStreamPos(3);
}

GfxLightDef** AllocLoad_GfxLightDefPtr()
{
	return (GfxLightDef**)DB_AllocStreamPos(3);
}

GfxLightDef** AllocSave_GfxLightDefPtr()
{
	return (GfxLightDef**)DB_AllocStreamPos(3);
}

GfxLightImage* AllocLoad_GfxLightImage()
{
	return (GfxLightImage*)DB_AllocStreamPos(3);
}

GfxLightImage* AllocSave_GfxLightImage()
{
	return (GfxLightImage*)DB_AllocStreamPos(3);
}

GfxLightImage** AllocLoad_GfxLightImagePtr()
{
	return (GfxLightImage**)DB_AllocStreamPos(3);
}

GfxLightImage** AllocSave_GfxLightImagePtr()
{
	return (GfxLightImage**)DB_AllocStreamPos(3);
}

GfxPackedVertex* AllocLoad_GfxPackedVertex()
{
	return (GfxPackedVertex*)DB_AllocStreamPos(15);
}

GfxPackedVertex* AllocSave_GfxPackedVertex()
{
	return (GfxPackedVertex*)DB_AllocStreamPos(15);
}

GfxPackedVertex** AllocLoad_GfxPackedVertexPtr()
{
	return (GfxPackedVertex**)DB_AllocStreamPos(15);
}

GfxPackedVertex** AllocSave_GfxPackedVertexPtr()
{
	return (GfxPackedVertex**)DB_AllocStreamPos(15);
}

GfxPixelShaderLoadDef* AllocLoad_GfxPixelShaderLoadDef()
{
	return (GfxPixelShaderLoadDef*)DB_AllocStreamPos(3);
}

GfxPixelShaderLoadDef* AllocSave_GfxPixelShaderLoadDef()
{
	return (GfxPixelShaderLoadDef*)DB_AllocStreamPos(3);
}

GfxPixelShaderLoadDef** AllocLoad_GfxPixelShaderLoadDefPtr()
{
	return (GfxPixelShaderLoadDef**)DB_AllocStreamPos(3);
}

GfxPixelShaderLoadDef** AllocSave_GfxPixelShaderLoadDefPtr()
{
	return (GfxPixelShaderLoadDef**)DB_AllocStreamPos(3);
}

GfxPlacement* AllocLoad_GfxPlacement()
{
	return (GfxPlacement*)DB_AllocStreamPos(3);
}

GfxPlacement* AllocSave_GfxPlacement()
{
	return (GfxPlacement*)DB_AllocStreamPos(3);
}

GfxPlacement** AllocLoad_GfxPlacementPtr()
{
	return (GfxPlacement**)DB_AllocStreamPos(3);
}

GfxPlacement** AllocSave_GfxPlacementPtr()
{
	return (GfxPlacement**)DB_AllocStreamPos(3);
}

GfxStateBits* AllocLoad_GfxStateBits()
{
	return (GfxStateBits*)DB_AllocStreamPos(3);
}

GfxStateBits* AllocSave_GfxStateBits()
{
	return (GfxStateBits*)DB_AllocStreamPos(3);
}

GfxStateBits** AllocLoad_GfxStateBitsPtr()
{
	return (GfxStateBits**)DB_AllocStreamPos(3);
}

GfxStateBits** AllocSave_GfxStateBitsPtr()
{
	return (GfxStateBits**)DB_AllocStreamPos(3);
}

GfxTexture* AllocLoad_GfxTexture()
{
	return (GfxTexture*)DB_AllocStreamPos(3);
}

GfxTexture* AllocSave_GfxTexture()
{
	return (GfxTexture*)DB_AllocStreamPos(3);
}

GfxTexture** AllocLoad_GfxTexturePtr()
{
	return (GfxTexture**)DB_AllocStreamPos(3);
}

GfxTexture** AllocSave_GfxTexturePtr()
{
	return (GfxTexture**)DB_AllocStreamPos(3);
}

GfxVertexShaderLoadDef* AllocLoad_GfxVertexShaderLoadDef()
{
	return (GfxVertexShaderLoadDef*)DB_AllocStreamPos(3);
}

GfxVertexShaderLoadDef* AllocSave_GfxVertexShaderLoadDef()
{
	return (GfxVertexShaderLoadDef*)DB_AllocStreamPos(3);
}

GfxVertexShaderLoadDef** AllocLoad_GfxVertexShaderLoadDefPtr()
{
	return (GfxVertexShaderLoadDef**)DB_AllocStreamPos(3);
}

GfxVertexShaderLoadDef** AllocSave_GfxVertexShaderLoadDefPtr()
{
	return (GfxVertexShaderLoadDef**)DB_AllocStreamPos(3);
}

Glyph* AllocLoad_Glyph()
{
	return (Glyph*)DB_AllocStreamPos(3);
}

Glyph* AllocSave_Glyph()
{
	return (Glyph*)DB_AllocStreamPos(3);
}

Glyph** AllocLoad_GlyphPtr()
{
	return (Glyph**)DB_AllocStreamPos(3);
}

Glyph** AllocSave_GlyphPtr()
{
	return (Glyph**)DB_AllocStreamPos(3);
}

ItemFloatExpression* AllocLoad_ItemFloatExpression()
{
	return (ItemFloatExpression*)DB_AllocStreamPos(3);
}

ItemFloatExpression* AllocSave_ItemFloatExpression()
{
	return (ItemFloatExpression*)DB_AllocStreamPos(3);
}

ItemFloatExpression** AllocLoad_ItemFloatExpressionPtr()
{
	return (ItemFloatExpression**)DB_AllocStreamPos(3);
}

ItemFloatExpression** AllocSave_ItemFloatExpressionPtr()
{
	return (ItemFloatExpression**)DB_AllocStreamPos(3);
}

ItemKeyHandler* AllocLoad_ItemKeyHandler()
{
	return (ItemKeyHandler*)DB_AllocStreamPos(3);
}

ItemKeyHandler* AllocSave_ItemKeyHandler()
{
	return (ItemKeyHandler*)DB_AllocStreamPos(3);
}

ItemKeyHandler** AllocLoad_ItemKeyHandlerPtr()
{
	return (ItemKeyHandler**)DB_AllocStreamPos(3);
}

ItemKeyHandler** AllocSave_ItemKeyHandlerPtr()
{
	return (ItemKeyHandler**)DB_AllocStreamPos(3);
}

LbColumnDef* AllocLoad_LbColumnDef()
{
	return (LbColumnDef*)DB_AllocStreamPos(3);
}

LbColumnDef* AllocSave_LbColumnDef()
{
	return (LbColumnDef*)DB_AllocStreamPos(3);
}

LbColumnDef** AllocLoad_LbColumnDefPtr()
{
	return (LbColumnDef**)DB_AllocStreamPos(3);
}

LbColumnDef** AllocSave_LbColumnDefPtr()
{
	return (LbColumnDef**)DB_AllocStreamPos(3);
}

LeaderboardDef* AllocLoad_LeaderboardDef()
{
	return (LeaderboardDef*)DB_AllocStreamPos(3);
}

LeaderboardDef* AllocSave_LeaderboardDef()
{
	return (LeaderboardDef*)DB_AllocStreamPos(3);
}

LeaderboardDef** AllocLoad_LeaderboardDefPtr()
{
	return (LeaderboardDef**)DB_AllocStreamPos(3);
}

LeaderboardDef** AllocSave_LeaderboardDefPtr()
{
	return (LeaderboardDef**)DB_AllocStreamPos(3);
}

LoadedSound* AllocLoad_LoadedSound()
{
	return (LoadedSound*)DB_AllocStreamPos(3);
}

LoadedSound* AllocSave_LoadedSound()
{
	return (LoadedSound*)DB_AllocStreamPos(3);
}

LoadedSound** AllocLoad_LoadedSoundPtr()
{
	return (LoadedSound**)DB_AllocStreamPos(3);
}

LoadedSound** AllocSave_LoadedSoundPtr()
{
	return (LoadedSound**)DB_AllocStreamPos(3);
}

LocalizeEntry* AllocLoad_LocalizeEntry()
{
	return (LocalizeEntry*)DB_AllocStreamPos(3);
}

LocalizeEntry* AllocSave_LocalizeEntry()
{
	return (LocalizeEntry*)DB_AllocStreamPos(3);
}

LocalizeEntry** AllocLoad_LocalizeEntryPtr()
{
	return (LocalizeEntry**)DB_AllocStreamPos(3);
}

LocalizeEntry** AllocSave_LocalizeEntryPtr()
{
	return (LocalizeEntry**)DB_AllocStreamPos(3);
}

MSSChannelMap* AllocLoad_MSSChannelMap()
{
	return (MSSChannelMap*)DB_AllocStreamPos(3);
}

MSSChannelMap* AllocSave_MSSChannelMap()
{
	return (MSSChannelMap*)DB_AllocStreamPos(3);
}

MSSChannelMap** AllocLoad_MSSChannelMapPtr()
{
	return (MSSChannelMap**)DB_AllocStreamPos(3);
}

MSSChannelMap** AllocSave_MSSChannelMapPtr()
{
	return (MSSChannelMap**)DB_AllocStreamPos(3);
}

MSSSpeakerLevels* AllocLoad_MSSSpeakerLevels()
{
	return (MSSSpeakerLevels*)DB_AllocStreamPos(3);
}

MSSSpeakerLevels* AllocSave_MSSSpeakerLevels()
{
	return (MSSSpeakerLevels*)DB_AllocStreamPos(3);
}

MSSSpeakerLevels** AllocLoad_MSSSpeakerLevelsPtr()
{
	return (MSSSpeakerLevels**)DB_AllocStreamPos(3);
}

MSSSpeakerLevels** AllocSave_MSSSpeakerLevelsPtr()
{
	return (MSSSpeakerLevels**)DB_AllocStreamPos(3);
}

MapEnts* AllocLoad_MapEnts()
{
	return (MapEnts*)DB_AllocStreamPos(3);
}

MapEnts* AllocSave_MapEnts()
{
	return (MapEnts*)DB_AllocStreamPos(3);
}

MapEnts** AllocLoad_MapEntsPtr()
{
	return (MapEnts**)DB_AllocStreamPos(3);
}

MapEnts** AllocSave_MapEntsPtr()
{
	return (MapEnts**)DB_AllocStreamPos(3);
}

MapTriggers* AllocLoad_MapTriggers()
{
	return (MapTriggers*)DB_AllocStreamPos(3);
}

MapTriggers* AllocSave_MapTriggers()
{
	return (MapTriggers*)DB_AllocStreamPos(3);
}

MapTriggers** AllocLoad_MapTriggersPtr()
{
	return (MapTriggers**)DB_AllocStreamPos(3);
}

MapTriggers** AllocSave_MapTriggersPtr()
{
	return (MapTriggers**)DB_AllocStreamPos(3);
}

Material* AllocLoad_Material()
{
	return (Material*)DB_AllocStreamPos(3);
}

Material* AllocSave_Material()
{
	return (Material*)DB_AllocStreamPos(3);
}

Material** AllocLoad_MaterialPtr()
{
	return (Material**)DB_AllocStreamPos(3);
}

Material** AllocSave_MaterialPtr()
{
	return (Material**)DB_AllocStreamPos(3);
}

MaterialArgumentCodeConst* AllocLoad_MaterialArgumentCodeConst()
{
	return (MaterialArgumentCodeConst*)DB_AllocStreamPos(3);
}

MaterialArgumentCodeConst* AllocSave_MaterialArgumentCodeConst()
{
	return (MaterialArgumentCodeConst*)DB_AllocStreamPos(3);
}

MaterialArgumentCodeConst** AllocLoad_MaterialArgumentCodeConstPtr()
{
	return (MaterialArgumentCodeConst**)DB_AllocStreamPos(3);
}

MaterialArgumentCodeConst** AllocSave_MaterialArgumentCodeConstPtr()
{
	return (MaterialArgumentCodeConst**)DB_AllocStreamPos(3);
}

MaterialArgumentDef* AllocLoad_MaterialArgumentDef()
{
	return (MaterialArgumentDef*)DB_AllocStreamPos(3);
}

MaterialArgumentDef* AllocSave_MaterialArgumentDef()
{
	return (MaterialArgumentDef*)DB_AllocStreamPos(3);
}

MaterialArgumentDef** AllocLoad_MaterialArgumentDefPtr()
{
	return (MaterialArgumentDef**)DB_AllocStreamPos(3);
}

MaterialArgumentDef** AllocSave_MaterialArgumentDefPtr()
{
	return (MaterialArgumentDef**)DB_AllocStreamPos(3);
}

MaterialConstantDef* AllocLoad_MaterialConstantDef()
{
	return (MaterialConstantDef*)DB_AllocStreamPos(15);
}

MaterialConstantDef* AllocSave_MaterialConstantDef()
{
	return (MaterialConstantDef*)DB_AllocStreamPos(15);
}

MaterialConstantDef** AllocLoad_MaterialConstantDefPtr()
{
	return (MaterialConstantDef**)DB_AllocStreamPos(15);
}

MaterialConstantDef** AllocSave_MaterialConstantDefPtr()
{
	return (MaterialConstantDef**)DB_AllocStreamPos(15);
}

MaterialInfo* AllocLoad_MaterialInfo()
{
	return (MaterialInfo*)DB_AllocStreamPos(3);
}

MaterialInfo* AllocSave_MaterialInfo()
{
	return (MaterialInfo*)DB_AllocStreamPos(3);
}

MaterialInfo** AllocLoad_MaterialInfoPtr()
{
	return (MaterialInfo**)DB_AllocStreamPos(3);
}

MaterialInfo** AllocSave_MaterialInfoPtr()
{
	return (MaterialInfo**)DB_AllocStreamPos(3);
}

MaterialPass* AllocLoad_MaterialPass()
{
	return (MaterialPass*)DB_AllocStreamPos(3);
}

MaterialPass* AllocSave_MaterialPass()
{
	return (MaterialPass*)DB_AllocStreamPos(3);
}

MaterialPass** AllocLoad_MaterialPassPtr()
{
	return (MaterialPass**)DB_AllocStreamPos(3);
}

MaterialPass** AllocSave_MaterialPassPtr()
{
	return (MaterialPass**)DB_AllocStreamPos(3);
}

MaterialPixelShader* AllocLoad_MaterialPixelShader()
{
	return (MaterialPixelShader*)DB_AllocStreamPos(3);
}

MaterialPixelShader* AllocSave_MaterialPixelShader()
{
	return (MaterialPixelShader*)DB_AllocStreamPos(3);
}

MaterialPixelShader** AllocLoad_MaterialPixelShaderPtr()
{
	return (MaterialPixelShader**)DB_AllocStreamPos(3);
}

MaterialPixelShader** AllocSave_MaterialPixelShaderPtr()
{
	return (MaterialPixelShader**)DB_AllocStreamPos(3);
}

MaterialPixelShaderProgram* AllocLoad_MaterialPixelShaderProgram()
{
	return (MaterialPixelShaderProgram*)DB_AllocStreamPos(3);
}

MaterialPixelShaderProgram* AllocSave_MaterialPixelShaderProgram()
{
	return (MaterialPixelShaderProgram*)DB_AllocStreamPos(3);
}

MaterialPixelShaderProgram** AllocLoad_MaterialPixelShaderProgramPtr()
{
	return (MaterialPixelShaderProgram**)DB_AllocStreamPos(3);
}

MaterialPixelShaderProgram** AllocSave_MaterialPixelShaderProgramPtr()
{
	return (MaterialPixelShaderProgram**)DB_AllocStreamPos(3);
}

MaterialShaderArgument* AllocLoad_MaterialShaderArgument()
{
	return (MaterialShaderArgument*)DB_AllocStreamPos(3);
}

MaterialShaderArgument* AllocSave_MaterialShaderArgument()
{
	return (MaterialShaderArgument*)DB_AllocStreamPos(3);
}

MaterialShaderArgument** AllocLoad_MaterialShaderArgumentPtr()
{
	return (MaterialShaderArgument**)DB_AllocStreamPos(3);
}

MaterialShaderArgument** AllocSave_MaterialShaderArgumentPtr()
{
	return (MaterialShaderArgument**)DB_AllocStreamPos(3);
}

MaterialStreamRouting* AllocLoad_MaterialStreamRouting()
{
	return (MaterialStreamRouting*)DB_AllocStreamPos(1);
}

MaterialStreamRouting* AllocSave_MaterialStreamRouting()
{
	return (MaterialStreamRouting*)DB_AllocStreamPos(1);
}

MaterialStreamRouting** AllocLoad_MaterialStreamRoutingPtr()
{
	return (MaterialStreamRouting**)DB_AllocStreamPos(1);
}

MaterialStreamRouting** AllocSave_MaterialStreamRoutingPtr()
{
	return (MaterialStreamRouting**)DB_AllocStreamPos(1);
}

MaterialTechnique* AllocLoad_MaterialTechnique()
{
	return (MaterialTechnique*)DB_AllocStreamPos(3);
}

MaterialTechnique* AllocSave_MaterialTechnique()
{
	return (MaterialTechnique*)DB_AllocStreamPos(3);
}

MaterialTechnique** AllocLoad_MaterialTechniquePtr()
{
	return (MaterialTechnique**)DB_AllocStreamPos(3);
}

MaterialTechnique** AllocSave_MaterialTechniquePtr()
{
	return (MaterialTechnique**)DB_AllocStreamPos(3);
}

MaterialTechniqueSet* AllocLoad_MaterialTechniqueSet()
{
	return (MaterialTechniqueSet*)DB_AllocStreamPos(3);
}

MaterialTechniqueSet* AllocSave_MaterialTechniqueSet()
{
	return (MaterialTechniqueSet*)DB_AllocStreamPos(3);
}

MaterialTechniqueSet** AllocLoad_MaterialTechniqueSetPtr()
{
	return (MaterialTechniqueSet**)DB_AllocStreamPos(3);
}

MaterialTechniqueSet** AllocSave_MaterialTechniqueSetPtr()
{
	return (MaterialTechniqueSet**)DB_AllocStreamPos(3);
}

MaterialTextureDef* AllocLoad_MaterialTextureDef()
{
	return (MaterialTextureDef*)DB_AllocStreamPos(3);
}

MaterialTextureDef* AllocSave_MaterialTextureDef()
{
	return (MaterialTextureDef*)DB_AllocStreamPos(3);
}

MaterialTextureDef** AllocLoad_MaterialTextureDefPtr()
{
	return (MaterialTextureDef**)DB_AllocStreamPos(3);
}

MaterialTextureDef** AllocSave_MaterialTextureDefPtr()
{
	return (MaterialTextureDef**)DB_AllocStreamPos(3);
}

MaterialTextureDefInfo* AllocLoad_MaterialTextureDefInfo()
{
	return (MaterialTextureDefInfo*)DB_AllocStreamPos(3);
}

MaterialTextureDefInfo* AllocSave_MaterialTextureDefInfo()
{
	return (MaterialTextureDefInfo*)DB_AllocStreamPos(3);
}

MaterialTextureDefInfo** AllocLoad_MaterialTextureDefInfoPtr()
{
	return (MaterialTextureDefInfo**)DB_AllocStreamPos(3);
}

MaterialTextureDefInfo** AllocSave_MaterialTextureDefInfoPtr()
{
	return (MaterialTextureDefInfo**)DB_AllocStreamPos(3);
}

MaterialVertexDeclaration* AllocLoad_MaterialVertexDeclaration()
{
	return (MaterialVertexDeclaration*)DB_AllocStreamPos(3);
}

MaterialVertexDeclaration* AllocSave_MaterialVertexDeclaration()
{
	return (MaterialVertexDeclaration*)DB_AllocStreamPos(3);
}

MaterialVertexDeclaration** AllocLoad_MaterialVertexDeclarationPtr()
{
	return (MaterialVertexDeclaration**)DB_AllocStreamPos(3);
}

MaterialVertexDeclaration** AllocSave_MaterialVertexDeclarationPtr()
{
	return (MaterialVertexDeclaration**)DB_AllocStreamPos(3);
}

MaterialVertexShader* AllocLoad_MaterialVertexShader()
{
	return (MaterialVertexShader*)DB_AllocStreamPos(3);
}

MaterialVertexShader* AllocSave_MaterialVertexShader()
{
	return (MaterialVertexShader*)DB_AllocStreamPos(3);
}

MaterialVertexShader** AllocLoad_MaterialVertexShaderPtr()
{
	return (MaterialVertexShader**)DB_AllocStreamPos(3);
}

MaterialVertexShader** AllocSave_MaterialVertexShaderPtr()
{
	return (MaterialVertexShader**)DB_AllocStreamPos(3);
}

MaterialVertexShaderProgram* AllocLoad_MaterialVertexShaderProgram()
{
	return (MaterialVertexShaderProgram*)DB_AllocStreamPos(3);
}

MaterialVertexShaderProgram* AllocSave_MaterialVertexShaderProgram()
{
	return (MaterialVertexShaderProgram*)DB_AllocStreamPos(3);
}

MaterialVertexShaderProgram** AllocLoad_MaterialVertexShaderProgramPtr()
{
	return (MaterialVertexShaderProgram**)DB_AllocStreamPos(3);
}

MaterialVertexShaderProgram** AllocSave_MaterialVertexShaderProgramPtr()
{
	return (MaterialVertexShaderProgram**)DB_AllocStreamPos(3);
}

MaterialVertexStreamRouting* AllocLoad_MaterialVertexStreamRouting()
{
	return (MaterialVertexStreamRouting*)DB_AllocStreamPos(3);
}

MaterialVertexStreamRouting* AllocSave_MaterialVertexStreamRouting()
{
	return (MaterialVertexStreamRouting*)DB_AllocStreamPos(3);
}

MaterialVertexStreamRouting** AllocLoad_MaterialVertexStreamRoutingPtr()
{
	return (MaterialVertexStreamRouting**)DB_AllocStreamPos(3);
}

MaterialVertexStreamRouting** AllocSave_MaterialVertexStreamRoutingPtr()
{
	return (MaterialVertexStreamRouting**)DB_AllocStreamPos(3);
}

MenuEventHandler* AllocLoad_MenuEventHandler()
{
	return (MenuEventHandler*)DB_AllocStreamPos(3);
}

MenuEventHandler* AllocSave_MenuEventHandler()
{
	return (MenuEventHandler*)DB_AllocStreamPos(3);
}

MenuEventHandler** AllocLoad_MenuEventHandlerPtr()
{
	return (MenuEventHandler**)DB_AllocStreamPos(3);
}

MenuEventHandler** AllocSave_MenuEventHandlerPtr()
{
	return (MenuEventHandler**)DB_AllocStreamPos(3);
}

MenuEventHandlerSet* AllocLoad_MenuEventHandlerSet()
{
	return (MenuEventHandlerSet*)DB_AllocStreamPos(3);
}

MenuEventHandlerSet* AllocSave_MenuEventHandlerSet()
{
	return (MenuEventHandlerSet*)DB_AllocStreamPos(3);
}

MenuEventHandlerSet** AllocLoad_MenuEventHandlerSetPtr()
{
	return (MenuEventHandlerSet**)DB_AllocStreamPos(3);
}

MenuEventHandlerSet** AllocSave_MenuEventHandlerSetPtr()
{
	return (MenuEventHandlerSet**)DB_AllocStreamPos(3);
}

MenuList* AllocLoad_MenuList()
{
	return (MenuList*)DB_AllocStreamPos(3);
}

MenuList* AllocSave_MenuList()
{
	return (MenuList*)DB_AllocStreamPos(3);
}

MenuList** AllocLoad_MenuListPtr()
{
	return (MenuList**)DB_AllocStreamPos(3);
}

MenuList** AllocSave_MenuListPtr()
{
	return (MenuList**)DB_AllocStreamPos(3);
}

MssSound* AllocLoad_MssSound()
{
	return (MssSound*)DB_AllocStreamPos(3);
}

MssSound* AllocSave_MssSound()
{
	return (MssSound*)DB_AllocStreamPos(3);
}

MssSound** AllocLoad_MssSoundPtr()
{
	return (MssSound**)DB_AllocStreamPos(3);
}

MssSound** AllocSave_MssSoundPtr()
{
	return (MssSound**)DB_AllocStreamPos(3);
}

Operand* AllocLoad_Operand()
{
	return (Operand*)DB_AllocStreamPos(3);
}

Operand* AllocSave_Operand()
{
	return (Operand*)DB_AllocStreamPos(3);
}

Operand** AllocLoad_OperandPtr()
{
	return (Operand**)DB_AllocStreamPos(3);
}

Operand** AllocSave_OperandPtr()
{
	return (Operand**)DB_AllocStreamPos(3);
}

PackedTexCoords* AllocLoad_PackedTexCoords()
{
	return (PackedTexCoords*)DB_AllocStreamPos(3);
}

PackedTexCoords* AllocSave_PackedTexCoords()
{
	return (PackedTexCoords*)DB_AllocStreamPos(3);
}

PackedTexCoords** AllocLoad_PackedTexCoordsPtr()
{
	return (PackedTexCoords**)DB_AllocStreamPos(3);
}

PackedTexCoords** AllocSave_PackedTexCoordsPtr()
{
	return (PackedTexCoords**)DB_AllocStreamPos(3);
}

PackedUnitVec* AllocLoad_PackedUnitVec()
{
	return (PackedUnitVec*)DB_AllocStreamPos(3);
}

PackedUnitVec* AllocSave_PackedUnitVec()
{
	return (PackedUnitVec*)DB_AllocStreamPos(3);
}

PackedUnitVec** AllocLoad_PackedUnitVecPtr()
{
	return (PackedUnitVec**)DB_AllocStreamPos(3);
}

PackedUnitVec** AllocSave_PackedUnitVecPtr()
{
	return (PackedUnitVec**)DB_AllocStreamPos(3);
}

PhysCollmap* AllocLoad_PhysCollmap()
{
	return (PhysCollmap*)DB_AllocStreamPos(3);
}

PhysCollmap* AllocSave_PhysCollmap()
{
	return (PhysCollmap*)DB_AllocStreamPos(3);
}

PhysCollmap** AllocLoad_PhysCollmapPtr()
{
	return (PhysCollmap**)DB_AllocStreamPos(3);
}

PhysCollmap** AllocSave_PhysCollmapPtr()
{
	return (PhysCollmap**)DB_AllocStreamPos(3);
}

PhysGeomInfo* AllocLoad_PhysGeomInfo()
{
	return (PhysGeomInfo*)DB_AllocStreamPos(3);
}

PhysGeomInfo* AllocSave_PhysGeomInfo()
{
	return (PhysGeomInfo*)DB_AllocStreamPos(3);
}

PhysGeomInfo** AllocLoad_PhysGeomInfoPtr()
{
	return (PhysGeomInfo**)DB_AllocStreamPos(3);
}

PhysGeomInfo** AllocSave_PhysGeomInfoPtr()
{
	return (PhysGeomInfo**)DB_AllocStreamPos(3);
}

PhysMass* AllocLoad_PhysMass()
{
	return (PhysMass*)DB_AllocStreamPos(3);
}

PhysMass* AllocSave_PhysMass()
{
	return (PhysMass*)DB_AllocStreamPos(3);
}

PhysMass** AllocLoad_PhysMassPtr()
{
	return (PhysMass**)DB_AllocStreamPos(3);
}

PhysMass** AllocSave_PhysMassPtr()
{
	return (PhysMass**)DB_AllocStreamPos(3);
}

PhysPreset* AllocLoad_PhysPreset()
{
	return (PhysPreset*)DB_AllocStreamPos(3);
}

PhysPreset* AllocSave_PhysPreset()
{
	return (PhysPreset*)DB_AllocStreamPos(3);
}

PhysPreset** AllocLoad_PhysPresetPtr()
{
	return (PhysPreset**)DB_AllocStreamPos(3);
}

PhysPreset** AllocSave_PhysPresetPtr()
{
	return (PhysPreset**)DB_AllocStreamPos(3);
}

Picmip* AllocLoad_Picmip()
{
	return (Picmip*)DB_AllocStreamPos(3);
}

Picmip* AllocSave_Picmip()
{
	return (Picmip*)DB_AllocStreamPos(3);
}

Picmip** AllocLoad_PicmipPtr()
{
	return (Picmip**)DB_AllocStreamPos(3);
}

Picmip** AllocSave_PicmipPtr()
{
	return (Picmip**)DB_AllocStreamPos(3);
}

RawFile* AllocLoad_RawFile()
{
	return (RawFile*)DB_AllocStreamPos(3);
}

RawFile* AllocSave_RawFile()
{
	return (RawFile*)DB_AllocStreamPos(3);
}

RawFile** AllocLoad_RawFilePtr()
{
	return (RawFile**)DB_AllocStreamPos(3);
}

RawFile** AllocSave_RawFilePtr()
{
	return (RawFile**)DB_AllocStreamPos(3);
}

SModelAabbNode* AllocLoad_SModelAabbNode()
{
	return (SModelAabbNode*)DB_AllocStreamPos(3);
}

SModelAabbNode* AllocSave_SModelAabbNode()
{
	return (SModelAabbNode*)DB_AllocStreamPos(3);
}

SModelAabbNode** AllocLoad_SModelAabbNodePtr()
{
	return (SModelAabbNode**)DB_AllocStreamPos(3);
}

SModelAabbNode** AllocSave_SModelAabbNodePtr()
{
	return (SModelAabbNode**)DB_AllocStreamPos(3);
}

ScriptStringList* AllocLoad_ScriptStringList()
{
	return (ScriptStringList*)DB_AllocStreamPos(3);
}

ScriptStringList* AllocSave_ScriptStringList()
{
	return (ScriptStringList*)DB_AllocStreamPos(3);
}

ScriptStringList** AllocLoad_ScriptStringListPtr()
{
	return (ScriptStringList**)DB_AllocStreamPos(3);
}

ScriptStringList** AllocSave_ScriptStringListPtr()
{
	return (ScriptStringList**)DB_AllocStreamPos(3);
}

SetLocalVarData* AllocLoad_SetLocalVarData()
{
	return (SetLocalVarData*)DB_AllocStreamPos(3);
}

SetLocalVarData* AllocSave_SetLocalVarData()
{
	return (SetLocalVarData*)DB_AllocStreamPos(3);
}

SetLocalVarData** AllocLoad_SetLocalVarDataPtr()
{
	return (SetLocalVarData**)DB_AllocStreamPos(3);
}

SetLocalVarData** AllocSave_SetLocalVarDataPtr()
{
	return (SetLocalVarData**)DB_AllocStreamPos(3);
}

SndCurve* AllocLoad_SndCurve()
{
	return (SndCurve*)DB_AllocStreamPos(3);
}

SndCurve* AllocSave_SndCurve()
{
	return (SndCurve*)DB_AllocStreamPos(3);
}

SndCurve** AllocLoad_SndCurvePtr()
{
	return (SndCurve**)DB_AllocStreamPos(3);
}

SndCurve** AllocSave_SndCurvePtr()
{
	return (SndCurve**)DB_AllocStreamPos(3);
}

SndDriverGlobals* AllocLoad_SndDriverGlobals()
{
	return (SndDriverGlobals*)DB_AllocStreamPos(3);
}

SndDriverGlobals* AllocSave_SndDriverGlobals()
{
	return (SndDriverGlobals*)DB_AllocStreamPos(3);
}

SndDriverGlobals** AllocLoad_SndDriverGlobalsPtr()
{
	return (SndDriverGlobals**)DB_AllocStreamPos(3);
}

SndDriverGlobals** AllocSave_SndDriverGlobalsPtr()
{
	return (SndDriverGlobals**)DB_AllocStreamPos(3);
}

SoundFile* AllocLoad_SoundFile()
{
	return (SoundFile*)DB_AllocStreamPos(3);
}

SoundFile* AllocSave_SoundFile()
{
	return (SoundFile*)DB_AllocStreamPos(3);
}

SoundFile** AllocLoad_SoundFilePtr()
{
	return (SoundFile**)DB_AllocStreamPos(3);
}

SoundFile** AllocSave_SoundFilePtr()
{
	return (SoundFile**)DB_AllocStreamPos(3);
}

SoundFileRef* AllocLoad_SoundFileRef()
{
	return (SoundFileRef*)DB_AllocStreamPos(3);
}

SoundFileRef* AllocSave_SoundFileRef()
{
	return (SoundFileRef*)DB_AllocStreamPos(3);
}

SoundFileRef** AllocLoad_SoundFileRefPtr()
{
	return (SoundFileRef**)DB_AllocStreamPos(3);
}

SoundFileRef** AllocSave_SoundFileRefPtr()
{
	return (SoundFileRef**)DB_AllocStreamPos(3);
}

SpeakerMap* AllocLoad_SpeakerMap()
{
	return (SpeakerMap*)DB_AllocStreamPos(3);
}

SpeakerMap* AllocSave_SpeakerMap()
{
	return (SpeakerMap*)DB_AllocStreamPos(3);
}

SpeakerMap** AllocLoad_SpeakerMapPtr()
{
	return (SpeakerMap**)DB_AllocStreamPos(3);
}

SpeakerMap** AllocSave_SpeakerMapPtr()
{
	return (SpeakerMap**)DB_AllocStreamPos(3);
}

Stage* AllocLoad_Stage()
{
	return (Stage*)DB_AllocStreamPos(1);
}

Stage* AllocSave_Stage()
{
	return (Stage*)DB_AllocStreamPos(1);
}

Stage** AllocLoad_StagePtr()
{
	return (Stage**)DB_AllocStreamPos(1);
}

Stage** AllocSave_StagePtr()
{
	return (Stage**)DB_AllocStreamPos(1);
}

Statement_s* AllocLoad_Statement_s()
{
	return (Statement_s*)DB_AllocStreamPos(3);
}

Statement_s* AllocSave_Statement_s()
{
	return (Statement_s*)DB_AllocStreamPos(3);
}

Statement_s** AllocLoad_Statement_sPtr()
{
	return (Statement_s**)DB_AllocStreamPos(3);
}

Statement_s** AllocSave_Statement_sPtr()
{
	return (Statement_s**)DB_AllocStreamPos(3);
}

StaticDvar* AllocLoad_StaticDvar()
{
	return (StaticDvar*)DB_AllocStreamPos(3);
}

StaticDvar* AllocSave_StaticDvar()
{
	return (StaticDvar*)DB_AllocStreamPos(3);
}

StaticDvar** AllocLoad_StaticDvarPtr()
{
	return (StaticDvar**)DB_AllocStreamPos(3);
}

StaticDvar** AllocSave_StaticDvarPtr()
{
	return (StaticDvar**)DB_AllocStreamPos(3);
}

StaticDvarList* AllocLoad_StaticDvarList()
{
	return (StaticDvarList*)DB_AllocStreamPos(3);
}

StaticDvarList* AllocSave_StaticDvarList()
{
	return (StaticDvarList*)DB_AllocStreamPos(3);
}

StaticDvarList** AllocLoad_StaticDvarListPtr()
{
	return (StaticDvarList**)DB_AllocStreamPos(3);
}

StaticDvarList** AllocSave_StaticDvarListPtr()
{
	return (StaticDvarList**)DB_AllocStreamPos(3);
}

StreamFileInfo* AllocLoad_StreamFileInfo()
{
	return (StreamFileInfo*)DB_AllocStreamPos(3);
}

StreamFileInfo* AllocSave_StreamFileInfo()
{
	return (StreamFileInfo*)DB_AllocStreamPos(3);
}

StreamFileInfo** AllocLoad_StreamFileInfoPtr()
{
	return (StreamFileInfo**)DB_AllocStreamPos(3);
}

StreamFileInfo** AllocSave_StreamFileInfoPtr()
{
	return (StreamFileInfo**)DB_AllocStreamPos(3);
}

StreamFileName* AllocLoad_StreamFileName()
{
	return (StreamFileName*)DB_AllocStreamPos(3);
}

StreamFileName* AllocSave_StreamFileName()
{
	return (StreamFileName*)DB_AllocStreamPos(3);
}

StreamFileName** AllocLoad_StreamFileNamePtr()
{
	return (StreamFileName**)DB_AllocStreamPos(3);
}

StreamFileName** AllocSave_StreamFileNamePtr()
{
	return (StreamFileName**)DB_AllocStreamPos(3);
}

StreamFileNameRaw* AllocLoad_StreamFileNameRaw()
{
	return (StreamFileNameRaw*)DB_AllocStreamPos(3);
}

StreamFileNameRaw* AllocSave_StreamFileNameRaw()
{
	return (StreamFileNameRaw*)DB_AllocStreamPos(3);
}

StreamFileNameRaw** AllocLoad_StreamFileNameRawPtr()
{
	return (StreamFileNameRaw**)DB_AllocStreamPos(3);
}

StreamFileNameRaw** AllocSave_StreamFileNameRawPtr()
{
	return (StreamFileNameRaw**)DB_AllocStreamPos(3);
}

StreamedSound* AllocLoad_StreamedSound()
{
	return (StreamedSound*)DB_AllocStreamPos(3);
}

StreamedSound* AllocSave_StreamedSound()
{
	return (StreamedSound*)DB_AllocStreamPos(3);
}

StreamedSound** AllocLoad_StreamedSoundPtr()
{
	return (StreamedSound**)DB_AllocStreamPos(3);
}

StreamedSound** AllocSave_StreamedSoundPtr()
{
	return (StreamedSound**)DB_AllocStreamPos(3);
}

StringList* AllocLoad_StringList()
{
	return (StringList*)DB_AllocStreamPos(3);
}

StringList* AllocSave_StringList()
{
	return (StringList*)DB_AllocStreamPos(3);
}

StringList** AllocLoad_StringListPtr()
{
	return (StringList**)DB_AllocStreamPos(3);
}

StringList** AllocSave_StringListPtr()
{
	return (StringList**)DB_AllocStreamPos(3);
}

StringTable* AllocLoad_StringTable()
{
	return (StringTable*)DB_AllocStreamPos(3);
}

StringTable* AllocSave_StringTable()
{
	return (StringTable*)DB_AllocStreamPos(3);
}

StringTable** AllocLoad_StringTablePtr()
{
	return (StringTable**)DB_AllocStreamPos(3);
}

StringTable** AllocSave_StringTablePtr()
{
	return (StringTable**)DB_AllocStreamPos(3);
}

StringTableCell* AllocLoad_StringTableCell()
{
	return (StringTableCell*)DB_AllocStreamPos(3);
}

StringTableCell* AllocSave_StringTableCell()
{
	return (StringTableCell*)DB_AllocStreamPos(3);
}

StringTableCell** AllocLoad_StringTableCellPtr()
{
	return (StringTableCell**)DB_AllocStreamPos(3);
}

StringTableCell** AllocSave_StringTableCellPtr()
{
	return (StringTableCell**)DB_AllocStreamPos(3);
}

StructuredDataDef* AllocLoad_StructuredDataDef()
{
	return (StructuredDataDef*)DB_AllocStreamPos(3);
}

StructuredDataDef* AllocSave_StructuredDataDef()
{
	return (StructuredDataDef*)DB_AllocStreamPos(3);
}

StructuredDataDef** AllocLoad_StructuredDataDefPtr()
{
	return (StructuredDataDef**)DB_AllocStreamPos(3);
}

StructuredDataDef** AllocSave_StructuredDataDefPtr()
{
	return (StructuredDataDef**)DB_AllocStreamPos(3);
}

StructuredDataDefSet* AllocLoad_StructuredDataDefSet()
{
	return (StructuredDataDefSet*)DB_AllocStreamPos(3);
}

StructuredDataDefSet* AllocSave_StructuredDataDefSet()
{
	return (StructuredDataDefSet*)DB_AllocStreamPos(3);
}

StructuredDataDefSet** AllocLoad_StructuredDataDefSetPtr()
{
	return (StructuredDataDefSet**)DB_AllocStreamPos(3);
}

StructuredDataDefSet** AllocSave_StructuredDataDefSetPtr()
{
	return (StructuredDataDefSet**)DB_AllocStreamPos(3);
}

StructuredDataEnum* AllocLoad_StructuredDataEnum()
{
	return (StructuredDataEnum*)DB_AllocStreamPos(3);
}

StructuredDataEnum* AllocSave_StructuredDataEnum()
{
	return (StructuredDataEnum*)DB_AllocStreamPos(3);
}

StructuredDataEnum** AllocLoad_StructuredDataEnumPtr()
{
	return (StructuredDataEnum**)DB_AllocStreamPos(3);
}

StructuredDataEnum** AllocSave_StructuredDataEnumPtr()
{
	return (StructuredDataEnum**)DB_AllocStreamPos(3);
}

StructuredDataEnumEntry* AllocLoad_StructuredDataEnumEntry()
{
	return (StructuredDataEnumEntry*)DB_AllocStreamPos(3);
}

StructuredDataEnumEntry* AllocSave_StructuredDataEnumEntry()
{
	return (StructuredDataEnumEntry*)DB_AllocStreamPos(3);
}

StructuredDataEnumEntry** AllocLoad_StructuredDataEnumEntryPtr()
{
	return (StructuredDataEnumEntry**)DB_AllocStreamPos(3);
}

StructuredDataEnumEntry** AllocSave_StructuredDataEnumEntryPtr()
{
	return (StructuredDataEnumEntry**)DB_AllocStreamPos(3);
}

StructuredDataEnumedArray* AllocLoad_StructuredDataEnumedArray()
{
	return (StructuredDataEnumedArray*)DB_AllocStreamPos(3);
}

StructuredDataEnumedArray* AllocSave_StructuredDataEnumedArray()
{
	return (StructuredDataEnumedArray*)DB_AllocStreamPos(3);
}

StructuredDataEnumedArray** AllocLoad_StructuredDataEnumedArrayPtr()
{
	return (StructuredDataEnumedArray**)DB_AllocStreamPos(3);
}

StructuredDataEnumedArray** AllocSave_StructuredDataEnumedArrayPtr()
{
	return (StructuredDataEnumedArray**)DB_AllocStreamPos(3);
}

StructuredDataIndexedArray* AllocLoad_StructuredDataIndexedArray()
{
	return (StructuredDataIndexedArray*)DB_AllocStreamPos(3);
}

StructuredDataIndexedArray* AllocSave_StructuredDataIndexedArray()
{
	return (StructuredDataIndexedArray*)DB_AllocStreamPos(3);
}

StructuredDataIndexedArray** AllocLoad_StructuredDataIndexedArrayPtr()
{
	return (StructuredDataIndexedArray**)DB_AllocStreamPos(3);
}

StructuredDataIndexedArray** AllocSave_StructuredDataIndexedArrayPtr()
{
	return (StructuredDataIndexedArray**)DB_AllocStreamPos(3);
}

StructuredDataStruct* AllocLoad_StructuredDataStruct()
{
	return (StructuredDataStruct*)DB_AllocStreamPos(3);
}

StructuredDataStruct* AllocSave_StructuredDataStruct()
{
	return (StructuredDataStruct*)DB_AllocStreamPos(3);
}

StructuredDataStruct** AllocLoad_StructuredDataStructPtr()
{
	return (StructuredDataStruct**)DB_AllocStreamPos(3);
}

StructuredDataStruct** AllocSave_StructuredDataStructPtr()
{
	return (StructuredDataStruct**)DB_AllocStreamPos(3);
}

StructuredDataStructProperty* AllocLoad_StructuredDataStructProperty()
{
	return (StructuredDataStructProperty*)DB_AllocStreamPos(3);
}

StructuredDataStructProperty* AllocSave_StructuredDataStructProperty()
{
	return (StructuredDataStructProperty*)DB_AllocStreamPos(3);
}

StructuredDataStructProperty** AllocLoad_StructuredDataStructPropertyPtr()
{
	return (StructuredDataStructProperty**)DB_AllocStreamPos(3);
}

StructuredDataStructProperty** AllocSave_StructuredDataStructPropertyPtr()
{
	return (StructuredDataStructProperty**)DB_AllocStreamPos(3);
}

StructuredDataType* AllocLoad_StructuredDataType()
{
	return (StructuredDataType*)DB_AllocStreamPos(3);
}

StructuredDataType* AllocSave_StructuredDataType()
{
	return (StructuredDataType*)DB_AllocStreamPos(3);
}

StructuredDataType** AllocLoad_StructuredDataTypePtr()
{
	return (StructuredDataType**)DB_AllocStreamPos(3);
}

StructuredDataType** AllocSave_StructuredDataTypePtr()
{
	return (StructuredDataType**)DB_AllocStreamPos(3);
}

StructuredDataTypeUnion* AllocLoad_StructuredDataTypeUnion()
{
	return (StructuredDataTypeUnion*)DB_AllocStreamPos(3);
}

StructuredDataTypeUnion* AllocSave_StructuredDataTypeUnion()
{
	return (StructuredDataTypeUnion*)DB_AllocStreamPos(3);
}

StructuredDataTypeUnion** AllocLoad_StructuredDataTypeUnionPtr()
{
	return (StructuredDataTypeUnion**)DB_AllocStreamPos(3);
}

StructuredDataTypeUnion** AllocSave_StructuredDataTypeUnionPtr()
{
	return (StructuredDataTypeUnion**)DB_AllocStreamPos(3);
}

TempString* AllocLoad_TempString()
{
	return (TempString*)DB_AllocStreamPos(0);
}

TempString* AllocSave_TempString()
{
	return (TempString*)DB_AllocStreamPos(0);
}

TempString** AllocLoad_TempStringPtr()
{
	return (TempString**)DB_AllocStreamPos(0);
}

TempString** AllocSave_TempStringPtr()
{
	return (TempString**)DB_AllocStreamPos(0);
}

TracerDef* AllocLoad_TracerDef()
{
	return (TracerDef*)DB_AllocStreamPos(3);
}

TracerDef* AllocSave_TracerDef()
{
	return (TracerDef*)DB_AllocStreamPos(3);
}

TracerDef** AllocLoad_TracerDefPtr()
{
	return (TracerDef**)DB_AllocStreamPos(3);
}

TracerDef** AllocSave_TracerDefPtr()
{
	return (TracerDef**)DB_AllocStreamPos(3);
}

TriIndice* AllocLoad_TriIndice()
{
	return (TriIndice*)DB_AllocStreamPos(15);
}

TriIndice* AllocSave_TriIndice()
{
	return (TriIndice*)DB_AllocStreamPos(15);
}

TriIndice** AllocLoad_TriIndicePtr()
{
	return (TriIndice**)DB_AllocStreamPos(15);
}

TriIndice** AllocSave_TriIndicePtr()
{
	return (TriIndice**)DB_AllocStreamPos(15);
}

TriggerHull* AllocLoad_TriggerHull()
{
	return (TriggerHull*)DB_AllocStreamPos(3);
}

TriggerHull* AllocSave_TriggerHull()
{
	return (TriggerHull*)DB_AllocStreamPos(3);
}

TriggerHull** AllocLoad_TriggerHullPtr()
{
	return (TriggerHull**)DB_AllocStreamPos(3);
}

TriggerHull** AllocSave_TriggerHullPtr()
{
	return (TriggerHull**)DB_AllocStreamPos(3);
}

TriggerModel* AllocLoad_TriggerModel()
{
	return (TriggerModel*)DB_AllocStreamPos(3);
}

TriggerModel* AllocSave_TriggerModel()
{
	return (TriggerModel*)DB_AllocStreamPos(3);
}

TriggerModel** AllocLoad_TriggerModelPtr()
{
	return (TriggerModel**)DB_AllocStreamPos(3);
}

TriggerModel** AllocSave_TriggerModelPtr()
{
	return (TriggerModel**)DB_AllocStreamPos(3);
}

TriggerSlab* AllocLoad_TriggerSlab()
{
	return (TriggerSlab*)DB_AllocStreamPos(3);
}

TriggerSlab* AllocSave_TriggerSlab()
{
	return (TriggerSlab*)DB_AllocStreamPos(3);
}

TriggerSlab** AllocLoad_TriggerSlabPtr()
{
	return (TriggerSlab**)DB_AllocStreamPos(3);
}

TriggerSlab** AllocSave_TriggerSlabPtr()
{
	return (TriggerSlab**)DB_AllocStreamPos(3);
}

UIFunctionList* AllocLoad_UIFunctionList()
{
	return (UIFunctionList*)DB_AllocStreamPos(3);
}

UIFunctionList* AllocSave_UIFunctionList()
{
	return (UIFunctionList*)DB_AllocStreamPos(3);
}

UIFunctionList** AllocLoad_UIFunctionListPtr()
{
	return (UIFunctionList**)DB_AllocStreamPos(3);
}

UIFunctionList** AllocSave_UIFunctionListPtr()
{
	return (UIFunctionList**)DB_AllocStreamPos(3);
}

WaterWritable* AllocLoad_WaterWritable()
{
	return (WaterWritable*)DB_AllocStreamPos(3);
}

WaterWritable* AllocSave_WaterWritable()
{
	return (WaterWritable*)DB_AllocStreamPos(3);
}

WaterWritable** AllocLoad_WaterWritablePtr()
{
	return (WaterWritable**)DB_AllocStreamPos(3);
}

WaterWritable** AllocSave_WaterWritablePtr()
{
	return (WaterWritable**)DB_AllocStreamPos(3);
}

XAnimDeltaPart* AllocLoad_XAnimDeltaPart()
{
	return (XAnimDeltaPart*)DB_AllocStreamPos(3);
}

XAnimDeltaPart* AllocSave_XAnimDeltaPart()
{
	return (XAnimDeltaPart*)DB_AllocStreamPos(3);
}

XAnimDeltaPart** AllocLoad_XAnimDeltaPartPtr()
{
	return (XAnimDeltaPart**)DB_AllocStreamPos(3);
}

XAnimDeltaPart** AllocSave_XAnimDeltaPartPtr()
{
	return (XAnimDeltaPart**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuat* AllocLoad_XAnimDeltaPartQuat()
{
	return (XAnimDeltaPartQuat*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuat* AllocSave_XAnimDeltaPartQuat()
{
	return (XAnimDeltaPartQuat*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuat** AllocLoad_XAnimDeltaPartQuatPtr()
{
	return (XAnimDeltaPartQuat**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuat** AllocSave_XAnimDeltaPartQuatPtr()
{
	return (XAnimDeltaPartQuat**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuat2* AllocLoad_XAnimDeltaPartQuat2()
{
	return (XAnimDeltaPartQuat2*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuat2* AllocSave_XAnimDeltaPartQuat2()
{
	return (XAnimDeltaPartQuat2*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuat2** AllocLoad_XAnimDeltaPartQuat2Ptr()
{
	return (XAnimDeltaPartQuat2**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuat2** AllocSave_XAnimDeltaPartQuat2Ptr()
{
	return (XAnimDeltaPartQuat2**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatData* AllocLoad_XAnimDeltaPartQuatData()
{
	return (XAnimDeltaPartQuatData*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatData* AllocSave_XAnimDeltaPartQuatData()
{
	return (XAnimDeltaPartQuatData*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatData** AllocLoad_XAnimDeltaPartQuatDataPtr()
{
	return (XAnimDeltaPartQuatData**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatData** AllocSave_XAnimDeltaPartQuatDataPtr()
{
	return (XAnimDeltaPartQuatData**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatData2* AllocLoad_XAnimDeltaPartQuatData2()
{
	return (XAnimDeltaPartQuatData2*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatData2* AllocSave_XAnimDeltaPartQuatData2()
{
	return (XAnimDeltaPartQuatData2*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatData2** AllocLoad_XAnimDeltaPartQuatData2Ptr()
{
	return (XAnimDeltaPartQuatData2**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatData2** AllocSave_XAnimDeltaPartQuatData2Ptr()
{
	return (XAnimDeltaPartQuatData2**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatDataFrames* AllocLoad_XAnimDeltaPartQuatDataFrames()
{
	return (XAnimDeltaPartQuatDataFrames*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatDataFrames* AllocSave_XAnimDeltaPartQuatDataFrames()
{
	return (XAnimDeltaPartQuatDataFrames*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatDataFrames** AllocLoad_XAnimDeltaPartQuatDataFramesPtr()
{
	return (XAnimDeltaPartQuatDataFrames**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatDataFrames** AllocSave_XAnimDeltaPartQuatDataFramesPtr()
{
	return (XAnimDeltaPartQuatDataFrames**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatDataFrames2* AllocLoad_XAnimDeltaPartQuatDataFrames2()
{
	return (XAnimDeltaPartQuatDataFrames2*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatDataFrames2* AllocSave_XAnimDeltaPartQuatDataFrames2()
{
	return (XAnimDeltaPartQuatDataFrames2*)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatDataFrames2** AllocLoad_XAnimDeltaPartQuatDataFrames2Ptr()
{
	return (XAnimDeltaPartQuatDataFrames2**)DB_AllocStreamPos(3);
}

XAnimDeltaPartQuatDataFrames2** AllocSave_XAnimDeltaPartQuatDataFrames2Ptr()
{
	return (XAnimDeltaPartQuatDataFrames2**)DB_AllocStreamPos(3);
}

XAnimDynamicFrames* AllocLoad_XAnimDynamicFrames()
{
	return (XAnimDynamicFrames*)DB_AllocStreamPos(3);
}

XAnimDynamicFrames* AllocSave_XAnimDynamicFrames()
{
	return (XAnimDynamicFrames*)DB_AllocStreamPos(3);
}

XAnimDynamicFrames** AllocLoad_XAnimDynamicFramesPtr()
{
	return (XAnimDynamicFrames**)DB_AllocStreamPos(3);
}

XAnimDynamicFrames** AllocSave_XAnimDynamicFramesPtr()
{
	return (XAnimDynamicFrames**)DB_AllocStreamPos(3);
}

XAnimDynamicIndices* AllocLoad_XAnimDynamicIndices()
{
	return (XAnimDynamicIndices*)DB_AllocStreamPos(3);
}

XAnimDynamicIndices* AllocSave_XAnimDynamicIndices()
{
	return (XAnimDynamicIndices*)DB_AllocStreamPos(3);
}

XAnimDynamicIndices** AllocLoad_XAnimDynamicIndicesPtr()
{
	return (XAnimDynamicIndices**)DB_AllocStreamPos(3);
}

XAnimDynamicIndices** AllocSave_XAnimDynamicIndicesPtr()
{
	return (XAnimDynamicIndices**)DB_AllocStreamPos(3);
}

XAnimIndices* AllocLoad_XAnimIndices()
{
	return (XAnimIndices*)DB_AllocStreamPos(3);
}

XAnimIndices* AllocSave_XAnimIndices()
{
	return (XAnimIndices*)DB_AllocStreamPos(3);
}

XAnimIndices** AllocLoad_XAnimIndicesPtr()
{
	return (XAnimIndices**)DB_AllocStreamPos(3);
}

XAnimIndices** AllocSave_XAnimIndicesPtr()
{
	return (XAnimIndices**)DB_AllocStreamPos(3);
}

XAnimNotifyInfo* AllocLoad_XAnimNotifyInfo()
{
	return (XAnimNotifyInfo*)DB_AllocStreamPos(3);
}

XAnimNotifyInfo* AllocSave_XAnimNotifyInfo()
{
	return (XAnimNotifyInfo*)DB_AllocStreamPos(3);
}

XAnimNotifyInfo** AllocLoad_XAnimNotifyInfoPtr()
{
	return (XAnimNotifyInfo**)DB_AllocStreamPos(3);
}

XAnimNotifyInfo** AllocSave_XAnimNotifyInfoPtr()
{
	return (XAnimNotifyInfo**)DB_AllocStreamPos(3);
}

XAnimPartTrans* AllocLoad_XAnimPartTrans()
{
	return (XAnimPartTrans*)DB_AllocStreamPos(3);
}

XAnimPartTrans* AllocSave_XAnimPartTrans()
{
	return (XAnimPartTrans*)DB_AllocStreamPos(3);
}

XAnimPartTrans** AllocLoad_XAnimPartTransPtr()
{
	return (XAnimPartTrans**)DB_AllocStreamPos(3);
}

XAnimPartTrans** AllocSave_XAnimPartTransPtr()
{
	return (XAnimPartTrans**)DB_AllocStreamPos(3);
}

XAnimPartTransData* AllocLoad_XAnimPartTransData()
{
	return (XAnimPartTransData*)DB_AllocStreamPos(3);
}

XAnimPartTransData* AllocSave_XAnimPartTransData()
{
	return (XAnimPartTransData*)DB_AllocStreamPos(3);
}

XAnimPartTransData** AllocLoad_XAnimPartTransDataPtr()
{
	return (XAnimPartTransData**)DB_AllocStreamPos(3);
}

XAnimPartTransData** AllocSave_XAnimPartTransDataPtr()
{
	return (XAnimPartTransData**)DB_AllocStreamPos(3);
}

XAnimPartTransFrames* AllocLoad_XAnimPartTransFrames()
{
	return (XAnimPartTransFrames*)DB_AllocStreamPos(3);
}

XAnimPartTransFrames* AllocSave_XAnimPartTransFrames()
{
	return (XAnimPartTransFrames*)DB_AllocStreamPos(3);
}

XAnimPartTransFrames** AllocLoad_XAnimPartTransFramesPtr()
{
	return (XAnimPartTransFrames**)DB_AllocStreamPos(3);
}

XAnimPartTransFrames** AllocSave_XAnimPartTransFramesPtr()
{
	return (XAnimPartTransFrames**)DB_AllocStreamPos(3);
}

XAnimParts* AllocLoad_XAnimParts()
{
	return (XAnimParts*)DB_AllocStreamPos(3);
}

XAnimParts* AllocSave_XAnimParts()
{
	return (XAnimParts*)DB_AllocStreamPos(3);
}

XAnimParts** AllocLoad_XAnimPartsPtr()
{
	return (XAnimParts**)DB_AllocStreamPos(3);
}

XAnimParts** AllocSave_XAnimPartsPtr()
{
	return (XAnimParts**)DB_AllocStreamPos(3);
}

XAsset* AllocLoad_XAsset()
{
	return (XAsset*)DB_AllocStreamPos(3);
}

XAsset* AllocSave_XAsset()
{
	return (XAsset*)DB_AllocStreamPos(3);
}

XAsset** AllocLoad_XAssetPtr()
{
	return (XAsset**)DB_AllocStreamPos(3);
}

XAsset** AllocSave_XAssetPtr()
{
	return (XAsset**)DB_AllocStreamPos(3);
}

XAssetHeader* AllocLoad_XAssetHeader()
{
	return (XAssetHeader*)DB_AllocStreamPos(3);
}

XAssetHeader* AllocSave_XAssetHeader()
{
	return (XAssetHeader*)DB_AllocStreamPos(3);
}

XAssetHeader** AllocLoad_XAssetHeaderPtr()
{
	return (XAssetHeader**)DB_AllocStreamPos(3);
}

XAssetHeader** AllocSave_XAssetHeaderPtr()
{
	return (XAssetHeader**)DB_AllocStreamPos(3);
}

XAssetList* AllocLoad_XAssetList()
{
	return (XAssetList*)DB_AllocStreamPos(3);
}

XAssetList* AllocSave_XAssetList()
{
	return (XAssetList*)DB_AllocStreamPos(3);
}

XAssetList** AllocLoad_XAssetListPtr()
{
	return (XAssetList**)DB_AllocStreamPos(3);
}

XAssetList** AllocSave_XAssetListPtr()
{
	return (XAssetList**)DB_AllocStreamPos(3);
}

XBoneInfo* AllocLoad_XBoneInfo()
{
	return (XBoneInfo*)DB_AllocStreamPos(3);
}

XBoneInfo* AllocSave_XBoneInfo()
{
	return (XBoneInfo*)DB_AllocStreamPos(3);
}

XBoneInfo** AllocLoad_XBoneInfoPtr()
{
	return (XBoneInfo**)DB_AllocStreamPos(3);
}

XBoneInfo** AllocSave_XBoneInfoPtr()
{
	return (XBoneInfo**)DB_AllocStreamPos(3);
}

XModel* AllocLoad_XModel()
{
	return (XModel*)DB_AllocStreamPos(3);
}

XModel* AllocSave_XModel()
{
	return (XModel*)DB_AllocStreamPos(3);
}

XModel** AllocLoad_XModelPtr()
{
	return (XModel**)DB_AllocStreamPos(3);
}

XModel** AllocSave_XModelPtr()
{
	return (XModel**)DB_AllocStreamPos(3);
}

XModelCollSurf_s* AllocLoad_XModelCollSurf_s()
{
	return (XModelCollSurf_s*)DB_AllocStreamPos(3);
}

XModelCollSurf_s* AllocSave_XModelCollSurf_s()
{
	return (XModelCollSurf_s*)DB_AllocStreamPos(3);
}

XModelCollSurf_s** AllocLoad_XModelCollSurf_sPtr()
{
	return (XModelCollSurf_s**)DB_AllocStreamPos(3);
}

XModelCollSurf_s** AllocSave_XModelCollSurf_sPtr()
{
	return (XModelCollSurf_s**)DB_AllocStreamPos(3);
}

XModelCollTri_s* AllocLoad_XModelCollTri_s()
{
	return (XModelCollTri_s*)DB_AllocStreamPos(3);
}

XModelCollTri_s* AllocSave_XModelCollTri_s()
{
	return (XModelCollTri_s*)DB_AllocStreamPos(3);
}

XModelCollTri_s** AllocLoad_XModelCollTri_sPtr()
{
	return (XModelCollTri_s**)DB_AllocStreamPos(3);
}

XModelCollTri_s** AllocSave_XModelCollTri_sPtr()
{
	return (XModelCollTri_s**)DB_AllocStreamPos(3);
}

XModelLodInfo* AllocLoad_XModelLodInfo()
{
	return (XModelLodInfo*)DB_AllocStreamPos(3);
}

XModelLodInfo* AllocSave_XModelLodInfo()
{
	return (XModelLodInfo*)DB_AllocStreamPos(3);
}

XModelLodInfo** AllocLoad_XModelLodInfoPtr()
{
	return (XModelLodInfo**)DB_AllocStreamPos(3);
}

XModelLodInfo** AllocSave_XModelLodInfoPtr()
{
	return (XModelLodInfo**)DB_AllocStreamPos(3);
}

XModelSurfs* AllocLoad_XModelSurfs()
{
	return (XModelSurfs*)DB_AllocStreamPos(3);
}

XModelSurfs* AllocSave_XModelSurfs()
{
	return (XModelSurfs*)DB_AllocStreamPos(3);
}

XModelSurfs** AllocLoad_XModelSurfsPtr()
{
	return (XModelSurfs**)DB_AllocStreamPos(3);
}

XModelSurfs** AllocSave_XModelSurfsPtr()
{
	return (XModelSurfs**)DB_AllocStreamPos(3);
}

XRigidVertList* AllocLoad_XRigidVertList()
{
	return (XRigidVertList*)DB_AllocStreamPos(3);
}

XRigidVertList* AllocSave_XRigidVertList()
{
	return (XRigidVertList*)DB_AllocStreamPos(3);
}

XRigidVertList** AllocLoad_XRigidVertListPtr()
{
	return (XRigidVertList**)DB_AllocStreamPos(3);
}

XRigidVertList** AllocSave_XRigidVertListPtr()
{
	return (XRigidVertList**)DB_AllocStreamPos(3);
}

XString* AllocLoad_XString()
{
	return (XString*)DB_AllocStreamPos(0);
}

XString* AllocSave_XString()
{
	return (XString*)DB_AllocStreamPos(0);
}

XString** AllocLoad_XStringPtr()
{
	return (XString**)DB_AllocStreamPos(0);
}

XString** AllocSave_XStringPtr()
{
	return (XString**)DB_AllocStreamPos(0);
}

XSurface* AllocLoad_XSurface()
{
	return (XSurface*)DB_AllocStreamPos(3);
}

XSurface* AllocSave_XSurface()
{
	return (XSurface*)DB_AllocStreamPos(3);
}

XSurface** AllocLoad_XSurfacePtr()
{
	return (XSurface**)DB_AllocStreamPos(3);
}

XSurface** AllocSave_XSurfacePtr()
{
	return (XSurface**)DB_AllocStreamPos(3);
}

XSurfaceCollisionAabb* AllocLoad_XSurfaceCollisionAabb()
{
	return (XSurfaceCollisionAabb*)DB_AllocStreamPos(3);
}

XSurfaceCollisionAabb* AllocSave_XSurfaceCollisionAabb()
{
	return (XSurfaceCollisionAabb*)DB_AllocStreamPos(3);
}

XSurfaceCollisionAabb** AllocLoad_XSurfaceCollisionAabbPtr()
{
	return (XSurfaceCollisionAabb**)DB_AllocStreamPos(3);
}

XSurfaceCollisionAabb** AllocSave_XSurfaceCollisionAabbPtr()
{
	return (XSurfaceCollisionAabb**)DB_AllocStreamPos(3);
}

XSurfaceCollisionLeaf* AllocLoad_XSurfaceCollisionLeaf()
{
	return (XSurfaceCollisionLeaf*)DB_AllocStreamPos(1);
}

XSurfaceCollisionLeaf* AllocSave_XSurfaceCollisionLeaf()
{
	return (XSurfaceCollisionLeaf*)DB_AllocStreamPos(1);
}

XSurfaceCollisionLeaf** AllocLoad_XSurfaceCollisionLeafPtr()
{
	return (XSurfaceCollisionLeaf**)DB_AllocStreamPos(1);
}

XSurfaceCollisionLeaf** AllocSave_XSurfaceCollisionLeafPtr()
{
	return (XSurfaceCollisionLeaf**)DB_AllocStreamPos(1);
}

XSurfaceCollisionNode* AllocLoad_XSurfaceCollisionNode()
{
	return (XSurfaceCollisionNode*)DB_AllocStreamPos(15);
}

XSurfaceCollisionNode* AllocSave_XSurfaceCollisionNode()
{
	return (XSurfaceCollisionNode*)DB_AllocStreamPos(15);
}

XSurfaceCollisionNode** AllocLoad_XSurfaceCollisionNodePtr()
{
	return (XSurfaceCollisionNode**)DB_AllocStreamPos(15);
}

XSurfaceCollisionNode** AllocSave_XSurfaceCollisionNodePtr()
{
	return (XSurfaceCollisionNode**)DB_AllocStreamPos(15);
}

XSurfaceCollisionTree* AllocLoad_XSurfaceCollisionTree()
{
	return (XSurfaceCollisionTree*)DB_AllocStreamPos(3);
}

XSurfaceCollisionTree* AllocSave_XSurfaceCollisionTree()
{
	return (XSurfaceCollisionTree*)DB_AllocStreamPos(3);
}

XSurfaceCollisionTree** AllocLoad_XSurfaceCollisionTreePtr()
{
	return (XSurfaceCollisionTree**)DB_AllocStreamPos(3);
}

XSurfaceCollisionTree** AllocSave_XSurfaceCollisionTreePtr()
{
	return (XSurfaceCollisionTree**)DB_AllocStreamPos(3);
}

XSurfaceVertexInfo* AllocLoad_XSurfaceVertexInfo()
{
	return (XSurfaceVertexInfo*)DB_AllocStreamPos(3);
}

XSurfaceVertexInfo* AllocSave_XSurfaceVertexInfo()
{
	return (XSurfaceVertexInfo*)DB_AllocStreamPos(3);
}

XSurfaceVertexInfo** AllocLoad_XSurfaceVertexInfoPtr()
{
	return (XSurfaceVertexInfo**)DB_AllocStreamPos(3);
}

XSurfaceVertexInfo** AllocSave_XSurfaceVertexInfoPtr()
{
	return (XSurfaceVertexInfo**)DB_AllocStreamPos(3);
}

_AILSOUNDINFO* AllocLoad__AILSOUNDINFO()
{
	return (_AILSOUNDINFO*)DB_AllocStreamPos(3);
}

_AILSOUNDINFO* AllocSave__AILSOUNDINFO()
{
	return (_AILSOUNDINFO*)DB_AllocStreamPos(3);
}

_AILSOUNDINFO** AllocLoad__AILSOUNDINFOPtr()
{
	return (_AILSOUNDINFO**)DB_AllocStreamPos(3);
}

_AILSOUNDINFO** AllocSave__AILSOUNDINFOPtr()
{
	return (_AILSOUNDINFO**)DB_AllocStreamPos(3);
}

bool* AllocLoad_bool()
{
	return (bool*)DB_AllocStreamPos(0);
}

bool* AllocSave_bool()
{
	return (bool*)DB_AllocStreamPos(0);
}

bool** AllocLoad_boolPtr()
{
	return (bool**)DB_AllocStreamPos(0);
}

bool** AllocSave_boolPtr()
{
	return (bool**)DB_AllocStreamPos(0);
}

cLeafBrushNodeChildren_t* AllocLoad_cLeafBrushNodeChildren_t()
{
	return (cLeafBrushNodeChildren_t*)DB_AllocStreamPos(3);
}

cLeafBrushNodeChildren_t* AllocSave_cLeafBrushNodeChildren_t()
{
	return (cLeafBrushNodeChildren_t*)DB_AllocStreamPos(3);
}

cLeafBrushNodeChildren_t** AllocLoad_cLeafBrushNodeChildren_tPtr()
{
	return (cLeafBrushNodeChildren_t**)DB_AllocStreamPos(3);
}

cLeafBrushNodeChildren_t** AllocSave_cLeafBrushNodeChildren_tPtr()
{
	return (cLeafBrushNodeChildren_t**)DB_AllocStreamPos(3);
}

cLeafBrushNodeData_t* AllocLoad_cLeafBrushNodeData_t()
{
	return (cLeafBrushNodeData_t*)DB_AllocStreamPos(3);
}

cLeafBrushNodeData_t* AllocSave_cLeafBrushNodeData_t()
{
	return (cLeafBrushNodeData_t*)DB_AllocStreamPos(3);
}

cLeafBrushNodeData_t** AllocLoad_cLeafBrushNodeData_tPtr()
{
	return (cLeafBrushNodeData_t**)DB_AllocStreamPos(3);
}

cLeafBrushNodeData_t** AllocSave_cLeafBrushNodeData_tPtr()
{
	return (cLeafBrushNodeData_t**)DB_AllocStreamPos(3);
}

cLeafBrushNodeLeaf_t* AllocLoad_cLeafBrushNodeLeaf_t()
{
	return (cLeafBrushNodeLeaf_t*)DB_AllocStreamPos(3);
}

cLeafBrushNodeLeaf_t* AllocSave_cLeafBrushNodeLeaf_t()
{
	return (cLeafBrushNodeLeaf_t*)DB_AllocStreamPos(3);
}

cLeafBrushNodeLeaf_t** AllocLoad_cLeafBrushNodeLeaf_tPtr()
{
	return (cLeafBrushNodeLeaf_t**)DB_AllocStreamPos(3);
}

cLeafBrushNodeLeaf_t** AllocSave_cLeafBrushNodeLeaf_tPtr()
{
	return (cLeafBrushNodeLeaf_t**)DB_AllocStreamPos(3);
}

cLeafBrushNode_s* AllocLoad_cLeafBrushNode_s()
{
	return (cLeafBrushNode_s*)DB_AllocStreamPos(3);
}

cLeafBrushNode_s* AllocSave_cLeafBrushNode_s()
{
	return (cLeafBrushNode_s*)DB_AllocStreamPos(3);
}

cLeafBrushNode_s** AllocLoad_cLeafBrushNode_sPtr()
{
	return (cLeafBrushNode_s**)DB_AllocStreamPos(3);
}

cLeafBrushNode_s** AllocSave_cLeafBrushNode_sPtr()
{
	return (cLeafBrushNode_s**)DB_AllocStreamPos(3);
}

cLeaf_t* AllocLoad_cLeaf_t()
{
	return (cLeaf_t*)DB_AllocStreamPos(3);
}

cLeaf_t* AllocSave_cLeaf_t()
{
	return (cLeaf_t*)DB_AllocStreamPos(3);
}

cLeaf_t** AllocLoad_cLeaf_tPtr()
{
	return (cLeaf_t**)DB_AllocStreamPos(3);
}

cLeaf_t** AllocSave_cLeaf_tPtr()
{
	return (cLeaf_t**)DB_AllocStreamPos(3);
}

cNode_t* AllocLoad_cNode_t()
{
	return (cNode_t*)DB_AllocStreamPos(3);
}

cNode_t* AllocSave_cNode_t()
{
	return (cNode_t*)DB_AllocStreamPos(3);
}

cNode_t** AllocLoad_cNode_tPtr()
{
	return (cNode_t**)DB_AllocStreamPos(3);
}

cNode_t** AllocSave_cNode_tPtr()
{
	return (cNode_t**)DB_AllocStreamPos(3);
}

cStaticModel_s* AllocLoad_cStaticModel_s()
{
	return (cStaticModel_s*)DB_AllocStreamPos(3);
}

cStaticModel_s* AllocSave_cStaticModel_s()
{
	return (cStaticModel_s*)DB_AllocStreamPos(3);
}

cStaticModel_s** AllocLoad_cStaticModel_sPtr()
{
	return (cStaticModel_s**)DB_AllocStreamPos(3);
}

cStaticModel_s** AllocSave_cStaticModel_sPtr()
{
	return (cStaticModel_s**)DB_AllocStreamPos(3);
}

cbrush_t* AllocLoad_cbrush_t()
{
	return (cbrush_t*)DB_AllocStreamPos(3);
}

cbrush_t* AllocSave_cbrush_t()
{
	return (cbrush_t*)DB_AllocStreamPos(3);
}

cbrush_t** AllocLoad_cbrush_tPtr()
{
	return (cbrush_t**)DB_AllocStreamPos(3);
}

cbrush_t** AllocSave_cbrush_tPtr()
{
	return (cbrush_t**)DB_AllocStreamPos(3);
}

cbrushside_t* AllocLoad_cbrushside_t()
{
	return (cbrushside_t*)DB_AllocStreamPos(3);
}

cbrushside_t* AllocSave_cbrushside_t()
{
	return (cbrushside_t*)DB_AllocStreamPos(3);
}

cbrushside_t** AllocLoad_cbrushside_tPtr()
{
	return (cbrushside_t**)DB_AllocStreamPos(3);
}

cbrushside_t** AllocSave_cbrushside_tPtr()
{
	return (cbrushside_t**)DB_AllocStreamPos(3);
}

char* AllocLoad_char()
{
	return (char*)DB_AllocStreamPos(0);
}

char* AllocSave_char()
{
	return (char*)DB_AllocStreamPos(0);
}

char** AllocLoad_charPtr()
{
	return (char**)DB_AllocStreamPos(0);
}

char** AllocSave_charPtr()
{
	return (char**)DB_AllocStreamPos(0);
}

char16* AllocLoad_char16()
{
	return (char16*)DB_AllocStreamPos(15);
}

char16* AllocSave_char16()
{
	return (char16*)DB_AllocStreamPos(15);
}

char16** AllocLoad_char16Ptr()
{
	return (char16**)DB_AllocStreamPos(15);
}

char16** AllocSave_char16Ptr()
{
	return (char16**)DB_AllocStreamPos(15);
}

clipMap_t* AllocLoad_clipMap_t()
{
	return (clipMap_t*)DB_AllocStreamPos(63);
}

clipMap_t* AllocSave_clipMap_t()
{
	return (clipMap_t*)DB_AllocStreamPos(63);
}

clipMap_t** AllocLoad_clipMap_tPtr()
{
	return (clipMap_t**)DB_AllocStreamPos(63);
}

clipMap_t** AllocSave_clipMap_tPtr()
{
	return (clipMap_t**)DB_AllocStreamPos(63);
}

cmodel_t* AllocLoad_cmodel_t()
{
	return (cmodel_t*)DB_AllocStreamPos(3);
}

cmodel_t* AllocSave_cmodel_t()
{
	return (cmodel_t*)DB_AllocStreamPos(3);
}

cmodel_t** AllocLoad_cmodel_tPtr()
{
	return (cmodel_t**)DB_AllocStreamPos(3);
}

cmodel_t** AllocSave_cmodel_tPtr()
{
	return (cmodel_t**)DB_AllocStreamPos(3);
}

columnInfo_s* AllocLoad_columnInfo_s()
{
	return (columnInfo_s*)DB_AllocStreamPos(3);
}

columnInfo_s* AllocSave_columnInfo_s()
{
	return (columnInfo_s*)DB_AllocStreamPos(3);
}

columnInfo_s** AllocLoad_columnInfo_sPtr()
{
	return (columnInfo_s**)DB_AllocStreamPos(3);
}

columnInfo_s** AllocSave_columnInfo_sPtr()
{
	return (columnInfo_s**)DB_AllocStreamPos(3);
}

complex_s* AllocLoad_complex_s()
{
	return (complex_s*)DB_AllocStreamPos(3);
}

complex_s* AllocSave_complex_s()
{
	return (complex_s*)DB_AllocStreamPos(3);
}

complex_s** AllocLoad_complex_sPtr()
{
	return (complex_s**)DB_AllocStreamPos(3);
}

complex_s** AllocSave_complex_sPtr()
{
	return (complex_s**)DB_AllocStreamPos(3);
}

const char *DB_ComWorldGetName(XAssetHeader* header)
{
	return (*(ComWorld**)header)->name;
}

const char *DB_Font_sGetName(XAssetHeader* header)
{
	return (*(Font_s**)header)->fontName;
}

const char *DB_FxEffectDefGetName(XAssetHeader* header)
{
	return (*(FxEffectDef**)header)->name;
}

const char *DB_FxWorldGetName(XAssetHeader* header)
{
	return (*(FxWorld**)header)->name;
}

const char *DB_GameWorldMpGetName(XAssetHeader* header)
{
	return (*(GameWorldMp**)header)->name;
}

const char *DB_GfxImageGetName(XAssetHeader* header)
{
	return (*(GfxImage**)header)->name;
}

const char *DB_GfxLightDefGetName(XAssetHeader* header)
{
	return (*(GfxLightDef**)header)->name;
}

const char *DB_LeaderboardDefGetName(XAssetHeader* header)
{
	return (*(LeaderboardDef**)header)->name;
}

const char *DB_LocalizeEntryGetName(XAssetHeader* header)
{
	return (*(LocalizeEntry**)header)->name;
}

const char *DB_MapEntsGetName(XAssetHeader* header)
{
	return (*(MapEnts**)header)->name;
}

const char *DB_MaterialGetName(XAssetHeader* header)
{
	return (*(Material**)header)->info.name;
}

const char *DB_MaterialPixelShaderGetName(XAssetHeader* header)
{
	return (*(MaterialPixelShader**)header)->name;
}

const char *DB_MaterialTechniqueSetGetName(XAssetHeader* header)
{
	return (*(MaterialTechniqueSet**)header)->name;
}

const char *DB_MaterialVertexDeclarationGetName(XAssetHeader* header)
{
	return (*(MaterialVertexDeclaration**)header)->name;
}

const char *DB_MaterialVertexShaderGetName(XAssetHeader* header)
{
	return (*(MaterialVertexShader**)header)->name;
}

const char *DB_MenuListGetName(XAssetHeader* header)
{
	return (*(MenuList**)header)->name;
}

const char *DB_PhysCollmapGetName(XAssetHeader* header)
{
	return (*(PhysCollmap**)header)->name;
}

const char *DB_PhysPresetGetName(XAssetHeader* header)
{
	return (*(PhysPreset**)header)->name;
}

const char *DB_RawFileGetName(XAssetHeader* header)
{
	return (*(RawFile**)header)->name;
}

const char *DB_SndCurveGetName(XAssetHeader* header)
{
	return (*(SndCurve**)header)->filename;
}

const char *DB_StringTableGetName(XAssetHeader* header)
{
	return (*(StringTable**)header)->name;
}

const char *DB_StructuredDataDefSetGetName(XAssetHeader* header)
{
	return (*(StructuredDataDefSet**)header)->name;
}

const char *DB_TracerDefGetName(XAssetHeader* header)
{
	return (*(TracerDef**)header)->name;
}

const char *DB_XAnimPartsGetName(XAssetHeader* header)
{
	return (*(XAnimParts**)header)->name;
}

const char *DB_XModelGetName(XAssetHeader* header)
{
	return (*(XModel**)header)->name;
}

const char *DB_XModelSurfsGetName(XAssetHeader* header)
{
	return (*(XModelSurfs**)header)->name;
}

const char *DB_clipMap_tGetName(XAssetHeader* header)
{
	return (*(clipMap_t**)header)->name;
}

const char *DB_menuDef_tGetName(XAssetHeader* header)
{
	return (*(menuDef_t**)header)->window.name;
}

const char *DB_snd_alias_list_tGetName(XAssetHeader* header)
{
	return (*(snd_alias_list_t**)header)->aliasName;
}

cplane_s* AllocLoad_cplane_s()
{
	return (cplane_s*)DB_AllocStreamPos(3);
}

cplane_s* AllocSave_cplane_s()
{
	return (cplane_s*)DB_AllocStreamPos(3);
}

cplane_s** AllocLoad_cplane_sPtr()
{
	return (cplane_s**)DB_AllocStreamPos(3);
}

cplane_s** AllocSave_cplane_sPtr()
{
	return (cplane_s**)DB_AllocStreamPos(3);
}

double* AllocLoad_double()
{
	return (double*)DB_AllocStreamPos(3);
}

double* AllocSave_double()
{
	return (double*)DB_AllocStreamPos(3);
}

double** AllocLoad_doublePtr()
{
	return (double**)DB_AllocStreamPos(3);
}

double** AllocSave_doublePtr()
{
	return (double**)DB_AllocStreamPos(3);
}

editFieldDef_s* AllocLoad_editFieldDef_s()
{
	return (editFieldDef_s*)DB_AllocStreamPos(3);
}

editFieldDef_s* AllocSave_editFieldDef_s()
{
	return (editFieldDef_s*)DB_AllocStreamPos(3);
}

editFieldDef_s** AllocLoad_editFieldDef_sPtr()
{
	return (editFieldDef_s**)DB_AllocStreamPos(3);
}

editFieldDef_s** AllocSave_editFieldDef_sPtr()
{
	return (editFieldDef_s**)DB_AllocStreamPos(3);
}

entryInternalData* AllocLoad_entryInternalData()
{
	return (entryInternalData*)DB_AllocStreamPos(3);
}

entryInternalData* AllocSave_entryInternalData()
{
	return (entryInternalData*)DB_AllocStreamPos(3);
}

entryInternalData** AllocLoad_entryInternalDataPtr()
{
	return (entryInternalData**)DB_AllocStreamPos(3);
}

entryInternalData** AllocSave_entryInternalDataPtr()
{
	return (entryInternalData**)DB_AllocStreamPos(3);
}

expressionEntry* AllocLoad_expressionEntry()
{
	return (expressionEntry*)DB_AllocStreamPos(3);
}

expressionEntry* AllocSave_expressionEntry()
{
	return (expressionEntry*)DB_AllocStreamPos(3);
}

expressionEntry** AllocLoad_expressionEntryPtr()
{
	return (expressionEntry**)DB_AllocStreamPos(3);
}

expressionEntry** AllocSave_expressionEntryPtr()
{
	return (expressionEntry**)DB_AllocStreamPos(3);
}

float* AllocLoad_float()
{
	return (float*)DB_AllocStreamPos(3);
}

float* AllocSave_float()
{
	return (float*)DB_AllocStreamPos(3);
}

float** AllocLoad_floatPtr()
{
	return (float**)DB_AllocStreamPos(3);
}

float** AllocSave_floatPtr()
{
	return (float**)DB_AllocStreamPos(3);
}

float16* AllocLoad_float16()
{
	return (float16*)DB_AllocStreamPos(15);
}

float16* AllocSave_float16()
{
	return (float16*)DB_AllocStreamPos(15);
}

float16** AllocLoad_float16Ptr()
{
	return (float16**)DB_AllocStreamPos(15);
}

float16** AllocSave_float16Ptr()
{
	return (float16**)DB_AllocStreamPos(15);
}

int16* AllocLoad_int16()
{
	return (int16*)DB_AllocStreamPos(1);
}

int16* AllocSave_int16()
{
	return (int16*)DB_AllocStreamPos(1);
}

int16** AllocLoad_int16Ptr()
{
	return (int16**)DB_AllocStreamPos(1);
}

int16** AllocSave_int16Ptr()
{
	return (int16**)DB_AllocStreamPos(1);
}

int32* AllocLoad_int32()
{
	return (int32*)DB_AllocStreamPos(3);
}

int32* AllocSave_int32()
{
	return (int32*)DB_AllocStreamPos(3);
}

int32** AllocLoad_int32Ptr()
{
	return (int32**)DB_AllocStreamPos(3);
}

int32** AllocSave_int32Ptr()
{
	return (int32**)DB_AllocStreamPos(3);
}

int64* AllocLoad_int64()
{
	return (int64*)DB_AllocStreamPos(3);
}

int64* AllocSave_int64()
{
	return (int64*)DB_AllocStreamPos(3);
}

int64** AllocLoad_int64Ptr()
{
	return (int64**)DB_AllocStreamPos(3);
}

int64** AllocSave_int64Ptr()
{
	return (int64**)DB_AllocStreamPos(3);
}

int8* AllocLoad_int8()
{
	return (int8*)DB_AllocStreamPos(0);
}

int8* AllocSave_int8()
{
	return (int8*)DB_AllocStreamPos(0);
}

int8** AllocLoad_int8Ptr()
{
	return (int8**)DB_AllocStreamPos(0);
}

int8** AllocSave_int8Ptr()
{
	return (int8**)DB_AllocStreamPos(0);
}

itemDefData_t* AllocLoad_itemDefData_t()
{
	return (itemDefData_t*)DB_AllocStreamPos(3);
}

itemDefData_t* AllocSave_itemDefData_t()
{
	return (itemDefData_t*)DB_AllocStreamPos(3);
}

itemDefData_t** AllocLoad_itemDefData_tPtr()
{
	return (itemDefData_t**)DB_AllocStreamPos(3);
}

itemDefData_t** AllocSave_itemDefData_tPtr()
{
	return (itemDefData_t**)DB_AllocStreamPos(3);
}

itemDef_s* AllocLoad_itemDef_s()
{
	return (itemDef_s*)DB_AllocStreamPos(3);
}

itemDef_s* AllocSave_itemDef_s()
{
	return (itemDef_s*)DB_AllocStreamPos(3);
}

itemDef_s** AllocLoad_itemDef_sPtr()
{
	return (itemDef_s**)DB_AllocStreamPos(3);
}

itemDef_s** AllocSave_itemDef_sPtr()
{
	return (itemDef_s**)DB_AllocStreamPos(3);
}

listBoxDef_s* AllocLoad_listBoxDef_s()
{
	return (listBoxDef_s*)DB_AllocStreamPos(3);
}

listBoxDef_s* AllocSave_listBoxDef_s()
{
	return (listBoxDef_s*)DB_AllocStreamPos(3);
}

listBoxDef_s** AllocLoad_listBoxDef_sPtr()
{
	return (listBoxDef_s**)DB_AllocStreamPos(3);
}

listBoxDef_s** AllocSave_listBoxDef_sPtr()
{
	return (listBoxDef_s**)DB_AllocStreamPos(3);
}

menuDef_t* AllocLoad_menuDef_t()
{
	return (menuDef_t*)DB_AllocStreamPos(3);
}

menuDef_t* AllocSave_menuDef_t()
{
	return (menuDef_t*)DB_AllocStreamPos(3);
}

menuDef_t** AllocLoad_menuDef_tPtr()
{
	return (menuDef_t**)DB_AllocStreamPos(3);
}

menuDef_t** AllocSave_menuDef_tPtr()
{
	return (menuDef_t**)DB_AllocStreamPos(3);
}

menuTransition* AllocLoad_menuTransition()
{
	return (menuTransition*)DB_AllocStreamPos(3);
}

menuTransition* AllocSave_menuTransition()
{
	return (menuTransition*)DB_AllocStreamPos(3);
}

menuTransition** AllocLoad_menuTransitionPtr()
{
	return (menuTransition**)DB_AllocStreamPos(3);
}

menuTransition** AllocSave_menuTransitionPtr()
{
	return (menuTransition**)DB_AllocStreamPos(3);
}

multiDef_s* AllocLoad_multiDef_s()
{
	return (multiDef_s*)DB_AllocStreamPos(3);
}

multiDef_s* AllocSave_multiDef_s()
{
	return (multiDef_s*)DB_AllocStreamPos(3);
}

multiDef_s** AllocLoad_multiDef_sPtr()
{
	return (multiDef_s**)DB_AllocStreamPos(3);
}

multiDef_s** AllocSave_multiDef_sPtr()
{
	return (multiDef_s**)DB_AllocStreamPos(3);
}

newsTickerDef_s* AllocLoad_newsTickerDef_s()
{
	return (newsTickerDef_s*)DB_AllocStreamPos(3);
}

newsTickerDef_s* AllocSave_newsTickerDef_s()
{
	return (newsTickerDef_s*)DB_AllocStreamPos(3);
}

newsTickerDef_s** AllocLoad_newsTickerDef_sPtr()
{
	return (newsTickerDef_s**)DB_AllocStreamPos(3);
}

newsTickerDef_s** AllocSave_newsTickerDef_sPtr()
{
	return (newsTickerDef_s**)DB_AllocStreamPos(3);
}

operandInternalDataUnion* AllocLoad_operandInternalDataUnion()
{
	return (operandInternalDataUnion*)DB_AllocStreamPos(3);
}

operandInternalDataUnion* AllocSave_operandInternalDataUnion()
{
	return (operandInternalDataUnion*)DB_AllocStreamPos(3);
}

operandInternalDataUnion** AllocLoad_operandInternalDataUnionPtr()
{
	return (operandInternalDataUnion**)DB_AllocStreamPos(3);
}

operandInternalDataUnion** AllocSave_operandInternalDataUnionPtr()
{
	return (operandInternalDataUnion**)DB_AllocStreamPos(3);
}

rectDef_s* AllocLoad_rectDef_s()
{
	return (rectDef_s*)DB_AllocStreamPos(3);
}

rectDef_s* AllocSave_rectDef_s()
{
	return (rectDef_s*)DB_AllocStreamPos(3);
}

rectDef_s** AllocLoad_rectDef_sPtr()
{
	return (rectDef_s**)DB_AllocStreamPos(3);
}

rectDef_s** AllocSave_rectDef_sPtr()
{
	return (rectDef_s**)DB_AllocStreamPos(3);
}

snd_alias_list_t* AllocLoad_snd_alias_list_t()
{
	return (snd_alias_list_t*)DB_AllocStreamPos(3);
}

snd_alias_list_t* AllocSave_snd_alias_list_t()
{
	return (snd_alias_list_t*)DB_AllocStreamPos(3);
}

snd_alias_list_t** AllocLoad_snd_alias_list_tPtr()
{
	return (snd_alias_list_t**)DB_AllocStreamPos(3);
}

snd_alias_list_t** AllocSave_snd_alias_list_tPtr()
{
	return (snd_alias_list_t**)DB_AllocStreamPos(3);
}

snd_alias_t* AllocLoad_snd_alias_t()
{
	return (snd_alias_t*)DB_AllocStreamPos(3);
}

snd_alias_t* AllocSave_snd_alias_t()
{
	return (snd_alias_t*)DB_AllocStreamPos(3);
}

snd_alias_t** AllocLoad_snd_alias_tPtr()
{
	return (snd_alias_t**)DB_AllocStreamPos(3);
}

snd_alias_t** AllocSave_snd_alias_tPtr()
{
	return (snd_alias_t**)DB_AllocStreamPos(3);
}

textScrollDef_s* AllocLoad_textScrollDef_s()
{
	return (textScrollDef_s*)DB_AllocStreamPos(3);
}

textScrollDef_s* AllocSave_textScrollDef_s()
{
	return (textScrollDef_s*)DB_AllocStreamPos(3);
}

textScrollDef_s** AllocLoad_textScrollDef_sPtr()
{
	return (textScrollDef_s**)DB_AllocStreamPos(3);
}

textScrollDef_s** AllocSave_textScrollDef_sPtr()
{
	return (textScrollDef_s**)DB_AllocStreamPos(3);
}

uint16* AllocLoad_uint16()
{
	return (uint16*)DB_AllocStreamPos(1);
}

uint16* AllocSave_uint16()
{
	return (uint16*)DB_AllocStreamPos(1);
}

uint16** AllocLoad_uint16Ptr()
{
	return (uint16**)DB_AllocStreamPos(1);
}

uint16** AllocSave_uint16Ptr()
{
	return (uint16**)DB_AllocStreamPos(1);
}

uint32* AllocLoad_uint32()
{
	return (uint32*)DB_AllocStreamPos(3);
}

uint32* AllocSave_uint32()
{
	return (uint32*)DB_AllocStreamPos(3);
}

uint32** AllocLoad_uint32Ptr()
{
	return (uint32**)DB_AllocStreamPos(3);
}

uint32** AllocSave_uint32Ptr()
{
	return (uint32**)DB_AllocStreamPos(3);
}

uint64* AllocLoad_uint64()
{
	return (uint64*)DB_AllocStreamPos(3);
}

uint64* AllocSave_uint64()
{
	return (uint64*)DB_AllocStreamPos(3);
}

uint64** AllocLoad_uint64Ptr()
{
	return (uint64**)DB_AllocStreamPos(3);
}

uint64** AllocSave_uint64Ptr()
{
	return (uint64**)DB_AllocStreamPos(3);
}

uint8* AllocLoad_uint8()
{
	return (uint8*)DB_AllocStreamPos(0);
}

uint8* AllocSave_uint8()
{
	return (uint8*)DB_AllocStreamPos(0);
}

uint8** AllocLoad_uint8Ptr()
{
	return (uint8**)DB_AllocStreamPos(0);
}

uint8** AllocSave_uint8Ptr()
{
	return (uint8**)DB_AllocStreamPos(0);
}

vec1_t* AllocLoad_vec1_t()
{
	return (vec1_t*)DB_AllocStreamPos(3);
}

vec1_t* AllocSave_vec1_t()
{
	return (vec1_t*)DB_AllocStreamPos(3);
}

vec1_t** AllocLoad_vec1_tPtr()
{
	return (vec1_t**)DB_AllocStreamPos(3);
}

vec1_t** AllocSave_vec1_tPtr()
{
	return (vec1_t**)DB_AllocStreamPos(3);
}

vec2_t* AllocLoad_vec2_t()
{
	return (vec2_t*)DB_AllocStreamPos(3);
}

vec2_t* AllocSave_vec2_t()
{
	return (vec2_t*)DB_AllocStreamPos(3);
}

vec2_t** AllocLoad_vec2_tPtr()
{
	return (vec2_t**)DB_AllocStreamPos(3);
}

vec2_t** AllocSave_vec2_tPtr()
{
	return (vec2_t**)DB_AllocStreamPos(3);
}

vec3_t* AllocLoad_vec3_t()
{
	return (vec3_t*)DB_AllocStreamPos(3);
}

vec3_t* AllocSave_vec3_t()
{
	return (vec3_t*)DB_AllocStreamPos(3);
}

vec3_t** AllocLoad_vec3_tPtr()
{
	return (vec3_t**)DB_AllocStreamPos(3);
}

vec3_t** AllocSave_vec3_tPtr()
{
	return (vec3_t**)DB_AllocStreamPos(3);
}

vec4_t* AllocLoad_vec4_t()
{
	return (vec4_t*)DB_AllocStreamPos(3);
}

vec4_t* AllocSave_vec4_t()
{
	return (vec4_t*)DB_AllocStreamPos(3);
}

vec4_t** AllocLoad_vec4_tPtr()
{
	return (vec4_t**)DB_AllocStreamPos(3);
}

vec4_t** AllocSave_vec4_tPtr()
{
	return (vec4_t**)DB_AllocStreamPos(3);
}

void Load_$C8D87EB0090687D323381DFB7A82089C(bool atStreamStart)
{
	Load_Stream(atStreamStart, var$C8D87EB0090687D323381DFB7A82089C, sizeof($C8D87EB0090687D323381DFB7A82089C));

}

void Load_$C8D87EB0090687D323381DFB7A82089CArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, var$C8D87EB0090687D323381DFB7A82089C, sizeof($C8D87EB0090687D323381DFB7A82089C) * count);
	$C8D87EB0090687D323381DFB7A82089C* pointer = var$C8D87EB0090687D323381DFB7A82089C;
	for (int i = 0; i < count; i++)
	{
		var$C8D87EB0090687D323381DFB7A82089C = pointer;
		Load_$C8D87EB0090687D323381DFB7A82089C(false);
		pointer++;
	}
}

void Load_$C8D87EB0090687D323381DFB7A82089CPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, var$C8D87EB0090687D323381DFB7A82089C, sizeof($C8D87EB0090687D323381DFB7A82089C));
	if (*var$C8D87EB0090687D323381DFB7A82089CPtr != nullptr)
	{
		if (*var$C8D87EB0090687D323381DFB7A82089CPtr == ($C8D87EB0090687D323381DFB7A82089C*)0xFFFFFFFF)
		{
			*var$C8D87EB0090687D323381DFB7A82089CPtr = AllocLoad_$C8D87EB0090687D323381DFB7A82089C();
			var$C8D87EB0090687D323381DFB7A82089C = *var$C8D87EB0090687D323381DFB7A82089CPtr;
			Load_$C8D87EB0090687D323381DFB7A82089C(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)var$C8D87EB0090687D323381DFB7A82089CPtr);
		}
	}
}

void Load_$C8D87EB0090687D323381DFB7A82089CPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, var$C8D87EB0090687D323381DFB7A82089CPtr, sizeof($C8D87EB0090687D323381DFB7A82089C*) * count);
	$C8D87EB0090687D323381DFB7A82089C** pointer = var$C8D87EB0090687D323381DFB7A82089CPtr;
	for (int i = 0; i < count; i++)
	{
		var$C8D87EB0090687D323381DFB7A82089CPtr = pointer;
		Load_$C8D87EB0090687D323381DFB7A82089CPtr(false);
		pointer++;
	}
}

void Load_$E43DBA5037697D705289B74D87E76C70(bool atStreamStart)
{
	Load_Stream(atStreamStart, var$E43DBA5037697D705289B74D87E76C70, sizeof($E43DBA5037697D705289B74D87E76C70));

	varFxSpatialFrame = &var$E43DBA5037697D705289B74D87E76C70->frame;
	Load_FxSpatialFrame(false);

}

void Load_$E43DBA5037697D705289B74D87E76C70Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, var$E43DBA5037697D705289B74D87E76C70, sizeof($E43DBA5037697D705289B74D87E76C70) * count);
	$E43DBA5037697D705289B74D87E76C70* pointer = var$E43DBA5037697D705289B74D87E76C70;
	for (int i = 0; i < count; i++)
	{
		var$E43DBA5037697D705289B74D87E76C70 = pointer;
		Load_$E43DBA5037697D705289B74D87E76C70(false);
		pointer++;
	}
}

void Load_$E43DBA5037697D705289B74D87E76C70Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, var$E43DBA5037697D705289B74D87E76C70, sizeof($E43DBA5037697D705289B74D87E76C70));
	if (*var$E43DBA5037697D705289B74D87E76C70Ptr != nullptr)
	{
		if (*var$E43DBA5037697D705289B74D87E76C70Ptr == ($E43DBA5037697D705289B74D87E76C70*)0xFFFFFFFF)
		{
			*var$E43DBA5037697D705289B74D87E76C70Ptr = AllocLoad_$E43DBA5037697D705289B74D87E76C70();
			var$E43DBA5037697D705289B74D87E76C70 = *var$E43DBA5037697D705289B74D87E76C70Ptr;
			Load_$E43DBA5037697D705289B74D87E76C70(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)var$E43DBA5037697D705289B74D87E76C70Ptr);
		}
	}
}

void Load_$E43DBA5037697D705289B74D87E76C70PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, var$E43DBA5037697D705289B74D87E76C70Ptr, sizeof($E43DBA5037697D705289B74D87E76C70*) * count);
	$E43DBA5037697D705289B74D87E76C70** pointer = var$E43DBA5037697D705289B74D87E76C70Ptr;
	for (int i = 0; i < count; i++)
	{
		var$E43DBA5037697D705289B74D87E76C70Ptr = pointer;
		Load_$E43DBA5037697D705289B74D87E76C70Ptr(false);
		pointer++;
	}
}

void Load_Bounds(bool atStreamStart)
{
	Load_Stream(atStreamStart, varBounds, sizeof(Bounds));

}

void Load_BoundsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varBounds, sizeof(Bounds) * count);
	Bounds* pointer = varBounds;
	for (int i = 0; i < count; i++)
	{
		varBounds = pointer;
		Load_Bounds(false);
		pointer++;
	}
}

void Load_BoundsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varBounds, sizeof(Bounds));
	if (*varBoundsPtr != nullptr)
	{
		if (*varBoundsPtr == (Bounds*)0xFFFFFFFF)
		{
			*varBoundsPtr = AllocLoad_Bounds();
			varBounds = *varBoundsPtr;
			Load_Bounds(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varBoundsPtr);
		}
	}
}

void Load_BoundsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varBoundsPtr, sizeof(Bounds*) * count);
	Bounds** pointer = varBoundsPtr;
	for (int i = 0; i < count; i++)
	{
		varBoundsPtr = pointer;
		Load_BoundsPtr(false);
		pointer++;
	}
}

void Load_BrushWrapper(bool atStreamStart)
{
	Load_Stream(atStreamStart, varBrushWrapper, sizeof(BrushWrapper));

	varBounds = &varBrushWrapper->bounds;
	Load_Bounds(false);

	varcbrush_t = &varBrushWrapper->brush;
	Load_cbrush_t(false);

	if (varBrushWrapper->planes)
	{
		varcplane_sPtr = &varBrushWrapper->planes;
		Load_cplane_sPtr(false);
	}

}

void Load_BrushWrapperArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varBrushWrapper, sizeof(BrushWrapper) * count);
	BrushWrapper* pointer = varBrushWrapper;
	for (int i = 0; i < count; i++)
	{
		varBrushWrapper = pointer;
		Load_BrushWrapper(false);
		pointer++;
	}
}

void Load_BrushWrapperPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varBrushWrapper, sizeof(BrushWrapper));
	if (*varBrushWrapperPtr != nullptr)
	{
		if (*varBrushWrapperPtr == (BrushWrapper*)0xFFFFFFFF)
		{
			*varBrushWrapperPtr = AllocLoad_BrushWrapper();
			varBrushWrapper = *varBrushWrapperPtr;
			Load_BrushWrapper(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varBrushWrapperPtr);
		}
	}
}

void Load_BrushWrapperPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varBrushWrapperPtr, sizeof(BrushWrapper*) * count);
	BrushWrapper** pointer = varBrushWrapperPtr;
	for (int i = 0; i < count; i++)
	{
		varBrushWrapperPtr = pointer;
		Load_BrushWrapperPtr(false);
		pointer++;
	}
}

void Load_CardMemory(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCardMemory, sizeof(CardMemory));

}

void Load_CardMemoryArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCardMemory, sizeof(CardMemory) * count);
	CardMemory* pointer = varCardMemory;
	for (int i = 0; i < count; i++)
	{
		varCardMemory = pointer;
		Load_CardMemory(false);
		pointer++;
	}
}

void Load_CardMemoryPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCardMemory, sizeof(CardMemory));
	if (*varCardMemoryPtr != nullptr)
	{
		*varCardMemoryPtr = AllocLoad_CardMemory();
		varCardMemory = *varCardMemoryPtr;
		Load_CardMemory(true);
	}
}

void Load_CardMemoryPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCardMemoryPtr, sizeof(CardMemory*) * count);
	CardMemory** pointer = varCardMemoryPtr;
	for (int i = 0; i < count; i++)
	{
		varCardMemoryPtr = pointer;
		Load_CardMemoryPtr(false);
		pointer++;
	}
}

void Load_ClipMaterial(bool atStreamStart)
{
	Load_Stream(atStreamStart, varClipMaterial, sizeof(ClipMaterial));

	varXString = &varClipMaterial->name;
	Load_XString(false);

}

void Load_ClipMaterialArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varClipMaterial, sizeof(ClipMaterial) * count);
	ClipMaterial* pointer = varClipMaterial;
	for (int i = 0; i < count; i++)
	{
		varClipMaterial = pointer;
		Load_ClipMaterial(false);
		pointer++;
	}
}

void Load_ClipMaterialPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varClipMaterial, sizeof(ClipMaterial));
	if (*varClipMaterialPtr != nullptr)
	{
		if (*varClipMaterialPtr == (ClipMaterial*)0xFFFFFFFF)
		{
			*varClipMaterialPtr = AllocLoad_ClipMaterial();
			varClipMaterial = *varClipMaterialPtr;
			Load_ClipMaterial(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varClipMaterialPtr);
		}
	}
}

void Load_ClipMaterialPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varClipMaterialPtr, sizeof(ClipMaterial*) * count);
	ClipMaterial** pointer = varClipMaterialPtr;
	for (int i = 0; i < count; i++)
	{
		varClipMaterialPtr = pointer;
		Load_ClipMaterialPtr(false);
		pointer++;
	}
}

void Load_CollisionAabbTree(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCollisionAabbTree, sizeof(CollisionAabbTree));

	varCollisionAabbTreeIndex = &varCollisionAabbTree->u;
	Load_CollisionAabbTreeIndex(false);

}

void Load_CollisionAabbTreeArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCollisionAabbTree, sizeof(CollisionAabbTree) * count);
	CollisionAabbTree* pointer = varCollisionAabbTree;
	for (int i = 0; i < count; i++)
	{
		varCollisionAabbTree = pointer;
		Load_CollisionAabbTree(false);
		pointer++;
	}
}

void Load_CollisionAabbTreeIndex(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCollisionAabbTreeIndex, sizeof(CollisionAabbTreeIndex));

}

void Load_CollisionAabbTreeIndexArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCollisionAabbTreeIndex, sizeof(CollisionAabbTreeIndex) * count);
	CollisionAabbTreeIndex* pointer = varCollisionAabbTreeIndex;
	for (int i = 0; i < count; i++)
	{
		varCollisionAabbTreeIndex = pointer;
		Load_CollisionAabbTreeIndex(false);
		pointer++;
	}
}

void Load_CollisionAabbTreeIndexPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCollisionAabbTreeIndex, sizeof(CollisionAabbTreeIndex));
	if (*varCollisionAabbTreeIndexPtr != nullptr)
	{
		if (*varCollisionAabbTreeIndexPtr == (CollisionAabbTreeIndex*)0xFFFFFFFF)
		{
			*varCollisionAabbTreeIndexPtr = AllocLoad_CollisionAabbTreeIndex();
			varCollisionAabbTreeIndex = *varCollisionAabbTreeIndexPtr;
			Load_CollisionAabbTreeIndex(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varCollisionAabbTreeIndexPtr);
		}
	}
}

void Load_CollisionAabbTreeIndexPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCollisionAabbTreeIndexPtr, sizeof(CollisionAabbTreeIndex*) * count);
	CollisionAabbTreeIndex** pointer = varCollisionAabbTreeIndexPtr;
	for (int i = 0; i < count; i++)
	{
		varCollisionAabbTreeIndexPtr = pointer;
		Load_CollisionAabbTreeIndexPtr(false);
		pointer++;
	}
}

void Load_CollisionAabbTreePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCollisionAabbTree, sizeof(CollisionAabbTree));
	if (*varCollisionAabbTreePtr != nullptr)
	{
		if (*varCollisionAabbTreePtr == (CollisionAabbTree*)0xFFFFFFFF)
		{
			*varCollisionAabbTreePtr = AllocLoad_CollisionAabbTree();
			varCollisionAabbTree = *varCollisionAabbTreePtr;
			Load_CollisionAabbTree(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varCollisionAabbTreePtr);
		}
	}
}

void Load_CollisionAabbTreePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCollisionAabbTreePtr, sizeof(CollisionAabbTree*) * count);
	CollisionAabbTree** pointer = varCollisionAabbTreePtr;
	for (int i = 0; i < count; i++)
	{
		varCollisionAabbTreePtr = pointer;
		Load_CollisionAabbTreePtr(false);
		pointer++;
	}
}

void Load_CollisionBorder(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCollisionBorder, sizeof(CollisionBorder));

}

void Load_CollisionBorderArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCollisionBorder, sizeof(CollisionBorder) * count);
	CollisionBorder* pointer = varCollisionBorder;
	for (int i = 0; i < count; i++)
	{
		varCollisionBorder = pointer;
		Load_CollisionBorder(false);
		pointer++;
	}
}

void Load_CollisionBorderPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCollisionBorder, sizeof(CollisionBorder));
	if (*varCollisionBorderPtr != nullptr)
	{
		if (*varCollisionBorderPtr == (CollisionBorder*)0xFFFFFFFF)
		{
			*varCollisionBorderPtr = AllocLoad_CollisionBorder();
			varCollisionBorder = *varCollisionBorderPtr;
			Load_CollisionBorder(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varCollisionBorderPtr);
		}
	}
}

void Load_CollisionBorderPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCollisionBorderPtr, sizeof(CollisionBorder*) * count);
	CollisionBorder** pointer = varCollisionBorderPtr;
	for (int i = 0; i < count; i++)
	{
		varCollisionBorderPtr = pointer;
		Load_CollisionBorderPtr(false);
		pointer++;
	}
}

void Load_CollisionPartition(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCollisionPartition, sizeof(CollisionPartition));

	if (varCollisionPartition->borders)
	{
		if (varCollisionPartition->borders == (CollisionBorder*)0xFFFFFFFF)
		{
			varCollisionPartition->borders = AllocLoad_CollisionBorder();
			varCollisionBorder = varCollisionPartition->borders;
			Load_CollisionBorderArray(true, (varCollisionPartition->borderCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varCollisionPartition->borders);
		}
	}

}

void Load_CollisionPartitionArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCollisionPartition, sizeof(CollisionPartition) * count);
	CollisionPartition* pointer = varCollisionPartition;
	for (int i = 0; i < count; i++)
	{
		varCollisionPartition = pointer;
		Load_CollisionPartition(false);
		pointer++;
	}
}

void Load_CollisionPartitionPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varCollisionPartition, sizeof(CollisionPartition));
	if (*varCollisionPartitionPtr != nullptr)
	{
		if (*varCollisionPartitionPtr == (CollisionPartition*)0xFFFFFFFF)
		{
			*varCollisionPartitionPtr = AllocLoad_CollisionPartition();
			varCollisionPartition = *varCollisionPartitionPtr;
			Load_CollisionPartition(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varCollisionPartitionPtr);
		}
	}
}

void Load_CollisionPartitionPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varCollisionPartitionPtr, sizeof(CollisionPartition*) * count);
	CollisionPartition** pointer = varCollisionPartitionPtr;
	for (int i = 0; i < count; i++)
	{
		varCollisionPartitionPtr = pointer;
		Load_CollisionPartitionPtr(false);
		pointer++;
	}
}

void Load_ComPrimaryLight(bool atStreamStart)
{
	Load_Stream(atStreamStart, varComPrimaryLight, sizeof(ComPrimaryLight));

	varXString = &varComPrimaryLight->defName;
	Load_XString(false);

}

void Load_ComPrimaryLightArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varComPrimaryLight, sizeof(ComPrimaryLight) * count);
	ComPrimaryLight* pointer = varComPrimaryLight;
	for (int i = 0; i < count; i++)
	{
		varComPrimaryLight = pointer;
		Load_ComPrimaryLight(false);
		pointer++;
	}
}

void Load_ComPrimaryLightPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varComPrimaryLight, sizeof(ComPrimaryLight));
	if (*varComPrimaryLightPtr != nullptr)
	{
		if (*varComPrimaryLightPtr == (ComPrimaryLight*)0xFFFFFFFF)
		{
			*varComPrimaryLightPtr = AllocLoad_ComPrimaryLight();
			varComPrimaryLight = *varComPrimaryLightPtr;
			Load_ComPrimaryLight(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varComPrimaryLightPtr);
		}
	}
}

void Load_ComPrimaryLightPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varComPrimaryLightPtr, sizeof(ComPrimaryLight*) * count);
	ComPrimaryLight** pointer = varComPrimaryLightPtr;
	for (int i = 0; i < count; i++)
	{
		varComPrimaryLightPtr = pointer;
		Load_ComPrimaryLightPtr(false);
		pointer++;
	}
}

void Load_ComWorld(bool atStreamStart)
{
	Load_Stream(atStreamStart, varComWorld, sizeof(ComWorld));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varComWorld->name;
	Load_XString(false);

	if (varComWorld->primaryLights)
	{
		if (varComWorld->primaryLights == (ComPrimaryLight*)0xFFFFFFFF)
		{
			varComWorld->primaryLights = AllocLoad_ComPrimaryLight();
			varComPrimaryLight = varComWorld->primaryLights;
			Load_ComPrimaryLightArray(true, (varComWorld->primaryLightCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varComWorld->primaryLights);
		}
	}

	DB_PopStreamPos();
}

void Load_ComWorldArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varComWorld, sizeof(ComWorld) * count);
	ComWorld* pointer = varComWorld;
	for (int i = 0; i < count; i++)
	{
		varComWorld = pointer;
		Load_ComWorld(false);
		pointer++;
	}
}

void Load_ComWorldAsset(ComWorld** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_COMWORLD, (void**)varComWorldPtr);
}

void Load_ComWorldPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varComWorld, sizeof(ComWorld*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	ComWorld* pointer = *varComWorldPtr;
	if (*varComWorldPtr != nullptr)
	{
		if (*varComWorldPtr == (ComWorld*)0xFFFFFFFF || *varComWorldPtr == (ComWorld*)0xFFFFFFFE)
		{
			*varComWorldPtr = AllocLoad_ComWorld();
			varComWorld = *varComWorldPtr;
			ComWorld** insertedPointer = nullptr;
			if (pointer == (ComWorld*)0xFFFFFFFE)
			{
				insertedPointer = (ComWorld**)DB_InsertPointer();
			}
			Load_ComWorld(true);
			Load_ComWorldAsset(varComWorldPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varComWorldPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varComWorldPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_ComWorldPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varComWorldPtr, sizeof(ComWorld*) * count);
	ComWorld** pointer = varComWorldPtr;
	for (int i = 0; i < count; i++)
	{
		varComWorldPtr = pointer;
		Load_ComWorldPtr(false);
		pointer++;
	}
}

void Load_ConditionalScript(bool atStreamStart)
{
	Load_Stream(atStreamStart, varConditionalScript, sizeof(ConditionalScript));

	if (varConditionalScript->eventExpression)
	{
		varStatement_sPtr = &varConditionalScript->eventExpression;
		Load_Statement_sPtr(false);
	}

	if (varConditionalScript->eventHandlerSet)
	{
		varMenuEventHandlerSetPtr = &varConditionalScript->eventHandlerSet;
		Load_MenuEventHandlerSetPtr(false);
	}

}

void Load_ConditionalScriptArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varConditionalScript, sizeof(ConditionalScript) * count);
	ConditionalScript* pointer = varConditionalScript;
	for (int i = 0; i < count; i++)
	{
		varConditionalScript = pointer;
		Load_ConditionalScript(false);
		pointer++;
	}
}

void Load_ConditionalScriptPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varConditionalScript, sizeof(ConditionalScript));
	if (*varConditionalScriptPtr != nullptr)
	{
		if (*varConditionalScriptPtr == (ConditionalScript*)0xFFFFFFFF)
		{
			*varConditionalScriptPtr = AllocLoad_ConditionalScript();
			varConditionalScript = *varConditionalScriptPtr;
			Load_ConditionalScript(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varConditionalScriptPtr);
		}
	}
}

void Load_ConditionalScriptPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varConditionalScriptPtr, sizeof(ConditionalScript*) * count);
	ConditionalScript** pointer = varConditionalScriptPtr;
	for (int i = 0; i < count; i++)
	{
		varConditionalScriptPtr = pointer;
		Load_ConditionalScriptPtr(false);
		pointer++;
	}
}

void Load_DObjAnimMat(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDObjAnimMat, sizeof(DObjAnimMat));

}

void Load_DObjAnimMatArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDObjAnimMat, sizeof(DObjAnimMat) * count);
	DObjAnimMat* pointer = varDObjAnimMat;
	for (int i = 0; i < count; i++)
	{
		varDObjAnimMat = pointer;
		Load_DObjAnimMat(false);
		pointer++;
	}
}

void Load_DObjAnimMatPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDObjAnimMat, sizeof(DObjAnimMat));
	if (*varDObjAnimMatPtr != nullptr)
	{
		if (*varDObjAnimMatPtr == (DObjAnimMat*)0xFFFFFFFF)
		{
			*varDObjAnimMatPtr = AllocLoad_DObjAnimMat();
			varDObjAnimMat = *varDObjAnimMatPtr;
			Load_DObjAnimMat(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varDObjAnimMatPtr);
		}
	}
}

void Load_DObjAnimMatPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDObjAnimMatPtr, sizeof(DObjAnimMat*) * count);
	DObjAnimMat** pointer = varDObjAnimMatPtr;
	for (int i = 0; i < count; i++)
	{
		varDObjAnimMatPtr = pointer;
		Load_DObjAnimMatPtr(false);
		pointer++;
	}
}

void Load_DynEntityClient(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDynEntityClient, sizeof(DynEntityClient));

}

void Load_DynEntityClientArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDynEntityClient, sizeof(DynEntityClient) * count);
	DynEntityClient* pointer = varDynEntityClient;
	for (int i = 0; i < count; i++)
	{
		varDynEntityClient = pointer;
		Load_DynEntityClient(false);
		pointer++;
	}
}

void Load_DynEntityClientPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDynEntityClient, sizeof(DynEntityClient));
	if (*varDynEntityClientPtr != nullptr)
	{
		if (*varDynEntityClientPtr == (DynEntityClient*)0xFFFFFFFF)
		{
			*varDynEntityClientPtr = AllocLoad_DynEntityClient();
			varDynEntityClient = *varDynEntityClientPtr;
			Load_DynEntityClient(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varDynEntityClientPtr);
		}
	}
}

void Load_DynEntityClientPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDynEntityClientPtr, sizeof(DynEntityClient*) * count);
	DynEntityClient** pointer = varDynEntityClientPtr;
	for (int i = 0; i < count; i++)
	{
		varDynEntityClientPtr = pointer;
		Load_DynEntityClientPtr(false);
		pointer++;
	}
}

void Load_DynEntityColl(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDynEntityColl, sizeof(DynEntityColl));

}

void Load_DynEntityCollArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDynEntityColl, sizeof(DynEntityColl) * count);
	DynEntityColl* pointer = varDynEntityColl;
	for (int i = 0; i < count; i++)
	{
		varDynEntityColl = pointer;
		Load_DynEntityColl(false);
		pointer++;
	}
}

void Load_DynEntityCollPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDynEntityColl, sizeof(DynEntityColl));
	if (*varDynEntityCollPtr != nullptr)
	{
		if (*varDynEntityCollPtr == (DynEntityColl*)0xFFFFFFFF)
		{
			*varDynEntityCollPtr = AllocLoad_DynEntityColl();
			varDynEntityColl = *varDynEntityCollPtr;
			Load_DynEntityColl(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varDynEntityCollPtr);
		}
	}
}

void Load_DynEntityCollPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDynEntityCollPtr, sizeof(DynEntityColl*) * count);
	DynEntityColl** pointer = varDynEntityCollPtr;
	for (int i = 0; i < count; i++)
	{
		varDynEntityCollPtr = pointer;
		Load_DynEntityCollPtr(false);
		pointer++;
	}
}

void Load_DynEntityDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDynEntityDef, sizeof(DynEntityDef));

	varGfxPlacement = &varDynEntityDef->pose;
	Load_GfxPlacement(false);

	varXModelPtr = &varDynEntityDef->xModel;
	Load_XModelPtr(false);

	varFxEffectDefPtr = &varDynEntityDef->destroyFx;
	Load_FxEffectDefPtr(false);

	varPhysPresetPtr = &varDynEntityDef->physPreset;
	Load_PhysPresetPtr(false);

	varPhysMass = &varDynEntityDef->mass;
	Load_PhysMass(false);

}

void Load_DynEntityDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDynEntityDef, sizeof(DynEntityDef) * count);
	DynEntityDef* pointer = varDynEntityDef;
	for (int i = 0; i < count; i++)
	{
		varDynEntityDef = pointer;
		Load_DynEntityDef(false);
		pointer++;
	}
}

void Load_DynEntityDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDynEntityDef, sizeof(DynEntityDef));
	if (*varDynEntityDefPtr != nullptr)
	{
		if (*varDynEntityDefPtr == (DynEntityDef*)0xFFFFFFFF)
		{
			*varDynEntityDefPtr = AllocLoad_DynEntityDef();
			varDynEntityDef = *varDynEntityDefPtr;
			Load_DynEntityDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varDynEntityDefPtr);
		}
	}
}

void Load_DynEntityDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDynEntityDefPtr, sizeof(DynEntityDef*) * count);
	DynEntityDef** pointer = varDynEntityDefPtr;
	for (int i = 0; i < count; i++)
	{
		varDynEntityDefPtr = pointer;
		Load_DynEntityDefPtr(false);
		pointer++;
	}
}

void Load_DynEntityPose(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDynEntityPose, sizeof(DynEntityPose));

	varGfxPlacement = &varDynEntityPose->pose;
	Load_GfxPlacement(false);

}

void Load_DynEntityPoseArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDynEntityPose, sizeof(DynEntityPose) * count);
	DynEntityPose* pointer = varDynEntityPose;
	for (int i = 0; i < count; i++)
	{
		varDynEntityPose = pointer;
		Load_DynEntityPose(false);
		pointer++;
	}
}

void Load_DynEntityPosePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varDynEntityPose, sizeof(DynEntityPose));
	if (*varDynEntityPosePtr != nullptr)
	{
		if (*varDynEntityPosePtr == (DynEntityPose*)0xFFFFFFFF)
		{
			*varDynEntityPosePtr = AllocLoad_DynEntityPose();
			varDynEntityPose = *varDynEntityPosePtr;
			Load_DynEntityPose(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varDynEntityPosePtr);
		}
	}
}

void Load_DynEntityPosePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varDynEntityPosePtr, sizeof(DynEntityPose*) * count);
	DynEntityPose** pointer = varDynEntityPosePtr;
	for (int i = 0; i < count; i++)
	{
		varDynEntityPosePtr = pointer;
		Load_DynEntityPosePtr(false);
		pointer++;
	}
}

void Load_EventData(bool atStreamStart)
{
	Load_Stream(atStreamStart, varEventData, sizeof(EventData));

	switch (varMenuEventHandler->eventType)
	{
	case 0:
		varXString = &varEventData->unconditionalScript;
		Load_XString(atStreamStart);
		break;
	case 1:
		varConditionalScriptPtr = &varEventData->conditionalScript;
		Load_ConditionalScriptPtr(false);
		break;
	case 2:
		varMenuEventHandlerSetPtr = &varEventData->elseScript;
		Load_MenuEventHandlerSetPtr(false);
		break;
	case 3:
	case 4:
	case 5:
	case 6:
		varSetLocalVarDataPtr = &varEventData->setLocalVarData;
		Load_SetLocalVarDataPtr(false);
		break;
	}
}

void Load_EventDataArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varEventData, sizeof(EventData) * count);
	EventData* pointer = varEventData;
	for (int i = 0; i < count; i++)
	{
		varEventData = pointer;
		Load_EventData(false);
		pointer++;
	}
}

void Load_EventDataPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varEventData, sizeof(EventData));
	if (*varEventDataPtr != nullptr)
	{
		if (*varEventDataPtr == (EventData*)0xFFFFFFFF)
		{
			*varEventDataPtr = AllocLoad_EventData();
			varEventData = *varEventDataPtr;
			Load_EventData(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varEventDataPtr);
		}
	}
}

void Load_EventDataPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varEventDataPtr, sizeof(EventData*) * count);
	EventData** pointer = varEventDataPtr;
	for (int i = 0; i < count; i++)
	{
		varEventDataPtr = pointer;
		Load_EventDataPtr(false);
		pointer++;
	}
}

void Load_ExpressionString(bool atStreamStart)
{
	Load_Stream(atStreamStart, varExpressionString, sizeof(ExpressionString));

	varXString = &varExpressionString->string;
	Load_XString(false);

}

void Load_ExpressionStringArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varExpressionString, sizeof(ExpressionString) * count);
	ExpressionString* pointer = varExpressionString;
	for (int i = 0; i < count; i++)
	{
		varExpressionString = pointer;
		Load_ExpressionString(false);
		pointer++;
	}
}

void Load_ExpressionStringPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varExpressionString, sizeof(ExpressionString));
	if (*varExpressionStringPtr != nullptr)
	{
		*varExpressionStringPtr = AllocLoad_ExpressionString();
		varExpressionString = *varExpressionStringPtr;
		Load_ExpressionString(true);
	}
}

void Load_ExpressionStringPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varExpressionStringPtr, sizeof(ExpressionString*) * count);
	ExpressionString** pointer = varExpressionStringPtr;
	for (int i = 0; i < count; i++)
	{
		varExpressionStringPtr = pointer;
		Load_ExpressionStringPtr(false);
		pointer++;
	}
}

void Load_ExpressionSupportingData(bool atStreamStart)
{
	Load_Stream(atStreamStart, varExpressionSupportingData, sizeof(ExpressionSupportingData));

	varUIFunctionList = &varExpressionSupportingData->uifunctions;
	Load_UIFunctionList(false);

	varStaticDvarList = &varExpressionSupportingData->staticDvarList;
	Load_StaticDvarList(false);

	varStringList = &varExpressionSupportingData->uiStrings;
	Load_StringList(false);

}

void Load_ExpressionSupportingDataArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varExpressionSupportingData, sizeof(ExpressionSupportingData) * count);
	ExpressionSupportingData* pointer = varExpressionSupportingData;
	for (int i = 0; i < count; i++)
	{
		varExpressionSupportingData = pointer;
		Load_ExpressionSupportingData(false);
		pointer++;
	}
}

void Load_ExpressionSupportingDataPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varExpressionSupportingData, sizeof(ExpressionSupportingData));
	if (*varExpressionSupportingDataPtr != nullptr)
	{
		if (*varExpressionSupportingDataPtr == (ExpressionSupportingData*)0xFFFFFFFF)
		{
			*varExpressionSupportingDataPtr = AllocLoad_ExpressionSupportingData();
			varExpressionSupportingData = *varExpressionSupportingDataPtr;
			Load_ExpressionSupportingData(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varExpressionSupportingDataPtr);
		}
	}
}

void Load_ExpressionSupportingDataPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varExpressionSupportingDataPtr, sizeof(ExpressionSupportingData*) * count);
	ExpressionSupportingData** pointer = varExpressionSupportingDataPtr;
	for (int i = 0; i < count; i++)
	{
		varExpressionSupportingDataPtr = pointer;
		Load_ExpressionSupportingDataPtr(false);
		pointer++;
	}
}

void Load_Font_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFont_s, sizeof(Font_s));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varFont_s->fontName;
	Load_XString(false);

	varMaterialPtr = &varFont_s->material;
	Load_MaterialPtr(false);

	varMaterialPtr = &varFont_s->glowMaterial;
	Load_MaterialPtr(false);

	if (varFont_s->glyphs)
	{
		if (varFont_s->glyphs == (Glyph*)0xFFFFFFFF)
		{
			varFont_s->glyphs = AllocLoad_Glyph();
			varGlyph = varFont_s->glyphs;
			Load_GlyphArray(true, (varFont_s->glyphCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFont_s->glyphs);
		}
	}

	DB_PopStreamPos();
}

void Load_Font_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFont_s, sizeof(Font_s) * count);
	Font_s* pointer = varFont_s;
	for (int i = 0; i < count; i++)
	{
		varFont_s = pointer;
		Load_Font_s(false);
		pointer++;
	}
}

void Load_Font_sAsset(Font_s** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_FONT, (void**)varFont_sPtr);
}

void Load_Font_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFont_s, sizeof(Font_s*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	Font_s* pointer = *varFont_sPtr;
	if (*varFont_sPtr != nullptr)
	{
		if (*varFont_sPtr == (Font_s*)0xFFFFFFFF || *varFont_sPtr == (Font_s*)0xFFFFFFFE)
		{
			*varFont_sPtr = AllocLoad_Font_s();
			varFont_s = *varFont_sPtr;
			Font_s** insertedPointer = nullptr;
			if (pointer == (Font_s*)0xFFFFFFFE)
			{
				insertedPointer = (Font_s**)DB_InsertPointer();
			}
			Load_Font_s(true);
			Load_Font_sAsset(varFont_sPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varFont_sPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varFont_sPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_Font_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFont_sPtr, sizeof(Font_s*) * count);
	Font_s** pointer = varFont_sPtr;
	for (int i = 0; i < count; i++)
	{
		varFont_sPtr = pointer;
		Load_Font_sPtr(false);
		pointer++;
	}
}

void Load_FxEffectDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxEffectDef, sizeof(FxEffectDef));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varFxEffectDef->name;
	Load_XString(false);

	if (varFxEffectDef->elemDefs)
	{
		if (varFxEffectDef->elemDefs == (FxElemDef*)0xFFFFFFFF)
		{
			varFxEffectDef->elemDefs = AllocLoad_FxElemDef();
			varFxElemDef = varFxEffectDef->elemDefs;
			Load_FxElemDefArray(true, (varFxEffectDef->elemDefCountLooping + varFxEffectDef->elemDefCountOneShot + varFxEffectDef->elemDefCountEmission));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxEffectDef->elemDefs);
		}
	}

	DB_PopStreamPos();
}

void Load_FxEffectDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxEffectDef, sizeof(FxEffectDef) * count);
	FxEffectDef* pointer = varFxEffectDef;
	for (int i = 0; i < count; i++)
	{
		varFxEffectDef = pointer;
		Load_FxEffectDef(false);
		pointer++;
	}
}

void Load_FxEffectDefAsset(FxEffectDef** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_FX, (void**)varFxEffectDefPtr);
}

void Load_FxEffectDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxEffectDef, sizeof(FxEffectDef*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	FxEffectDef* pointer = *varFxEffectDefPtr;
	if (*varFxEffectDefPtr != nullptr)
	{
		if (*varFxEffectDefPtr == (FxEffectDef*)0xFFFFFFFF || *varFxEffectDefPtr == (FxEffectDef*)0xFFFFFFFE)
		{
			*varFxEffectDefPtr = AllocLoad_FxEffectDef();
			varFxEffectDef = *varFxEffectDefPtr;
			FxEffectDef** insertedPointer = nullptr;
			if (pointer == (FxEffectDef*)0xFFFFFFFE)
			{
				insertedPointer = (FxEffectDef**)DB_InsertPointer();
			}
			Load_FxEffectDef(true);
			Load_FxEffectDefAsset(varFxEffectDefPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varFxEffectDefPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varFxEffectDefPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_FxEffectDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxEffectDefPtr, sizeof(FxEffectDef*) * count);
	FxEffectDef** pointer = varFxEffectDefPtr;
	for (int i = 0; i < count; i++)
	{
		varFxEffectDefPtr = pointer;
		Load_FxEffectDefPtr(false);
		pointer++;
	}
}

void Load_FxEffectDefRef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxEffectDefRef, sizeof(FxEffectDefRef));

	varXString = &varFxEffectDefRef->name;
	Load_XString(false);

}

void Load_FxEffectDefRefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxEffectDefRef, sizeof(FxEffectDefRef) * count);
	FxEffectDefRef* pointer = varFxEffectDefRef;
	for (int i = 0; i < count; i++)
	{
		varFxEffectDefRef = pointer;
		Load_FxEffectDefRef(false);
		pointer++;
	}
}

void Load_FxEffectDefRefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxEffectDefRef, sizeof(FxEffectDefRef));
	if (*varFxEffectDefRefPtr != nullptr)
	{
		*varFxEffectDefRefPtr = AllocLoad_FxEffectDefRef();
		varFxEffectDefRef = *varFxEffectDefRefPtr;
		Load_FxEffectDefRef(true);
	}
}

void Load_FxEffectDefRefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxEffectDefRefPtr, sizeof(FxEffectDefRef*) * count);
	FxEffectDefRef** pointer = varFxEffectDefRefPtr;
	for (int i = 0; i < count; i++)
	{
		varFxEffectDefRefPtr = pointer;
		Load_FxEffectDefRefPtr(false);
		pointer++;
	}
}

void Load_FxElemAtlas(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemAtlas, sizeof(FxElemAtlas));

}

void Load_FxElemAtlasArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemAtlas, sizeof(FxElemAtlas) * count);
	FxElemAtlas* pointer = varFxElemAtlas;
	for (int i = 0; i < count; i++)
	{
		varFxElemAtlas = pointer;
		Load_FxElemAtlas(false);
		pointer++;
	}
}

void Load_FxElemAtlasPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemAtlas, sizeof(FxElemAtlas));
	if (*varFxElemAtlasPtr != nullptr)
	{
		if (*varFxElemAtlasPtr == (FxElemAtlas*)0xFFFFFFFF)
		{
			*varFxElemAtlasPtr = AllocLoad_FxElemAtlas();
			varFxElemAtlas = *varFxElemAtlasPtr;
			Load_FxElemAtlas(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemAtlasPtr);
		}
	}
}

void Load_FxElemAtlasPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemAtlasPtr, sizeof(FxElemAtlas*) * count);
	FxElemAtlas** pointer = varFxElemAtlasPtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemAtlasPtr = pointer;
		Load_FxElemAtlasPtr(false);
		pointer++;
	}
}

void Load_FxElemDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemDef, sizeof(FxElemDef));

	varFxSpawnDef = &varFxElemDef->spawn;
	Load_FxSpawnDef(false);

	varFxFloatRange = &varFxElemDef->spawnRange;
	Load_FxFloatRange(false);

	varFxFloatRange = &varFxElemDef->fadeInRange;
	Load_FxFloatRange(false);

	varFxFloatRange = &varFxElemDef->fadeOutRange;
	Load_FxFloatRange(false);

	varFxIntRange = &varFxElemDef->spawnDelayMsec;
	Load_FxIntRange(false);

	varFxIntRange = &varFxElemDef->lifeSpanMsec;
	Load_FxIntRange(false);

	varFxFloatRange = varFxElemDef->spawnOrigin;
	Load_FxFloatRangeArray(false, 3);

	varFxFloatRange = &varFxElemDef->spawnOffsetRadius;
	Load_FxFloatRange(false);

	varFxFloatRange = &varFxElemDef->spawnOffsetHeight;
	Load_FxFloatRange(false);

	varFxFloatRange = varFxElemDef->spawnAngles;
	Load_FxFloatRangeArray(false, 3);

	varFxFloatRange = varFxElemDef->angularVelocity;
	Load_FxFloatRangeArray(false, 3);

	varFxFloatRange = &varFxElemDef->initialRotation;
	Load_FxFloatRange(false);

	varFxFloatRange = &varFxElemDef->gravity;
	Load_FxFloatRange(false);

	varFxFloatRange = &varFxElemDef->reflectionFactor;
	Load_FxFloatRange(false);

	varFxElemAtlas = &varFxElemDef->atlas;
	Load_FxElemAtlas(false);

	if (varFxElemDef->velSamples)
	{
		if (varFxElemDef->velSamples == (FxElemVelStateSample*)0xFFFFFFFF)
		{
			varFxElemDef->velSamples = AllocLoad_FxElemVelStateSample();
			varFxElemVelStateSample = varFxElemDef->velSamples;
			Load_FxElemVelStateSampleArray(true, (varFxElemDef->velIntervalCount + 1));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxElemDef->velSamples);
		}
	}

	if (varFxElemDef->visSamples)
	{
		if (varFxElemDef->visSamples == (FxElemVisStateSample*)0xFFFFFFFF)
		{
			varFxElemDef->visSamples = AllocLoad_FxElemVisStateSample();
			varFxElemVisStateSample = varFxElemDef->visSamples;
			Load_FxElemVisStateSampleArray(true, (varFxElemDef->visStateIntervalCount + 1));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxElemDef->visSamples);
		}
	}

	varFxElemDefVisuals = &varFxElemDef->visuals;
	Load_FxElemDefVisuals(false);

	varBounds = &varFxElemDef->collBounds;
	Load_Bounds(false);

	varFxEffectDefRef = &varFxElemDef->effectOnImpact;
	Load_FxEffectDefRef(false);

	varFxEffectDefRef = &varFxElemDef->effectOnDeath;
	Load_FxEffectDefRef(false);

	varFxEffectDefRef = &varFxElemDef->effectEmitted;
	Load_FxEffectDefRef(false);

	varFxFloatRange = &varFxElemDef->emitDist;
	Load_FxFloatRange(false);

	varFxFloatRange = &varFxElemDef->emitDistVariance;
	Load_FxFloatRange(false);

	varFxElemExtendedDefPtr = &varFxElemDef->extended;
	Load_FxElemExtendedDefPtr(false);

}

void Load_FxElemDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemDef, sizeof(FxElemDef) * count);
	FxElemDef* pointer = varFxElemDef;
	for (int i = 0; i < count; i++)
	{
		varFxElemDef = pointer;
		Load_FxElemDef(false);
		pointer++;
	}
}

void Load_FxElemDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemDef, sizeof(FxElemDef));
	if (*varFxElemDefPtr != nullptr)
	{
		if (*varFxElemDefPtr == (FxElemDef*)0xFFFFFFFF)
		{
			*varFxElemDefPtr = AllocLoad_FxElemDef();
			varFxElemDef = *varFxElemDefPtr;
			Load_FxElemDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemDefPtr);
		}
	}
}

void Load_FxElemDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemDefPtr, sizeof(FxElemDef*) * count);
	FxElemDef** pointer = varFxElemDefPtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemDefPtr = pointer;
		Load_FxElemDefPtr(false);
		pointer++;
	}
}

void Load_FxElemDefVisuals(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemDefVisuals, sizeof(FxElemDefVisuals));

	if (varFxElemDef->elemType == 11)
	{
		varFxElemMarkVisualsPtr = &varFxElemDefVisuals->markArray;
		Load_FxElemMarkVisualsPtr(false);
	}
	else if (varFxElemDef->visualCount > 1)
	{
		varFxElemVisualsPtr = &varFxElemDefVisuals->array;
		Load_FxElemVisualsPtr(false);
	}
	else
	{
		varFxElemVisuals = &varFxElemDefVisuals->instance;
		Load_FxElemVisuals(atStreamStart);
	}
}

void Load_FxElemDefVisualsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemDefVisuals, sizeof(FxElemDefVisuals) * count);
	FxElemDefVisuals* pointer = varFxElemDefVisuals;
	for (int i = 0; i < count; i++)
	{
		varFxElemDefVisuals = pointer;
		Load_FxElemDefVisuals(false);
		pointer++;
	}
}

void Load_FxElemDefVisualsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemDefVisuals, sizeof(FxElemDefVisuals));
	if (*varFxElemDefVisualsPtr != nullptr)
	{
		if (*varFxElemDefVisualsPtr == (FxElemDefVisuals*)0xFFFFFFFF)
		{
			*varFxElemDefVisualsPtr = AllocLoad_FxElemDefVisuals();
			varFxElemDefVisuals = *varFxElemDefVisualsPtr;
			Load_FxElemDefVisuals(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemDefVisualsPtr);
		}
	}
}

void Load_FxElemDefVisualsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemDefVisualsPtr, sizeof(FxElemDefVisuals*) * count);
	FxElemDefVisuals** pointer = varFxElemDefVisualsPtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemDefVisualsPtr = pointer;
		Load_FxElemDefVisualsPtr(false);
		pointer++;
	}
}

void Load_FxElemExtendedDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemExtendedDefPtr, sizeof(FxElemExtendedDefPtr));

	switch (varFxElemDef->elemType)
	{
	case 3:
		varFxTrailDefPtr = &varFxElemExtendedDefPtr->trailDef;
		Load_FxTrailDefPtr(false);
		break;
	case 6:
		varFxSparkFountainDefPtr = &varFxElemExtendedDefPtr->sparkFountainDef;
		Load_FxSparkFountainDefPtr(false);
		break;
	}
}

void Load_FxElemExtendedDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemExtendedDefPtr, sizeof(FxElemExtendedDefPtr) * count);
	FxElemExtendedDefPtr* pointer = varFxElemExtendedDefPtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemExtendedDefPtr = pointer;
		Load_FxElemExtendedDefPtr(false);
		pointer++;
	}
}

void Load_FxElemExtendedDefPtrPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemExtendedDefPtr, sizeof(FxElemExtendedDefPtr));
	if (*varFxElemExtendedDefPtrPtr != nullptr)
	{
		if (*varFxElemExtendedDefPtrPtr == (FxElemExtendedDefPtr*)0xFFFFFFFF)
		{
			*varFxElemExtendedDefPtrPtr = AllocLoad_FxElemExtendedDefPtr();
			varFxElemExtendedDefPtr = *varFxElemExtendedDefPtrPtr;
			Load_FxElemExtendedDefPtr(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemExtendedDefPtrPtr);
		}
	}
}

void Load_FxElemExtendedDefPtrPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemExtendedDefPtrPtr, sizeof(FxElemExtendedDefPtr*) * count);
	FxElemExtendedDefPtr** pointer = varFxElemExtendedDefPtrPtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemExtendedDefPtrPtr = pointer;
		Load_FxElemExtendedDefPtrPtr(false);
		pointer++;
	}
}

void Load_FxElemMarkVisuals(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemMarkVisuals, sizeof(FxElemMarkVisuals));

	if (varFxElemMarkVisuals->materials)
	{
		varMaterialPtr = varFxElemMarkVisuals->materials;
		Load_MaterialPtrArray(false, 2);
	}

}

void Load_FxElemMarkVisualsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemMarkVisuals, sizeof(FxElemMarkVisuals) * count);
	FxElemMarkVisuals* pointer = varFxElemMarkVisuals;
	for (int i = 0; i < count; i++)
	{
		varFxElemMarkVisuals = pointer;
		Load_FxElemMarkVisuals(false);
		pointer++;
	}
}

void Load_FxElemMarkVisualsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemMarkVisuals, sizeof(FxElemMarkVisuals));
	if (*varFxElemMarkVisualsPtr != nullptr)
	{
		*varFxElemMarkVisualsPtr = AllocLoad_FxElemMarkVisuals();
		varFxElemMarkVisuals = *varFxElemMarkVisualsPtr;
		Load_FxElemMarkVisuals(true);
	}
}

void Load_FxElemMarkVisualsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemMarkVisualsPtr, sizeof(FxElemMarkVisuals*) * count);
	FxElemMarkVisuals** pointer = varFxElemMarkVisualsPtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemMarkVisualsPtr = pointer;
		Load_FxElemMarkVisualsPtr(false);
		pointer++;
	}
}

void Load_FxElemVec3Range(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVec3Range, sizeof(FxElemVec3Range));

}

void Load_FxElemVec3RangeArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVec3Range, sizeof(FxElemVec3Range) * count);
	FxElemVec3Range* pointer = varFxElemVec3Range;
	for (int i = 0; i < count; i++)
	{
		varFxElemVec3Range = pointer;
		Load_FxElemVec3Range(false);
		pointer++;
	}
}

void Load_FxElemVec3RangePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVec3Range, sizeof(FxElemVec3Range));
	if (*varFxElemVec3RangePtr != nullptr)
	{
		if (*varFxElemVec3RangePtr == (FxElemVec3Range*)0xFFFFFFFF)
		{
			*varFxElemVec3RangePtr = AllocLoad_FxElemVec3Range();
			varFxElemVec3Range = *varFxElemVec3RangePtr;
			Load_FxElemVec3Range(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemVec3RangePtr);
		}
	}
}

void Load_FxElemVec3RangePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVec3RangePtr, sizeof(FxElemVec3Range*) * count);
	FxElemVec3Range** pointer = varFxElemVec3RangePtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemVec3RangePtr = pointer;
		Load_FxElemVec3RangePtr(false);
		pointer++;
	}
}

void Load_FxElemVelStateInFrame(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVelStateInFrame, sizeof(FxElemVelStateInFrame));

	varFxElemVec3Range = &varFxElemVelStateInFrame->velocity;
	Load_FxElemVec3Range(false);

	varFxElemVec3Range = &varFxElemVelStateInFrame->totalDelta;
	Load_FxElemVec3Range(false);

}

void Load_FxElemVelStateInFrameArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVelStateInFrame, sizeof(FxElemVelStateInFrame) * count);
	FxElemVelStateInFrame* pointer = varFxElemVelStateInFrame;
	for (int i = 0; i < count; i++)
	{
		varFxElemVelStateInFrame = pointer;
		Load_FxElemVelStateInFrame(false);
		pointer++;
	}
}

void Load_FxElemVelStateInFramePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVelStateInFrame, sizeof(FxElemVelStateInFrame));
	if (*varFxElemVelStateInFramePtr != nullptr)
	{
		if (*varFxElemVelStateInFramePtr == (FxElemVelStateInFrame*)0xFFFFFFFF)
		{
			*varFxElemVelStateInFramePtr = AllocLoad_FxElemVelStateInFrame();
			varFxElemVelStateInFrame = *varFxElemVelStateInFramePtr;
			Load_FxElemVelStateInFrame(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemVelStateInFramePtr);
		}
	}
}

void Load_FxElemVelStateInFramePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVelStateInFramePtr, sizeof(FxElemVelStateInFrame*) * count);
	FxElemVelStateInFrame** pointer = varFxElemVelStateInFramePtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemVelStateInFramePtr = pointer;
		Load_FxElemVelStateInFramePtr(false);
		pointer++;
	}
}

void Load_FxElemVelStateSample(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVelStateSample, sizeof(FxElemVelStateSample));

	varFxElemVelStateInFrame = &varFxElemVelStateSample->local;
	Load_FxElemVelStateInFrame(false);

	varFxElemVelStateInFrame = &varFxElemVelStateSample->world;
	Load_FxElemVelStateInFrame(false);

}

void Load_FxElemVelStateSampleArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVelStateSample, sizeof(FxElemVelStateSample) * count);
	FxElemVelStateSample* pointer = varFxElemVelStateSample;
	for (int i = 0; i < count; i++)
	{
		varFxElemVelStateSample = pointer;
		Load_FxElemVelStateSample(false);
		pointer++;
	}
}

void Load_FxElemVelStateSamplePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVelStateSample, sizeof(FxElemVelStateSample));
	if (*varFxElemVelStateSamplePtr != nullptr)
	{
		if (*varFxElemVelStateSamplePtr == (FxElemVelStateSample*)0xFFFFFFFF)
		{
			*varFxElemVelStateSamplePtr = AllocLoad_FxElemVelStateSample();
			varFxElemVelStateSample = *varFxElemVelStateSamplePtr;
			Load_FxElemVelStateSample(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemVelStateSamplePtr);
		}
	}
}

void Load_FxElemVelStateSamplePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVelStateSamplePtr, sizeof(FxElemVelStateSample*) * count);
	FxElemVelStateSample** pointer = varFxElemVelStateSamplePtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemVelStateSamplePtr = pointer;
		Load_FxElemVelStateSamplePtr(false);
		pointer++;
	}
}

void Load_FxElemVisStateSample(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVisStateSample, sizeof(FxElemVisStateSample));

	varFxElemVisualState = &varFxElemVisStateSample->base;
	Load_FxElemVisualState(false);

	varFxElemVisualState = &varFxElemVisStateSample->amplitude;
	Load_FxElemVisualState(false);

}

void Load_FxElemVisStateSampleArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVisStateSample, sizeof(FxElemVisStateSample) * count);
	FxElemVisStateSample* pointer = varFxElemVisStateSample;
	for (int i = 0; i < count; i++)
	{
		varFxElemVisStateSample = pointer;
		Load_FxElemVisStateSample(false);
		pointer++;
	}
}

void Load_FxElemVisStateSamplePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVisStateSample, sizeof(FxElemVisStateSample));
	if (*varFxElemVisStateSamplePtr != nullptr)
	{
		if (*varFxElemVisStateSamplePtr == (FxElemVisStateSample*)0xFFFFFFFF)
		{
			*varFxElemVisStateSamplePtr = AllocLoad_FxElemVisStateSample();
			varFxElemVisStateSample = *varFxElemVisStateSamplePtr;
			Load_FxElemVisStateSample(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemVisStateSamplePtr);
		}
	}
}

void Load_FxElemVisStateSamplePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVisStateSamplePtr, sizeof(FxElemVisStateSample*) * count);
	FxElemVisStateSample** pointer = varFxElemVisStateSamplePtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemVisStateSamplePtr = pointer;
		Load_FxElemVisStateSamplePtr(false);
		pointer++;
	}
}

void Load_FxElemVisualState(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVisualState, sizeof(FxElemVisualState));

}

void Load_FxElemVisualStateArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVisualState, sizeof(FxElemVisualState) * count);
	FxElemVisualState* pointer = varFxElemVisualState;
	for (int i = 0; i < count; i++)
	{
		varFxElemVisualState = pointer;
		Load_FxElemVisualState(false);
		pointer++;
	}
}

void Load_FxElemVisualStatePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVisualState, sizeof(FxElemVisualState));
	if (*varFxElemVisualStatePtr != nullptr)
	{
		if (*varFxElemVisualStatePtr == (FxElemVisualState*)0xFFFFFFFF)
		{
			*varFxElemVisualStatePtr = AllocLoad_FxElemVisualState();
			varFxElemVisualState = *varFxElemVisualStatePtr;
			Load_FxElemVisualState(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemVisualStatePtr);
		}
	}
}

void Load_FxElemVisualStatePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVisualStatePtr, sizeof(FxElemVisualState*) * count);
	FxElemVisualState** pointer = varFxElemVisualStatePtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemVisualStatePtr = pointer;
		Load_FxElemVisualStatePtr(false);
		pointer++;
	}
}

void Load_FxElemVisuals(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVisuals, sizeof(FxElemVisuals));

	switch (varFxElemDef->elemType)
	{
	case 0:
	case 1:
	case 2:
	case 3:
	case 4:
	case 5:
	case 6:
	case 11:
		varMaterialPtr = &varFxElemVisuals->material;
		Load_MaterialPtr(false);
		break;
	case 7:
		varXModelPtr = &varFxElemVisuals->model;
		Load_XModelPtr(false);
		break;
	case 12:
		varFxEffectDefRef = &varFxElemVisuals->effectDef;
		Load_FxEffectDefRef(atStreamStart);
		break;
	case 10:
		varXString = &varFxElemVisuals->soundName;
		Load_XString(atStreamStart);
		break;
	}
}

void Load_FxElemVisualsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVisuals, sizeof(FxElemVisuals) * count);
	FxElemVisuals* pointer = varFxElemVisuals;
	for (int i = 0; i < count; i++)
	{
		varFxElemVisuals = pointer;
		Load_FxElemVisuals(false);
		pointer++;
	}
}

void Load_FxElemVisualsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxElemVisuals, sizeof(FxElemVisuals));
	if (*varFxElemVisualsPtr != nullptr)
	{
		if (*varFxElemVisualsPtr == (FxElemVisuals*)0xFFFFFFFF)
		{
			*varFxElemVisualsPtr = AllocLoad_FxElemVisuals();
			varFxElemVisuals = *varFxElemVisualsPtr;
			Load_FxElemVisuals(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxElemVisualsPtr);
		}
	}
}

void Load_FxElemVisualsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxElemVisualsPtr, sizeof(FxElemVisuals*) * count);
	FxElemVisuals** pointer = varFxElemVisualsPtr;
	for (int i = 0; i < count; i++)
	{
		varFxElemVisualsPtr = pointer;
		Load_FxElemVisualsPtr(false);
		pointer++;
	}
}

void Load_FxFloatRange(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxFloatRange, sizeof(FxFloatRange));

}

void Load_FxFloatRangeArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxFloatRange, sizeof(FxFloatRange) * count);
	FxFloatRange* pointer = varFxFloatRange;
	for (int i = 0; i < count; i++)
	{
		varFxFloatRange = pointer;
		Load_FxFloatRange(false);
		pointer++;
	}
}

void Load_FxFloatRangePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxFloatRange, sizeof(FxFloatRange));
	if (*varFxFloatRangePtr != nullptr)
	{
		if (*varFxFloatRangePtr == (FxFloatRange*)0xFFFFFFFF)
		{
			*varFxFloatRangePtr = AllocLoad_FxFloatRange();
			varFxFloatRange = *varFxFloatRangePtr;
			Load_FxFloatRange(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxFloatRangePtr);
		}
	}
}

void Load_FxFloatRangePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxFloatRangePtr, sizeof(FxFloatRange*) * count);
	FxFloatRange** pointer = varFxFloatRangePtr;
	for (int i = 0; i < count; i++)
	{
		varFxFloatRangePtr = pointer;
		Load_FxFloatRangePtr(false);
		pointer++;
	}
}

void Load_FxGlassCrackHeader(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassCrackHeader, sizeof(FxGlassCrackHeader));

}

void Load_FxGlassCrackHeaderArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassCrackHeader, sizeof(FxGlassCrackHeader) * count);
	FxGlassCrackHeader* pointer = varFxGlassCrackHeader;
	for (int i = 0; i < count; i++)
	{
		varFxGlassCrackHeader = pointer;
		Load_FxGlassCrackHeader(false);
		pointer++;
	}
}

void Load_FxGlassCrackHeaderPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassCrackHeader, sizeof(FxGlassCrackHeader));
	if (*varFxGlassCrackHeaderPtr != nullptr)
	{
		if (*varFxGlassCrackHeaderPtr == (FxGlassCrackHeader*)0xFFFFFFFF)
		{
			*varFxGlassCrackHeaderPtr = AllocLoad_FxGlassCrackHeader();
			varFxGlassCrackHeader = *varFxGlassCrackHeaderPtr;
			Load_FxGlassCrackHeader(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassCrackHeaderPtr);
		}
	}
}

void Load_FxGlassCrackHeaderPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassCrackHeaderPtr, sizeof(FxGlassCrackHeader*) * count);
	FxGlassCrackHeader** pointer = varFxGlassCrackHeaderPtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassCrackHeaderPtr = pointer;
		Load_FxGlassCrackHeaderPtr(false);
		pointer++;
	}
}

void Load_FxGlassDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassDef, sizeof(FxGlassDef));

	varGfxColor = &varFxGlassDef->color;
	Load_GfxColor(false);

	varMaterialPtr = &varFxGlassDef->material;
	Load_MaterialPtr(false);

	varMaterialPtr = &varFxGlassDef->materialShattered;
	Load_MaterialPtr(false);

	varPhysPresetPtr = &varFxGlassDef->physPreset;
	Load_PhysPresetPtr(false);

}

void Load_FxGlassDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassDef, sizeof(FxGlassDef) * count);
	FxGlassDef* pointer = varFxGlassDef;
	for (int i = 0; i < count; i++)
	{
		varFxGlassDef = pointer;
		Load_FxGlassDef(false);
		pointer++;
	}
}

void Load_FxGlassDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassDef, sizeof(FxGlassDef));
	if (*varFxGlassDefPtr != nullptr)
	{
		if (*varFxGlassDefPtr == (FxGlassDef*)0xFFFFFFFF)
		{
			*varFxGlassDefPtr = AllocLoad_FxGlassDef();
			varFxGlassDef = *varFxGlassDefPtr;
			Load_FxGlassDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassDefPtr);
		}
	}
}

void Load_FxGlassDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassDefPtr, sizeof(FxGlassDef*) * count);
	FxGlassDef** pointer = varFxGlassDefPtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassDefPtr = pointer;
		Load_FxGlassDefPtr(false);
		pointer++;
	}
}

void Load_FxGlassGeometryData(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassGeometryData, sizeof(FxGlassGeometryData));

}

void Load_FxGlassGeometryDataArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassGeometryData, sizeof(FxGlassGeometryData) * count);
	FxGlassGeometryData* pointer = varFxGlassGeometryData;
	for (int i = 0; i < count; i++)
	{
		varFxGlassGeometryData = pointer;
		Load_FxGlassGeometryData(false);
		pointer++;
	}
}

void Load_FxGlassGeometryDataPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassGeometryData, sizeof(FxGlassGeometryData));
	if (*varFxGlassGeometryDataPtr != nullptr)
	{
		if (*varFxGlassGeometryDataPtr == (FxGlassGeometryData*)0xFFFFFFFF)
		{
			*varFxGlassGeometryDataPtr = AllocLoad_FxGlassGeometryData();
			varFxGlassGeometryData = *varFxGlassGeometryDataPtr;
			Load_FxGlassGeometryData(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassGeometryDataPtr);
		}
	}
}

void Load_FxGlassGeometryDataPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassGeometryDataPtr, sizeof(FxGlassGeometryData*) * count);
	FxGlassGeometryData** pointer = varFxGlassGeometryDataPtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassGeometryDataPtr = pointer;
		Load_FxGlassGeometryDataPtr(false);
		pointer++;
	}
}

void Load_FxGlassHoleHeader(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassHoleHeader, sizeof(FxGlassHoleHeader));

}

void Load_FxGlassHoleHeaderArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassHoleHeader, sizeof(FxGlassHoleHeader) * count);
	FxGlassHoleHeader* pointer = varFxGlassHoleHeader;
	for (int i = 0; i < count; i++)
	{
		varFxGlassHoleHeader = pointer;
		Load_FxGlassHoleHeader(false);
		pointer++;
	}
}

void Load_FxGlassHoleHeaderPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassHoleHeader, sizeof(FxGlassHoleHeader));
	if (*varFxGlassHoleHeaderPtr != nullptr)
	{
		if (*varFxGlassHoleHeaderPtr == (FxGlassHoleHeader*)0xFFFFFFFF)
		{
			*varFxGlassHoleHeaderPtr = AllocLoad_FxGlassHoleHeader();
			varFxGlassHoleHeader = *varFxGlassHoleHeaderPtr;
			Load_FxGlassHoleHeader(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassHoleHeaderPtr);
		}
	}
}

void Load_FxGlassHoleHeaderPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassHoleHeaderPtr, sizeof(FxGlassHoleHeader*) * count);
	FxGlassHoleHeader** pointer = varFxGlassHoleHeaderPtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassHoleHeaderPtr = pointer;
		Load_FxGlassHoleHeaderPtr(false);
		pointer++;
	}
}

void Load_FxGlassInitPieceState(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassInitPieceState, sizeof(FxGlassInitPieceState));

	varFxSpatialFrame = &varFxGlassInitPieceState->frame;
	Load_FxSpatialFrame(false);

}

void Load_FxGlassInitPieceStateArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassInitPieceState, sizeof(FxGlassInitPieceState) * count);
	FxGlassInitPieceState* pointer = varFxGlassInitPieceState;
	for (int i = 0; i < count; i++)
	{
		varFxGlassInitPieceState = pointer;
		Load_FxGlassInitPieceState(false);
		pointer++;
	}
}

void Load_FxGlassInitPieceStatePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassInitPieceState, sizeof(FxGlassInitPieceState));
	if (*varFxGlassInitPieceStatePtr != nullptr)
	{
		if (*varFxGlassInitPieceStatePtr == (FxGlassInitPieceState*)0xFFFFFFFF)
		{
			*varFxGlassInitPieceStatePtr = AllocLoad_FxGlassInitPieceState();
			varFxGlassInitPieceState = *varFxGlassInitPieceStatePtr;
			Load_FxGlassInitPieceState(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassInitPieceStatePtr);
		}
	}
}

void Load_FxGlassInitPieceStatePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassInitPieceStatePtr, sizeof(FxGlassInitPieceState*) * count);
	FxGlassInitPieceState** pointer = varFxGlassInitPieceStatePtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassInitPieceStatePtr = pointer;
		Load_FxGlassInitPieceStatePtr(false);
		pointer++;
	}
}

void Load_FxGlassPieceDynamics(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassPieceDynamics, sizeof(FxGlassPieceDynamics));

}

void Load_FxGlassPieceDynamicsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassPieceDynamics, sizeof(FxGlassPieceDynamics) * count);
	FxGlassPieceDynamics* pointer = varFxGlassPieceDynamics;
	for (int i = 0; i < count; i++)
	{
		varFxGlassPieceDynamics = pointer;
		Load_FxGlassPieceDynamics(false);
		pointer++;
	}
}

void Load_FxGlassPieceDynamicsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassPieceDynamics, sizeof(FxGlassPieceDynamics));
	if (*varFxGlassPieceDynamicsPtr != nullptr)
	{
		if (*varFxGlassPieceDynamicsPtr == (FxGlassPieceDynamics*)0xFFFFFFFF)
		{
			*varFxGlassPieceDynamicsPtr = AllocLoad_FxGlassPieceDynamics();
			varFxGlassPieceDynamics = *varFxGlassPieceDynamicsPtr;
			Load_FxGlassPieceDynamics(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassPieceDynamicsPtr);
		}
	}
}

void Load_FxGlassPieceDynamicsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassPieceDynamicsPtr, sizeof(FxGlassPieceDynamics*) * count);
	FxGlassPieceDynamics** pointer = varFxGlassPieceDynamicsPtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassPieceDynamicsPtr = pointer;
		Load_FxGlassPieceDynamicsPtr(false);
		pointer++;
	}
}

void Load_FxGlassPiecePlace(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassPiecePlace, sizeof(FxGlassPiecePlace));

}

void Load_FxGlassPiecePlaceArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassPiecePlace, sizeof(FxGlassPiecePlace) * count);
	FxGlassPiecePlace* pointer = varFxGlassPiecePlace;
	for (int i = 0; i < count; i++)
	{
		varFxGlassPiecePlace = pointer;
		Load_FxGlassPiecePlace(false);
		pointer++;
	}
}

void Load_FxGlassPiecePlacePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassPiecePlace, sizeof(FxGlassPiecePlace));
	if (*varFxGlassPiecePlacePtr != nullptr)
	{
		if (*varFxGlassPiecePlacePtr == (FxGlassPiecePlace*)0xFFFFFFFF)
		{
			*varFxGlassPiecePlacePtr = AllocLoad_FxGlassPiecePlace();
			varFxGlassPiecePlace = *varFxGlassPiecePlacePtr;
			Load_FxGlassPiecePlace(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassPiecePlacePtr);
		}
	}
}

void Load_FxGlassPiecePlacePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassPiecePlacePtr, sizeof(FxGlassPiecePlace*) * count);
	FxGlassPiecePlace** pointer = varFxGlassPiecePlacePtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassPiecePlacePtr = pointer;
		Load_FxGlassPiecePlacePtr(false);
		pointer++;
	}
}

void Load_FxGlassPieceState(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassPieceState, sizeof(FxGlassPieceState));

}

void Load_FxGlassPieceStateArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassPieceState, sizeof(FxGlassPieceState) * count);
	FxGlassPieceState* pointer = varFxGlassPieceState;
	for (int i = 0; i < count; i++)
	{
		varFxGlassPieceState = pointer;
		Load_FxGlassPieceState(false);
		pointer++;
	}
}

void Load_FxGlassPieceStatePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassPieceState, sizeof(FxGlassPieceState));
	if (*varFxGlassPieceStatePtr != nullptr)
	{
		if (*varFxGlassPieceStatePtr == (FxGlassPieceState*)0xFFFFFFFF)
		{
			*varFxGlassPieceStatePtr = AllocLoad_FxGlassPieceState();
			varFxGlassPieceState = *varFxGlassPieceStatePtr;
			Load_FxGlassPieceState(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassPieceStatePtr);
		}
	}
}

void Load_FxGlassPieceStatePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassPieceStatePtr, sizeof(FxGlassPieceState*) * count);
	FxGlassPieceState** pointer = varFxGlassPieceStatePtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassPieceStatePtr = pointer;
		Load_FxGlassPieceStatePtr(false);
		pointer++;
	}
}

void Load_FxGlassSystem(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassSystem, sizeof(FxGlassSystem));

	if (varFxGlassSystem->defs)
	{
		if (varFxGlassSystem->defs == (FxGlassDef*)0xFFFFFFFF)
		{
			varFxGlassSystem->defs = AllocLoad_FxGlassDef();
			varFxGlassDef = varFxGlassSystem->defs;
			Load_FxGlassDefArray(true, (varFxGlassSystem->defCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->defs);
		}
	}

	if (varFxGlassSystem->piecePlaces)
	{
		if (varFxGlassSystem->piecePlaces == (FxGlassPiecePlace*)0xFFFFFFFF)
		{
			varFxGlassSystem->piecePlaces = AllocLoad_FxGlassPiecePlace();
			varFxGlassPiecePlace = varFxGlassSystem->piecePlaces;
			Load_FxGlassPiecePlaceArray(true, (varFxGlassSystem->pieceLimit));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->piecePlaces);
		}
	}

	if (varFxGlassSystem->pieceStates)
	{
		if (varFxGlassSystem->pieceStates == (FxGlassPieceState*)0xFFFFFFFF)
		{
			varFxGlassSystem->pieceStates = AllocLoad_FxGlassPieceState();
			varFxGlassPieceState = varFxGlassSystem->pieceStates;
			Load_FxGlassPieceStateArray(true, (varFxGlassSystem->pieceLimit));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->pieceStates);
		}
	}

	if (varFxGlassSystem->pieceDynamics)
	{
		if (varFxGlassSystem->pieceDynamics == (FxGlassPieceDynamics*)0xFFFFFFFF)
		{
			varFxGlassSystem->pieceDynamics = AllocLoad_FxGlassPieceDynamics();
			varFxGlassPieceDynamics = varFxGlassSystem->pieceDynamics;
			Load_FxGlassPieceDynamicsArray(true, (varFxGlassSystem->pieceLimit));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->pieceDynamics);
		}
	}

	if (varFxGlassSystem->geoData)
	{
		if (varFxGlassSystem->geoData == (FxGlassGeometryData*)0xFFFFFFFF)
		{
			varFxGlassSystem->geoData = AllocLoad_FxGlassGeometryData();
			varFxGlassGeometryData = varFxGlassSystem->geoData;
			Load_FxGlassGeometryDataArray(true, (varFxGlassSystem->geoDataLimit));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->geoData);
		}
	}

	varuint32 = varFxGlassSystem->isInUse;
	Load_uint32Array(true, varFxGlassSystem->pieceWordCount);

	varuint32 = varFxGlassSystem->cellBits;
	Load_uint32Array(true, varFxGlassSystem->pieceWordCount * varFxGlassSystem->cellCount);

	if (varFxGlassSystem->visData)
	{
		if (varFxGlassSystem->visData == (char16*)0xFFFFFFFF)
		{
			varFxGlassSystem->visData = AllocLoad_char16();
			varchar16 = varFxGlassSystem->visData;
			Load_char16Array(true, ((varFxGlassSystem->pieceLimit + 15) & 0xFFFFFFF0));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->visData);
		}
	}

	if (varFxGlassSystem->linkOrg)
	{
		if (varFxGlassSystem->linkOrg == (vec3_t*)0xFFFFFFFF)
		{
			varFxGlassSystem->linkOrg = AllocLoad_vec3_t();
			varvec3_t = varFxGlassSystem->linkOrg;
			Load_vec3_tArray(true, (varFxGlassSystem->pieceLimit));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->linkOrg);
		}
	}

	if (varFxGlassSystem->halfThickness)
	{
		if (varFxGlassSystem->halfThickness == (float16*)0xFFFFFFFF)
		{
			varFxGlassSystem->halfThickness = AllocLoad_float16();
			varfloat16 = varFxGlassSystem->halfThickness;
			Load_float16Array(true, ((varFxGlassSystem->pieceLimit + 3) & 0xFFFFFFFC));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->halfThickness);
		}
	}

	if (varFxGlassSystem->lightingHandles)
	{
		if (varFxGlassSystem->lightingHandles == (uint16*)0xFFFFFFFF)
		{
			varFxGlassSystem->lightingHandles = AllocLoad_uint16();
			varuint16 = varFxGlassSystem->lightingHandles;
			Load_uint16Array(true, (varFxGlassSystem->initPieceCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->lightingHandles);
		}
	}

	if (varFxGlassSystem->initPieceStates)
	{
		if (varFxGlassSystem->initPieceStates == (FxGlassInitPieceState*)0xFFFFFFFF)
		{
			varFxGlassSystem->initPieceStates = AllocLoad_FxGlassInitPieceState();
			varFxGlassInitPieceState = varFxGlassSystem->initPieceStates;
			Load_FxGlassInitPieceStateArray(true, (varFxGlassSystem->initPieceCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->initPieceStates);
		}
	}

	if (varFxGlassSystem->initGeoData)
	{
		if (varFxGlassSystem->initGeoData == (FxGlassGeometryData*)0xFFFFFFFF)
		{
			varFxGlassSystem->initGeoData = AllocLoad_FxGlassGeometryData();
			varFxGlassGeometryData = varFxGlassSystem->initGeoData;
			Load_FxGlassGeometryDataArray(true, (varFxGlassSystem->initGeoDataCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxGlassSystem->initGeoData);
		}
	}

}

void Load_FxGlassSystemArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassSystem, sizeof(FxGlassSystem) * count);
	FxGlassSystem* pointer = varFxGlassSystem;
	for (int i = 0; i < count; i++)
	{
		varFxGlassSystem = pointer;
		Load_FxGlassSystem(false);
		pointer++;
	}
}

void Load_FxGlassSystemPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassSystem, sizeof(FxGlassSystem));
	if (*varFxGlassSystemPtr != nullptr)
	{
		if (*varFxGlassSystemPtr == (FxGlassSystem*)0xFFFFFFFF)
		{
			*varFxGlassSystemPtr = AllocLoad_FxGlassSystem();
			varFxGlassSystem = *varFxGlassSystemPtr;
			Load_FxGlassSystem(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassSystemPtr);
		}
	}
}

void Load_FxGlassSystemPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassSystemPtr, sizeof(FxGlassSystem*) * count);
	FxGlassSystem** pointer = varFxGlassSystemPtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassSystemPtr = pointer;
		Load_FxGlassSystemPtr(false);
		pointer++;
	}
}

void Load_FxGlassVertex(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassVertex, sizeof(FxGlassVertex));

}

void Load_FxGlassVertexArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassVertex, sizeof(FxGlassVertex) * count);
	FxGlassVertex* pointer = varFxGlassVertex;
	for (int i = 0; i < count; i++)
	{
		varFxGlassVertex = pointer;
		Load_FxGlassVertex(false);
		pointer++;
	}
}

void Load_FxGlassVertexPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxGlassVertex, sizeof(FxGlassVertex));
	if (*varFxGlassVertexPtr != nullptr)
	{
		if (*varFxGlassVertexPtr == (FxGlassVertex*)0xFFFFFFFF)
		{
			*varFxGlassVertexPtr = AllocLoad_FxGlassVertex();
			varFxGlassVertex = *varFxGlassVertexPtr;
			Load_FxGlassVertex(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxGlassVertexPtr);
		}
	}
}

void Load_FxGlassVertexPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxGlassVertexPtr, sizeof(FxGlassVertex*) * count);
	FxGlassVertex** pointer = varFxGlassVertexPtr;
	for (int i = 0; i < count; i++)
	{
		varFxGlassVertexPtr = pointer;
		Load_FxGlassVertexPtr(false);
		pointer++;
	}
}

void Load_FxIntRange(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxIntRange, sizeof(FxIntRange));

}

void Load_FxIntRangeArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxIntRange, sizeof(FxIntRange) * count);
	FxIntRange* pointer = varFxIntRange;
	for (int i = 0; i < count; i++)
	{
		varFxIntRange = pointer;
		Load_FxIntRange(false);
		pointer++;
	}
}

void Load_FxIntRangePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxIntRange, sizeof(FxIntRange));
	if (*varFxIntRangePtr != nullptr)
	{
		if (*varFxIntRangePtr == (FxIntRange*)0xFFFFFFFF)
		{
			*varFxIntRangePtr = AllocLoad_FxIntRange();
			varFxIntRange = *varFxIntRangePtr;
			Load_FxIntRange(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxIntRangePtr);
		}
	}
}

void Load_FxIntRangePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxIntRangePtr, sizeof(FxIntRange*) * count);
	FxIntRange** pointer = varFxIntRangePtr;
	for (int i = 0; i < count; i++)
	{
		varFxIntRangePtr = pointer;
		Load_FxIntRangePtr(false);
		pointer++;
	}
}

void Load_FxSparkFountainDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSparkFountainDef, sizeof(FxSparkFountainDef));

}

void Load_FxSparkFountainDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSparkFountainDef, sizeof(FxSparkFountainDef) * count);
	FxSparkFountainDef* pointer = varFxSparkFountainDef;
	for (int i = 0; i < count; i++)
	{
		varFxSparkFountainDef = pointer;
		Load_FxSparkFountainDef(false);
		pointer++;
	}
}

void Load_FxSparkFountainDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSparkFountainDef, sizeof(FxSparkFountainDef));
	if (*varFxSparkFountainDefPtr != nullptr)
	{
		if (*varFxSparkFountainDefPtr == (FxSparkFountainDef*)0xFFFFFFFF)
		{
			*varFxSparkFountainDefPtr = AllocLoad_FxSparkFountainDef();
			varFxSparkFountainDef = *varFxSparkFountainDefPtr;
			Load_FxSparkFountainDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxSparkFountainDefPtr);
		}
	}
}

void Load_FxSparkFountainDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSparkFountainDefPtr, sizeof(FxSparkFountainDef*) * count);
	FxSparkFountainDef** pointer = varFxSparkFountainDefPtr;
	for (int i = 0; i < count; i++)
	{
		varFxSparkFountainDefPtr = pointer;
		Load_FxSparkFountainDefPtr(false);
		pointer++;
	}
}

void Load_FxSpatialFrame(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSpatialFrame, sizeof(FxSpatialFrame));

}

void Load_FxSpatialFrameArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSpatialFrame, sizeof(FxSpatialFrame) * count);
	FxSpatialFrame* pointer = varFxSpatialFrame;
	for (int i = 0; i < count; i++)
	{
		varFxSpatialFrame = pointer;
		Load_FxSpatialFrame(false);
		pointer++;
	}
}

void Load_FxSpatialFramePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSpatialFrame, sizeof(FxSpatialFrame));
	if (*varFxSpatialFramePtr != nullptr)
	{
		if (*varFxSpatialFramePtr == (FxSpatialFrame*)0xFFFFFFFF)
		{
			*varFxSpatialFramePtr = AllocLoad_FxSpatialFrame();
			varFxSpatialFrame = *varFxSpatialFramePtr;
			Load_FxSpatialFrame(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxSpatialFramePtr);
		}
	}
}

void Load_FxSpatialFramePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSpatialFramePtr, sizeof(FxSpatialFrame*) * count);
	FxSpatialFrame** pointer = varFxSpatialFramePtr;
	for (int i = 0; i < count; i++)
	{
		varFxSpatialFramePtr = pointer;
		Load_FxSpatialFramePtr(false);
		pointer++;
	}
}

void Load_FxSpawnDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSpawnDef, sizeof(FxSpawnDef));

}

void Load_FxSpawnDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSpawnDef, sizeof(FxSpawnDef) * count);
	FxSpawnDef* pointer = varFxSpawnDef;
	for (int i = 0; i < count; i++)
	{
		varFxSpawnDef = pointer;
		Load_FxSpawnDef(false);
		pointer++;
	}
}

void Load_FxSpawnDefLooping(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSpawnDefLooping, sizeof(FxSpawnDefLooping));

}

void Load_FxSpawnDefLoopingArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSpawnDefLooping, sizeof(FxSpawnDefLooping) * count);
	FxSpawnDefLooping* pointer = varFxSpawnDefLooping;
	for (int i = 0; i < count; i++)
	{
		varFxSpawnDefLooping = pointer;
		Load_FxSpawnDefLooping(false);
		pointer++;
	}
}

void Load_FxSpawnDefLoopingPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSpawnDefLooping, sizeof(FxSpawnDefLooping));
	if (*varFxSpawnDefLoopingPtr != nullptr)
	{
		if (*varFxSpawnDefLoopingPtr == (FxSpawnDefLooping*)0xFFFFFFFF)
		{
			*varFxSpawnDefLoopingPtr = AllocLoad_FxSpawnDefLooping();
			varFxSpawnDefLooping = *varFxSpawnDefLoopingPtr;
			Load_FxSpawnDefLooping(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxSpawnDefLoopingPtr);
		}
	}
}

void Load_FxSpawnDefLoopingPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSpawnDefLoopingPtr, sizeof(FxSpawnDefLooping*) * count);
	FxSpawnDefLooping** pointer = varFxSpawnDefLoopingPtr;
	for (int i = 0; i < count; i++)
	{
		varFxSpawnDefLoopingPtr = pointer;
		Load_FxSpawnDefLoopingPtr(false);
		pointer++;
	}
}

void Load_FxSpawnDefOneShot(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSpawnDefOneShot, sizeof(FxSpawnDefOneShot));

	varFxIntRange = &varFxSpawnDefOneShot->count;
	Load_FxIntRange(false);

}

void Load_FxSpawnDefOneShotArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSpawnDefOneShot, sizeof(FxSpawnDefOneShot) * count);
	FxSpawnDefOneShot* pointer = varFxSpawnDefOneShot;
	for (int i = 0; i < count; i++)
	{
		varFxSpawnDefOneShot = pointer;
		Load_FxSpawnDefOneShot(false);
		pointer++;
	}
}

void Load_FxSpawnDefOneShotPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSpawnDefOneShot, sizeof(FxSpawnDefOneShot));
	if (*varFxSpawnDefOneShotPtr != nullptr)
	{
		*varFxSpawnDefOneShotPtr = AllocLoad_FxSpawnDefOneShot();
		varFxSpawnDefOneShot = *varFxSpawnDefOneShotPtr;
		Load_FxSpawnDefOneShot(true);
	}
}

void Load_FxSpawnDefOneShotPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSpawnDefOneShotPtr, sizeof(FxSpawnDefOneShot*) * count);
	FxSpawnDefOneShot** pointer = varFxSpawnDefOneShotPtr;
	for (int i = 0; i < count; i++)
	{
		varFxSpawnDefOneShotPtr = pointer;
		Load_FxSpawnDefOneShotPtr(false);
		pointer++;
	}
}

void Load_FxSpawnDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxSpawnDef, sizeof(FxSpawnDef));
	if (*varFxSpawnDefPtr != nullptr)
	{
		if (*varFxSpawnDefPtr == (FxSpawnDef*)0xFFFFFFFF)
		{
			*varFxSpawnDefPtr = AllocLoad_FxSpawnDef();
			varFxSpawnDef = *varFxSpawnDefPtr;
			Load_FxSpawnDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxSpawnDefPtr);
		}
	}
}

void Load_FxSpawnDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxSpawnDefPtr, sizeof(FxSpawnDef*) * count);
	FxSpawnDef** pointer = varFxSpawnDefPtr;
	for (int i = 0; i < count; i++)
	{
		varFxSpawnDefPtr = pointer;
		Load_FxSpawnDefPtr(false);
		pointer++;
	}
}

void Load_FxTrailDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxTrailDef, sizeof(FxTrailDef));

	if (varFxTrailDef->verts)
	{
		if (varFxTrailDef->verts == (FxTrailVertex*)0xFFFFFFFF)
		{
			varFxTrailDef->verts = AllocLoad_FxTrailVertex();
			varFxTrailVertex = varFxTrailDef->verts;
			Load_FxTrailVertexArray(true, (varFxTrailDef->vertCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxTrailDef->verts);
		}
	}

	if (varFxTrailDef->inds)
	{
		if (varFxTrailDef->inds == (uint16*)0xFFFFFFFF)
		{
			varFxTrailDef->inds = AllocLoad_uint16();
			varuint16 = varFxTrailDef->inds;
			Load_uint16Array(true, (varFxTrailDef->indCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varFxTrailDef->inds);
		}
	}

}

void Load_FxTrailDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxTrailDef, sizeof(FxTrailDef) * count);
	FxTrailDef* pointer = varFxTrailDef;
	for (int i = 0; i < count; i++)
	{
		varFxTrailDef = pointer;
		Load_FxTrailDef(false);
		pointer++;
	}
}

void Load_FxTrailDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxTrailDef, sizeof(FxTrailDef));
	if (*varFxTrailDefPtr != nullptr)
	{
		if (*varFxTrailDefPtr == (FxTrailDef*)0xFFFFFFFF)
		{
			*varFxTrailDefPtr = AllocLoad_FxTrailDef();
			varFxTrailDef = *varFxTrailDefPtr;
			Load_FxTrailDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxTrailDefPtr);
		}
	}
}

void Load_FxTrailDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxTrailDefPtr, sizeof(FxTrailDef*) * count);
	FxTrailDef** pointer = varFxTrailDefPtr;
	for (int i = 0; i < count; i++)
	{
		varFxTrailDefPtr = pointer;
		Load_FxTrailDefPtr(false);
		pointer++;
	}
}

void Load_FxTrailVertex(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxTrailVertex, sizeof(FxTrailVertex));

}

void Load_FxTrailVertexArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxTrailVertex, sizeof(FxTrailVertex) * count);
	FxTrailVertex* pointer = varFxTrailVertex;
	for (int i = 0; i < count; i++)
	{
		varFxTrailVertex = pointer;
		Load_FxTrailVertex(false);
		pointer++;
	}
}

void Load_FxTrailVertexPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxTrailVertex, sizeof(FxTrailVertex));
	if (*varFxTrailVertexPtr != nullptr)
	{
		if (*varFxTrailVertexPtr == (FxTrailVertex*)0xFFFFFFFF)
		{
			*varFxTrailVertexPtr = AllocLoad_FxTrailVertex();
			varFxTrailVertex = *varFxTrailVertexPtr;
			Load_FxTrailVertex(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varFxTrailVertexPtr);
		}
	}
}

void Load_FxTrailVertexPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxTrailVertexPtr, sizeof(FxTrailVertex*) * count);
	FxTrailVertex** pointer = varFxTrailVertexPtr;
	for (int i = 0; i < count; i++)
	{
		varFxTrailVertexPtr = pointer;
		Load_FxTrailVertexPtr(false);
		pointer++;
	}
}

void Load_FxWorld(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxWorld, sizeof(FxWorld));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varFxWorld->name;
	Load_XString(false);

	varFxGlassSystem = &varFxWorld->glassSys;
	Load_FxGlassSystem(false);

	DB_PopStreamPos();
}

void Load_FxWorldArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxWorld, sizeof(FxWorld) * count);
	FxWorld* pointer = varFxWorld;
	for (int i = 0; i < count; i++)
	{
		varFxWorld = pointer;
		Load_FxWorld(false);
		pointer++;
	}
}

void Load_FxWorldAsset(FxWorld** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_FXWORLD, (void**)varFxWorldPtr);
}

void Load_FxWorldPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varFxWorld, sizeof(FxWorld*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	FxWorld* pointer = *varFxWorldPtr;
	if (*varFxWorldPtr != nullptr)
	{
		if (*varFxWorldPtr == (FxWorld*)0xFFFFFFFF || *varFxWorldPtr == (FxWorld*)0xFFFFFFFE)
		{
			*varFxWorldPtr = AllocLoad_FxWorld();
			varFxWorld = *varFxWorldPtr;
			FxWorld** insertedPointer = nullptr;
			if (pointer == (FxWorld*)0xFFFFFFFE)
			{
				insertedPointer = (FxWorld**)DB_InsertPointer();
			}
			Load_FxWorld(true);
			Load_FxWorldAsset(varFxWorldPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varFxWorldPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varFxWorldPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_FxWorldPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varFxWorldPtr, sizeof(FxWorld*) * count);
	FxWorld** pointer = varFxWorldPtr;
	for (int i = 0; i < count; i++)
	{
		varFxWorldPtr = pointer;
		Load_FxWorldPtr(false);
		pointer++;
	}
}

void Load_G_GlassData(bool atStreamStart)
{
	Load_Stream(atStreamStart, varG_GlassData, sizeof(G_GlassData));

	if (varG_GlassData->glassPieces)
	{
		if (varG_GlassData->glassPieces == (G_GlassPiece*)0xFFFFFFFF)
		{
			varG_GlassData->glassPieces = AllocLoad_G_GlassPiece();
			varG_GlassPiece = varG_GlassData->glassPieces;
			Load_G_GlassPieceArray(true, (varG_GlassData->pieceCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varG_GlassData->glassPieces);
		}
	}

	if (varG_GlassData->glassNames)
	{
		if (varG_GlassData->glassNames == (G_GlassName*)0xFFFFFFFF)
		{
			varG_GlassData->glassNames = AllocLoad_G_GlassName();
			varG_GlassName = varG_GlassData->glassNames;
			Load_G_GlassNameArray(true, (varG_GlassData->glassNameCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varG_GlassData->glassNames);
		}
	}

}

void Load_G_GlassDataArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varG_GlassData, sizeof(G_GlassData) * count);
	G_GlassData* pointer = varG_GlassData;
	for (int i = 0; i < count; i++)
	{
		varG_GlassData = pointer;
		Load_G_GlassData(false);
		pointer++;
	}
}

void Load_G_GlassDataPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varG_GlassData, sizeof(G_GlassData));
	if (*varG_GlassDataPtr != nullptr)
	{
		if (*varG_GlassDataPtr == (G_GlassData*)0xFFFFFFFF)
		{
			*varG_GlassDataPtr = AllocLoad_G_GlassData();
			varG_GlassData = *varG_GlassDataPtr;
			Load_G_GlassData(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varG_GlassDataPtr);
		}
	}
}

void Load_G_GlassDataPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varG_GlassDataPtr, sizeof(G_GlassData*) * count);
	G_GlassData** pointer = varG_GlassDataPtr;
	for (int i = 0; i < count; i++)
	{
		varG_GlassDataPtr = pointer;
		Load_G_GlassDataPtr(false);
		pointer++;
	}
}

void Load_G_GlassName(bool atStreamStart)
{
	Load_Stream(atStreamStart, varG_GlassName, sizeof(G_GlassName));

	varXString = &varG_GlassName->nameStr;
	Load_XString(false);

	if (varG_GlassName->pieceIndices)
	{
		if (varG_GlassName->pieceIndices == (uint16*)0xFFFFFFFF)
		{
			varG_GlassName->pieceIndices = AllocLoad_uint16();
			varuint16 = varG_GlassName->pieceIndices;
			Load_uint16Array(true, (varG_GlassName->pieceCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varG_GlassName->pieceIndices);
		}
	}

}

void Load_G_GlassNameArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varG_GlassName, sizeof(G_GlassName) * count);
	G_GlassName* pointer = varG_GlassName;
	for (int i = 0; i < count; i++)
	{
		varG_GlassName = pointer;
		Load_G_GlassName(false);
		pointer++;
	}
}

void Load_G_GlassNamePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varG_GlassName, sizeof(G_GlassName));
	if (*varG_GlassNamePtr != nullptr)
	{
		if (*varG_GlassNamePtr == (G_GlassName*)0xFFFFFFFF)
		{
			*varG_GlassNamePtr = AllocLoad_G_GlassName();
			varG_GlassName = *varG_GlassNamePtr;
			Load_G_GlassName(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varG_GlassNamePtr);
		}
	}
}

void Load_G_GlassNamePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varG_GlassNamePtr, sizeof(G_GlassName*) * count);
	G_GlassName** pointer = varG_GlassNamePtr;
	for (int i = 0; i < count; i++)
	{
		varG_GlassNamePtr = pointer;
		Load_G_GlassNamePtr(false);
		pointer++;
	}
}

void Load_G_GlassPiece(bool atStreamStart)
{
	Load_Stream(atStreamStart, varG_GlassPiece, sizeof(G_GlassPiece));

}

void Load_G_GlassPieceArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varG_GlassPiece, sizeof(G_GlassPiece) * count);
	G_GlassPiece* pointer = varG_GlassPiece;
	for (int i = 0; i < count; i++)
	{
		varG_GlassPiece = pointer;
		Load_G_GlassPiece(false);
		pointer++;
	}
}

void Load_G_GlassPiecePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varG_GlassPiece, sizeof(G_GlassPiece));
	if (*varG_GlassPiecePtr != nullptr)
	{
		if (*varG_GlassPiecePtr == (G_GlassPiece*)0xFFFFFFFF)
		{
			*varG_GlassPiecePtr = AllocLoad_G_GlassPiece();
			varG_GlassPiece = *varG_GlassPiecePtr;
			Load_G_GlassPiece(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varG_GlassPiecePtr);
		}
	}
}

void Load_G_GlassPiecePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varG_GlassPiecePtr, sizeof(G_GlassPiece*) * count);
	G_GlassPiece** pointer = varG_GlassPiecePtr;
	for (int i = 0; i < count; i++)
	{
		varG_GlassPiecePtr = pointer;
		Load_G_GlassPiecePtr(false);
		pointer++;
	}
}

void Load_GameWorldMp(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGameWorldMp, sizeof(GameWorldMp));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varGameWorldMp->name;
	Load_XString(false);

	if (varGameWorldMp->g_glassData)
	{
		varG_GlassDataPtr = &varGameWorldMp->g_glassData;
		Load_G_GlassDataPtr(false);
	}

	DB_PopStreamPos();
}

void Load_GameWorldMpArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGameWorldMp, sizeof(GameWorldMp) * count);
	GameWorldMp* pointer = varGameWorldMp;
	for (int i = 0; i < count; i++)
	{
		varGameWorldMp = pointer;
		Load_GameWorldMp(false);
		pointer++;
	}
}

void Load_GameWorldMpAsset(GameWorldMp** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_GAMEWORLD_MP, (void**)varGameWorldMpPtr);
}

void Load_GameWorldMpPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGameWorldMp, sizeof(GameWorldMp*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	GameWorldMp* pointer = *varGameWorldMpPtr;
	if (*varGameWorldMpPtr != nullptr)
	{
		if (*varGameWorldMpPtr == (GameWorldMp*)0xFFFFFFFF || *varGameWorldMpPtr == (GameWorldMp*)0xFFFFFFFE)
		{
			*varGameWorldMpPtr = AllocLoad_GameWorldMp();
			varGameWorldMp = *varGameWorldMpPtr;
			GameWorldMp** insertedPointer = nullptr;
			if (pointer == (GameWorldMp*)0xFFFFFFFE)
			{
				insertedPointer = (GameWorldMp**)DB_InsertPointer();
			}
			Load_GameWorldMp(true);
			Load_GameWorldMpAsset(varGameWorldMpPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varGameWorldMpPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varGameWorldMpPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_GameWorldMpPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGameWorldMpPtr, sizeof(GameWorldMp*) * count);
	GameWorldMp** pointer = varGameWorldMpPtr;
	for (int i = 0; i < count; i++)
	{
		varGameWorldMpPtr = pointer;
		Load_GameWorldMpPtr(false);
		pointer++;
	}
}

void Load_GfxColor(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxColor, sizeof(GfxColor));

}

void Load_GfxColorArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxColor, sizeof(GfxColor) * count);
	GfxColor* pointer = varGfxColor;
	for (int i = 0; i < count; i++)
	{
		varGfxColor = pointer;
		Load_GfxColor(false);
		pointer++;
	}
}

void Load_GfxColorPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxColor, sizeof(GfxColor));
	if (*varGfxColorPtr != nullptr)
	{
		if (*varGfxColorPtr == (GfxColor*)0xFFFFFFFF)
		{
			*varGfxColorPtr = AllocLoad_GfxColor();
			varGfxColor = *varGfxColorPtr;
			Load_GfxColor(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varGfxColorPtr);
		}
	}
}

void Load_GfxColorPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxColorPtr, sizeof(GfxColor*) * count);
	GfxColor** pointer = varGfxColorPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxColorPtr = pointer;
		Load_GfxColorPtr(false);
		pointer++;
	}
}

void Load_GfxDrawSurf(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxDrawSurf, sizeof(GfxDrawSurf));

}

void Load_GfxDrawSurfArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxDrawSurf, sizeof(GfxDrawSurf) * count);
	GfxDrawSurf* pointer = varGfxDrawSurf;
	for (int i = 0; i < count; i++)
	{
		varGfxDrawSurf = pointer;
		Load_GfxDrawSurf(false);
		pointer++;
	}
}

void Load_GfxDrawSurfPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxDrawSurf, sizeof(GfxDrawSurf));
	if (*varGfxDrawSurfPtr != nullptr)
	{
		*varGfxDrawSurfPtr = AllocLoad_GfxDrawSurf();
		varGfxDrawSurf = *varGfxDrawSurfPtr;
		Load_GfxDrawSurf(true);
	}
}

void Load_GfxDrawSurfPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxDrawSurfPtr, sizeof(GfxDrawSurf*) * count);
	GfxDrawSurf** pointer = varGfxDrawSurfPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxDrawSurfPtr = pointer;
		Load_GfxDrawSurfPtr(false);
		pointer++;
	}
}

void Load_GfxImage(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxImage, sizeof(GfxImage));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varGfxImage->name;
	Load_XString(false);

	varGfxTexture = &varGfxImage->texture;
	Load_GfxTexture(false);

	varPicmip = &varGfxImage->picmip;
	Load_Picmip(false);

	varCardMemory = &varGfxImage->cardMemory;
	Load_CardMemory(false);

	DB_PopStreamPos();
}

void Load_GfxImageArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxImage, sizeof(GfxImage) * count);
	GfxImage* pointer = varGfxImage;
	for (int i = 0; i < count; i++)
	{
		varGfxImage = pointer;
		Load_GfxImage(false);
		pointer++;
	}
}

void Load_GfxImageAsset(GfxImage** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_IMAGE, (void**)varGfxImagePtr);
}

void Load_GfxImageLoadDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxImageLoadDef, (sizeof(GfxImageLoadDef) - 4));

	varchar = varGfxImageLoadDef->data;
	Load_charArray(true, varGfxImageLoadDef->resourceSize);

}

void Load_GfxImageLoadDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxImageLoadDef, sizeof(GfxImageLoadDef) * count);
	GfxImageLoadDef* pointer = varGfxImageLoadDef;
	for (int i = 0; i < count; i++)
	{
		varGfxImageLoadDef = pointer;
		Load_GfxImageLoadDef(false);
		pointer++;
	}
}

void Load_GfxImageLoadDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxImageLoadDef, sizeof(GfxImageLoadDef*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	GfxImageLoadDef* pointer = *varGfxImageLoadDefPtr;
	if (*varGfxImageLoadDefPtr != nullptr)
	{
		if (*varGfxImageLoadDefPtr == (GfxImageLoadDef*)0xFFFFFFFF || *varGfxImageLoadDefPtr == (GfxImageLoadDef*)0xFFFFFFFE)
		{
			*varGfxImageLoadDefPtr = AllocLoad_GfxImageLoadDef();
			varGfxImageLoadDef = *varGfxImageLoadDefPtr;
			GfxImageLoadDef** insertedPointer = nullptr;
			if (pointer == (GfxImageLoadDef*)0xFFFFFFFE)
			{
				insertedPointer = (GfxImageLoadDef**)DB_InsertPointer();
			}
			Load_GfxImageLoadDef(true);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varGfxImageLoadDefPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varGfxImageLoadDefPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_GfxImageLoadDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxImageLoadDefPtr, sizeof(GfxImageLoadDef*) * count);
	GfxImageLoadDef** pointer = varGfxImageLoadDefPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxImageLoadDefPtr = pointer;
		Load_GfxImageLoadDefPtr(false);
		pointer++;
	}
}

void Load_GfxImagePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxImage, sizeof(GfxImage*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	GfxImage* pointer = *varGfxImagePtr;
	if (*varGfxImagePtr != nullptr)
	{
		if (*varGfxImagePtr == (GfxImage*)0xFFFFFFFF || *varGfxImagePtr == (GfxImage*)0xFFFFFFFE)
		{
			*varGfxImagePtr = AllocLoad_GfxImage();
			varGfxImage = *varGfxImagePtr;
			GfxImage** insertedPointer = nullptr;
			if (pointer == (GfxImage*)0xFFFFFFFE)
			{
				insertedPointer = (GfxImage**)DB_InsertPointer();
			}
			Load_GfxImage(true);
			Load_GfxImageAsset(varGfxImagePtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varGfxImagePtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varGfxImagePtr);
		}
	}
	DB_PopStreamPos();
}

void Load_GfxImagePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxImagePtr, sizeof(GfxImage*) * count);
	GfxImage** pointer = varGfxImagePtr;
	for (int i = 0; i < count; i++)
	{
		varGfxImagePtr = pointer;
		Load_GfxImagePtr(false);
		pointer++;
	}
}

void Load_GfxLightDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxLightDef, sizeof(GfxLightDef));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varGfxLightDef->name;
	Load_XString(false);

	varGfxLightImage = &varGfxLightDef->attenuation;
	Load_GfxLightImage(false);

	DB_PopStreamPos();
}

void Load_GfxLightDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxLightDef, sizeof(GfxLightDef) * count);
	GfxLightDef* pointer = varGfxLightDef;
	for (int i = 0; i < count; i++)
	{
		varGfxLightDef = pointer;
		Load_GfxLightDef(false);
		pointer++;
	}
}

void Load_GfxLightDefAsset(GfxLightDef** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_LIGHT_DEF, (void**)varGfxLightDefPtr);
}

void Load_GfxLightDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxLightDef, sizeof(GfxLightDef*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	GfxLightDef* pointer = *varGfxLightDefPtr;
	if (*varGfxLightDefPtr != nullptr)
	{
		if (*varGfxLightDefPtr == (GfxLightDef*)0xFFFFFFFF || *varGfxLightDefPtr == (GfxLightDef*)0xFFFFFFFE)
		{
			*varGfxLightDefPtr = AllocLoad_GfxLightDef();
			varGfxLightDef = *varGfxLightDefPtr;
			GfxLightDef** insertedPointer = nullptr;
			if (pointer == (GfxLightDef*)0xFFFFFFFE)
			{
				insertedPointer = (GfxLightDef**)DB_InsertPointer();
			}
			Load_GfxLightDef(true);
			Load_GfxLightDefAsset(varGfxLightDefPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varGfxLightDefPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varGfxLightDefPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_GfxLightDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxLightDefPtr, sizeof(GfxLightDef*) * count);
	GfxLightDef** pointer = varGfxLightDefPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxLightDefPtr = pointer;
		Load_GfxLightDefPtr(false);
		pointer++;
	}
}

void Load_GfxLightImage(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxLightImage, sizeof(GfxLightImage));

	varGfxImagePtr = &varGfxLightImage->image;
	Load_GfxImagePtr(false);

}

void Load_GfxLightImageArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxLightImage, sizeof(GfxLightImage) * count);
	GfxLightImage* pointer = varGfxLightImage;
	for (int i = 0; i < count; i++)
	{
		varGfxLightImage = pointer;
		Load_GfxLightImage(false);
		pointer++;
	}
}

void Load_GfxLightImagePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxLightImage, sizeof(GfxLightImage));
	if (*varGfxLightImagePtr != nullptr)
	{
		if (*varGfxLightImagePtr == (GfxLightImage*)0xFFFFFFFF)
		{
			*varGfxLightImagePtr = AllocLoad_GfxLightImage();
			varGfxLightImage = *varGfxLightImagePtr;
			Load_GfxLightImage(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varGfxLightImagePtr);
		}
	}
}

void Load_GfxLightImagePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxLightImagePtr, sizeof(GfxLightImage*) * count);
	GfxLightImage** pointer = varGfxLightImagePtr;
	for (int i = 0; i < count; i++)
	{
		varGfxLightImagePtr = pointer;
		Load_GfxLightImagePtr(false);
		pointer++;
	}
}

void Load_GfxPackedVertex(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxPackedVertex, sizeof(GfxPackedVertex));

	varGfxColor = &varGfxPackedVertex->color;
	Load_GfxColor(false);

	varPackedTexCoords = &varGfxPackedVertex->texCoord;
	Load_PackedTexCoords(false);

	varPackedUnitVec = &varGfxPackedVertex->normal;
	Load_PackedUnitVec(false);

	varPackedUnitVec = &varGfxPackedVertex->tangent;
	Load_PackedUnitVec(false);

}

void Load_GfxPackedVertexArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxPackedVertex, sizeof(GfxPackedVertex) * count);
	GfxPackedVertex* pointer = varGfxPackedVertex;
	for (int i = 0; i < count; i++)
	{
		varGfxPackedVertex = pointer;
		Load_GfxPackedVertex(false);
		pointer++;
	}
}

void Load_GfxPackedVertexPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxPackedVertex, sizeof(GfxPackedVertex));
	if (*varGfxPackedVertexPtr != nullptr)
	{
		if (*varGfxPackedVertexPtr == (GfxPackedVertex*)0xFFFFFFFF)
		{
			*varGfxPackedVertexPtr = AllocLoad_GfxPackedVertex();
			varGfxPackedVertex = *varGfxPackedVertexPtr;
			Load_GfxPackedVertex(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varGfxPackedVertexPtr);
		}
	}
}

void Load_GfxPackedVertexPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxPackedVertexPtr, sizeof(GfxPackedVertex*) * count);
	GfxPackedVertex** pointer = varGfxPackedVertexPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxPackedVertexPtr = pointer;
		Load_GfxPackedVertexPtr(false);
		pointer++;
	}
}

void Load_GfxPixelShaderLoadDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxPixelShaderLoadDef, sizeof(GfxPixelShaderLoadDef));

	varint32 = varGfxPixelShaderLoadDef->program;
	Load_int32Array(true, varGfxPixelShaderLoadDef->programSize);

}

void Load_GfxPixelShaderLoadDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxPixelShaderLoadDef, sizeof(GfxPixelShaderLoadDef) * count);
	GfxPixelShaderLoadDef* pointer = varGfxPixelShaderLoadDef;
	for (int i = 0; i < count; i++)
	{
		varGfxPixelShaderLoadDef = pointer;
		Load_GfxPixelShaderLoadDef(false);
		pointer++;
	}
}

void Load_GfxPixelShaderLoadDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxPixelShaderLoadDef, sizeof(GfxPixelShaderLoadDef));
	if (*varGfxPixelShaderLoadDefPtr != nullptr)
	{
		if (*varGfxPixelShaderLoadDefPtr == (GfxPixelShaderLoadDef*)0xFFFFFFFF)
		{
			*varGfxPixelShaderLoadDefPtr = AllocLoad_GfxPixelShaderLoadDef();
			varGfxPixelShaderLoadDef = *varGfxPixelShaderLoadDefPtr;
			Load_GfxPixelShaderLoadDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varGfxPixelShaderLoadDefPtr);
		}
	}
}

void Load_GfxPixelShaderLoadDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxPixelShaderLoadDefPtr, sizeof(GfxPixelShaderLoadDef*) * count);
	GfxPixelShaderLoadDef** pointer = varGfxPixelShaderLoadDefPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxPixelShaderLoadDefPtr = pointer;
		Load_GfxPixelShaderLoadDefPtr(false);
		pointer++;
	}
}

void Load_GfxPlacement(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxPlacement, sizeof(GfxPlacement));

}

void Load_GfxPlacementArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxPlacement, sizeof(GfxPlacement) * count);
	GfxPlacement* pointer = varGfxPlacement;
	for (int i = 0; i < count; i++)
	{
		varGfxPlacement = pointer;
		Load_GfxPlacement(false);
		pointer++;
	}
}

void Load_GfxPlacementPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxPlacement, sizeof(GfxPlacement));
	if (*varGfxPlacementPtr != nullptr)
	{
		if (*varGfxPlacementPtr == (GfxPlacement*)0xFFFFFFFF)
		{
			*varGfxPlacementPtr = AllocLoad_GfxPlacement();
			varGfxPlacement = *varGfxPlacementPtr;
			Load_GfxPlacement(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varGfxPlacementPtr);
		}
	}
}

void Load_GfxPlacementPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxPlacementPtr, sizeof(GfxPlacement*) * count);
	GfxPlacement** pointer = varGfxPlacementPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxPlacementPtr = pointer;
		Load_GfxPlacementPtr(false);
		pointer++;
	}
}

void Load_GfxStateBits(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxStateBits, sizeof(GfxStateBits));

}

void Load_GfxStateBitsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxStateBits, sizeof(GfxStateBits) * count);
	GfxStateBits* pointer = varGfxStateBits;
	for (int i = 0; i < count; i++)
	{
		varGfxStateBits = pointer;
		Load_GfxStateBits(false);
		pointer++;
	}
}

void Load_GfxStateBitsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxStateBits, sizeof(GfxStateBits));
	if (*varGfxStateBitsPtr != nullptr)
	{
		*varGfxStateBitsPtr = AllocLoad_GfxStateBits();
		varGfxStateBits = *varGfxStateBitsPtr;
		Load_GfxStateBits(true);
	}
}

void Load_GfxStateBitsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxStateBitsPtr, sizeof(GfxStateBits*) * count);
	GfxStateBits** pointer = varGfxStateBitsPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxStateBitsPtr = pointer;
		Load_GfxStateBitsPtr(false);
		pointer++;
	}
}

void Load_GfxTexture(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxTexture, sizeof(GfxTexture));

	switch (varGfxImage->mapType)
	{
	default:
		varGfxImageLoadDefPtr = &varGfxTexture->loadDef;
		Load_GfxImageLoadDefPtr(false);
		break;
	}
}

void Load_GfxTextureArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxTexture, sizeof(GfxTexture) * count);
	GfxTexture* pointer = varGfxTexture;
	for (int i = 0; i < count; i++)
	{
		varGfxTexture = pointer;
		Load_GfxTexture(false);
		pointer++;
	}
}

void Load_GfxTexturePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxTexture, sizeof(GfxTexture));
	if (*varGfxTexturePtr != nullptr)
	{
		*varGfxTexturePtr = AllocLoad_GfxTexture();
		varGfxTexture = *varGfxTexturePtr;
		Load_GfxTexture(true);
	}
}

void Load_GfxTexturePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxTexturePtr, sizeof(GfxTexture*) * count);
	GfxTexture** pointer = varGfxTexturePtr;
	for (int i = 0; i < count; i++)
	{
		varGfxTexturePtr = pointer;
		Load_GfxTexturePtr(false);
		pointer++;
	}
}

void Load_GfxVertexShaderLoadDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxVertexShaderLoadDef, sizeof(GfxVertexShaderLoadDef));

	varuint32 = varGfxVertexShaderLoadDef->program;
	Load_uint32Array(true, varGfxVertexShaderLoadDef->programSize);

}

void Load_GfxVertexShaderLoadDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxVertexShaderLoadDef, sizeof(GfxVertexShaderLoadDef) * count);
	GfxVertexShaderLoadDef* pointer = varGfxVertexShaderLoadDef;
	for (int i = 0; i < count; i++)
	{
		varGfxVertexShaderLoadDef = pointer;
		Load_GfxVertexShaderLoadDef(false);
		pointer++;
	}
}

void Load_GfxVertexShaderLoadDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGfxVertexShaderLoadDef, sizeof(GfxVertexShaderLoadDef));
	if (*varGfxVertexShaderLoadDefPtr != nullptr)
	{
		if (*varGfxVertexShaderLoadDefPtr == (GfxVertexShaderLoadDef*)0xFFFFFFFF)
		{
			*varGfxVertexShaderLoadDefPtr = AllocLoad_GfxVertexShaderLoadDef();
			varGfxVertexShaderLoadDef = *varGfxVertexShaderLoadDefPtr;
			Load_GfxVertexShaderLoadDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varGfxVertexShaderLoadDefPtr);
		}
	}
}

void Load_GfxVertexShaderLoadDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGfxVertexShaderLoadDefPtr, sizeof(GfxVertexShaderLoadDef*) * count);
	GfxVertexShaderLoadDef** pointer = varGfxVertexShaderLoadDefPtr;
	for (int i = 0; i < count; i++)
	{
		varGfxVertexShaderLoadDefPtr = pointer;
		Load_GfxVertexShaderLoadDefPtr(false);
		pointer++;
	}
}

void Load_Glyph(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGlyph, sizeof(Glyph));

}

void Load_GlyphArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGlyph, sizeof(Glyph) * count);
	Glyph* pointer = varGlyph;
	for (int i = 0; i < count; i++)
	{
		varGlyph = pointer;
		Load_Glyph(false);
		pointer++;
	}
}

void Load_GlyphPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varGlyph, sizeof(Glyph));
	if (*varGlyphPtr != nullptr)
	{
		if (*varGlyphPtr == (Glyph*)0xFFFFFFFF)
		{
			*varGlyphPtr = AllocLoad_Glyph();
			varGlyph = *varGlyphPtr;
			Load_Glyph(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varGlyphPtr);
		}
	}
}

void Load_GlyphPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varGlyphPtr, sizeof(Glyph*) * count);
	Glyph** pointer = varGlyphPtr;
	for (int i = 0; i < count; i++)
	{
		varGlyphPtr = pointer;
		Load_GlyphPtr(false);
		pointer++;
	}
}

void Load_ItemFloatExpression(bool atStreamStart)
{
	Load_Stream(atStreamStart, varItemFloatExpression, sizeof(ItemFloatExpression));

	if (varItemFloatExpression->expression)
	{
		varStatement_sPtr = &varItemFloatExpression->expression;
		Load_Statement_sPtr(false);
	}

}

void Load_ItemFloatExpressionArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varItemFloatExpression, sizeof(ItemFloatExpression) * count);
	ItemFloatExpression* pointer = varItemFloatExpression;
	for (int i = 0; i < count; i++)
	{
		varItemFloatExpression = pointer;
		Load_ItemFloatExpression(false);
		pointer++;
	}
}

void Load_ItemFloatExpressionPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varItemFloatExpression, sizeof(ItemFloatExpression));
	if (*varItemFloatExpressionPtr != nullptr)
	{
		if (*varItemFloatExpressionPtr == (ItemFloatExpression*)0xFFFFFFFF)
		{
			*varItemFloatExpressionPtr = AllocLoad_ItemFloatExpression();
			varItemFloatExpression = *varItemFloatExpressionPtr;
			Load_ItemFloatExpression(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varItemFloatExpressionPtr);
		}
	}
}

void Load_ItemFloatExpressionPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varItemFloatExpressionPtr, sizeof(ItemFloatExpression*) * count);
	ItemFloatExpression** pointer = varItemFloatExpressionPtr;
	for (int i = 0; i < count; i++)
	{
		varItemFloatExpressionPtr = pointer;
		Load_ItemFloatExpressionPtr(false);
		pointer++;
	}
}

void Load_ItemKeyHandler(bool atStreamStart)
{
	Load_Stream(atStreamStart, varItemKeyHandler, sizeof(ItemKeyHandler));

	if (varItemKeyHandler->action)
	{
		varMenuEventHandlerSetPtr = &varItemKeyHandler->action;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varItemKeyHandler->next)
	{
		varItemKeyHandlerPtr = &varItemKeyHandler->next;
		Load_ItemKeyHandlerPtr(false);
	}

}

void Load_ItemKeyHandlerArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varItemKeyHandler, sizeof(ItemKeyHandler) * count);
	ItemKeyHandler* pointer = varItemKeyHandler;
	for (int i = 0; i < count; i++)
	{
		varItemKeyHandler = pointer;
		Load_ItemKeyHandler(false);
		pointer++;
	}
}

void Load_ItemKeyHandlerPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varItemKeyHandler, sizeof(ItemKeyHandler));
	if (*varItemKeyHandlerPtr != nullptr)
	{
		if (*varItemKeyHandlerPtr == (ItemKeyHandler*)0xFFFFFFFF)
		{
			*varItemKeyHandlerPtr = AllocLoad_ItemKeyHandler();
			varItemKeyHandler = *varItemKeyHandlerPtr;
			Load_ItemKeyHandler(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varItemKeyHandlerPtr);
		}
	}
}

void Load_ItemKeyHandlerPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varItemKeyHandlerPtr, sizeof(ItemKeyHandler*) * count);
	ItemKeyHandler** pointer = varItemKeyHandlerPtr;
	for (int i = 0; i < count; i++)
	{
		varItemKeyHandlerPtr = pointer;
		Load_ItemKeyHandlerPtr(false);
		pointer++;
	}
}

void Load_LbColumnDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varLbColumnDef, sizeof(LbColumnDef));

	varXString = &varLbColumnDef->name;
	Load_XString(false);

	varXString = &varLbColumnDef->statName;
	Load_XString(false);

}

void Load_LbColumnDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varLbColumnDef, sizeof(LbColumnDef) * count);
	LbColumnDef* pointer = varLbColumnDef;
	for (int i = 0; i < count; i++)
	{
		varLbColumnDef = pointer;
		Load_LbColumnDef(false);
		pointer++;
	}
}

void Load_LbColumnDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varLbColumnDef, sizeof(LbColumnDef));
	if (*varLbColumnDefPtr != nullptr)
	{
		if (*varLbColumnDefPtr == (LbColumnDef*)0xFFFFFFFF)
		{
			*varLbColumnDefPtr = AllocLoad_LbColumnDef();
			varLbColumnDef = *varLbColumnDefPtr;
			Load_LbColumnDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varLbColumnDefPtr);
		}
	}
}

void Load_LbColumnDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varLbColumnDefPtr, sizeof(LbColumnDef*) * count);
	LbColumnDef** pointer = varLbColumnDefPtr;
	for (int i = 0; i < count; i++)
	{
		varLbColumnDefPtr = pointer;
		Load_LbColumnDefPtr(false);
		pointer++;
	}
}

void Load_LeaderboardDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varLeaderboardDef, sizeof(LeaderboardDef));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varLeaderboardDef->name;
	Load_XString(false);

	if (varLeaderboardDef->columns)
	{
		if (varLeaderboardDef->columns == (LbColumnDef*)0xFFFFFFFF)
		{
			varLeaderboardDef->columns = AllocLoad_LbColumnDef();
			varLbColumnDef = varLeaderboardDef->columns;
			Load_LbColumnDefArray(true, (varLeaderboardDef->columnCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varLeaderboardDef->columns);
		}
	}

	DB_PopStreamPos();
}

void Load_LeaderboardDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varLeaderboardDef, sizeof(LeaderboardDef) * count);
	LeaderboardDef* pointer = varLeaderboardDef;
	for (int i = 0; i < count; i++)
	{
		varLeaderboardDef = pointer;
		Load_LeaderboardDef(false);
		pointer++;
	}
}

void Load_LeaderboardDefAsset(LeaderboardDef** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_LEADERBOARD, (void**)varLeaderboardDefPtr);
}

void Load_LeaderboardDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varLeaderboardDef, sizeof(LeaderboardDef*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	LeaderboardDef* pointer = *varLeaderboardDefPtr;
	if (*varLeaderboardDefPtr != nullptr)
	{
		if (*varLeaderboardDefPtr == (LeaderboardDef*)0xFFFFFFFF || *varLeaderboardDefPtr == (LeaderboardDef*)0xFFFFFFFE)
		{
			*varLeaderboardDefPtr = AllocLoad_LeaderboardDef();
			varLeaderboardDef = *varLeaderboardDefPtr;
			LeaderboardDef** insertedPointer = nullptr;
			if (pointer == (LeaderboardDef*)0xFFFFFFFE)
			{
				insertedPointer = (LeaderboardDef**)DB_InsertPointer();
			}
			Load_LeaderboardDef(true);
			Load_LeaderboardDefAsset(varLeaderboardDefPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varLeaderboardDefPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varLeaderboardDefPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_LeaderboardDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varLeaderboardDefPtr, sizeof(LeaderboardDef*) * count);
	LeaderboardDef** pointer = varLeaderboardDefPtr;
	for (int i = 0; i < count; i++)
	{
		varLeaderboardDefPtr = pointer;
		Load_LeaderboardDefPtr(false);
		pointer++;
	}
}

void Load_LoadedSound(bool atStreamStart)
{
	Load_Stream(atStreamStart, varLoadedSound, sizeof(LoadedSound));

	varXString = &varLoadedSound->name;
	Load_XString(false);

	varMssSound = &varLoadedSound->sound;
	Load_MssSound(false);

}

void Load_LoadedSoundArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varLoadedSound, sizeof(LoadedSound) * count);
	LoadedSound* pointer = varLoadedSound;
	for (int i = 0; i < count; i++)
	{
		varLoadedSound = pointer;
		Load_LoadedSound(false);
		pointer++;
	}
}

void Load_LoadedSoundPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varLoadedSound, sizeof(LoadedSound));
	if (*varLoadedSoundPtr != nullptr)
	{
		if (*varLoadedSoundPtr == (LoadedSound*)0xFFFFFFFF)
		{
			*varLoadedSoundPtr = AllocLoad_LoadedSound();
			varLoadedSound = *varLoadedSoundPtr;
			Load_LoadedSound(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varLoadedSoundPtr);
		}
	}
}

void Load_LoadedSoundPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varLoadedSoundPtr, sizeof(LoadedSound*) * count);
	LoadedSound** pointer = varLoadedSoundPtr;
	for (int i = 0; i < count; i++)
	{
		varLoadedSoundPtr = pointer;
		Load_LoadedSoundPtr(false);
		pointer++;
	}
}

void Load_LocalizeEntry(bool atStreamStart)
{
	Load_Stream(atStreamStart, varLocalizeEntry, sizeof(LocalizeEntry));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varLocalizeEntry->name;
	Load_XString(false);

	varXString = &varLocalizeEntry->value;
	Load_XString(false);

	DB_PopStreamPos();
}

void Load_LocalizeEntryArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varLocalizeEntry, sizeof(LocalizeEntry) * count);
	LocalizeEntry* pointer = varLocalizeEntry;
	for (int i = 0; i < count; i++)
	{
		varLocalizeEntry = pointer;
		Load_LocalizeEntry(false);
		pointer++;
	}
}

void Load_LocalizeEntryAsset(LocalizeEntry** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_LOCALIZE_ENTRY, (void**)varLocalizeEntryPtr);
}

void Load_LocalizeEntryPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varLocalizeEntry, sizeof(LocalizeEntry*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	LocalizeEntry* pointer = *varLocalizeEntryPtr;
	if (*varLocalizeEntryPtr != nullptr)
	{
		if (*varLocalizeEntryPtr == (LocalizeEntry*)0xFFFFFFFF || *varLocalizeEntryPtr == (LocalizeEntry*)0xFFFFFFFE)
		{
			*varLocalizeEntryPtr = AllocLoad_LocalizeEntry();
			varLocalizeEntry = *varLocalizeEntryPtr;
			LocalizeEntry** insertedPointer = nullptr;
			if (pointer == (LocalizeEntry*)0xFFFFFFFE)
			{
				insertedPointer = (LocalizeEntry**)DB_InsertPointer();
			}
			Load_LocalizeEntry(true);
			Load_LocalizeEntryAsset(varLocalizeEntryPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varLocalizeEntryPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varLocalizeEntryPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_LocalizeEntryPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varLocalizeEntryPtr, sizeof(LocalizeEntry*) * count);
	LocalizeEntry** pointer = varLocalizeEntryPtr;
	for (int i = 0; i < count; i++)
	{
		varLocalizeEntryPtr = pointer;
		Load_LocalizeEntryPtr(false);
		pointer++;
	}
}

void Load_MSSChannelMap(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMSSChannelMap, sizeof(MSSChannelMap));

	varMSSSpeakerLevels = varMSSChannelMap->speakers;
	Load_MSSSpeakerLevelsArray(true, varMSSChannelMap->speakerCount);

}

void Load_MSSChannelMapArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMSSChannelMap, sizeof(MSSChannelMap) * count);
	MSSChannelMap* pointer = varMSSChannelMap;
	for (int i = 0; i < count; i++)
	{
		varMSSChannelMap = pointer;
		Load_MSSChannelMap(false);
		pointer++;
	}
}

void Load_MSSChannelMapPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMSSChannelMap, sizeof(MSSChannelMap));
	if (*varMSSChannelMapPtr != nullptr)
	{
		if (*varMSSChannelMapPtr == (MSSChannelMap*)0xFFFFFFFF)
		{
			*varMSSChannelMapPtr = AllocLoad_MSSChannelMap();
			varMSSChannelMap = *varMSSChannelMapPtr;
			Load_MSSChannelMap(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMSSChannelMapPtr);
		}
	}
}

void Load_MSSChannelMapPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMSSChannelMapPtr, sizeof(MSSChannelMap*) * count);
	MSSChannelMap** pointer = varMSSChannelMapPtr;
	for (int i = 0; i < count; i++)
	{
		varMSSChannelMapPtr = pointer;
		Load_MSSChannelMapPtr(false);
		pointer++;
	}
}

void Load_MSSSpeakerLevels(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMSSSpeakerLevels, sizeof(MSSSpeakerLevels));

	varfloat = varMSSSpeakerLevels->levels;
	Load_floatArray(true, varMSSSpeakerLevels->numLevels);

}

void Load_MSSSpeakerLevelsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMSSSpeakerLevels, sizeof(MSSSpeakerLevels) * count);
	MSSSpeakerLevels* pointer = varMSSSpeakerLevels;
	for (int i = 0; i < count; i++)
	{
		varMSSSpeakerLevels = pointer;
		Load_MSSSpeakerLevels(false);
		pointer++;
	}
}

void Load_MSSSpeakerLevelsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMSSSpeakerLevels, sizeof(MSSSpeakerLevels));
	if (*varMSSSpeakerLevelsPtr != nullptr)
	{
		if (*varMSSSpeakerLevelsPtr == (MSSSpeakerLevels*)0xFFFFFFFF)
		{
			*varMSSSpeakerLevelsPtr = AllocLoad_MSSSpeakerLevels();
			varMSSSpeakerLevels = *varMSSSpeakerLevelsPtr;
			Load_MSSSpeakerLevels(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMSSSpeakerLevelsPtr);
		}
	}
}

void Load_MSSSpeakerLevelsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMSSSpeakerLevelsPtr, sizeof(MSSSpeakerLevels*) * count);
	MSSSpeakerLevels** pointer = varMSSSpeakerLevelsPtr;
	for (int i = 0; i < count; i++)
	{
		varMSSSpeakerLevelsPtr = pointer;
		Load_MSSSpeakerLevelsPtr(false);
		pointer++;
	}
}

void Load_MapEnts(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMapEnts, sizeof(MapEnts));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varMapEnts->name;
	Load_XString(false);

	if (varMapEnts->entityString)
	{
		if (varMapEnts->entityString == (char*)0xFFFFFFFF)
		{
			varMapEnts->entityString = AllocLoad_char();
			varchar = varMapEnts->entityString;
			Load_charArray(true, (varMapEnts->numEntityChars));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMapEnts->entityString);
		}
	}

	varMapTriggers = &varMapEnts->trigger;
	Load_MapTriggers(false);

	if (varMapEnts->stages)
	{
		if (varMapEnts->stages == (Stage*)0xFFFFFFFF)
		{
			varMapEnts->stages = AllocLoad_Stage();
			varStage = varMapEnts->stages;
			Load_StageArray(true, (varMapEnts->stageCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMapEnts->stages);
		}
	}

	DB_PopStreamPos();
}

void Load_MapEntsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMapEnts, sizeof(MapEnts) * count);
	MapEnts* pointer = varMapEnts;
	for (int i = 0; i < count; i++)
	{
		varMapEnts = pointer;
		Load_MapEnts(false);
		pointer++;
	}
}

void Load_MapEntsAsset(MapEnts** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_MAP_ENTS, (void**)varMapEntsPtr);
}

void Load_MapEntsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMapEnts, sizeof(MapEnts*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	MapEnts* pointer = *varMapEntsPtr;
	if (*varMapEntsPtr != nullptr)
	{
		if (*varMapEntsPtr == (MapEnts*)0xFFFFFFFF || *varMapEntsPtr == (MapEnts*)0xFFFFFFFE)
		{
			*varMapEntsPtr = AllocLoad_MapEnts();
			varMapEnts = *varMapEntsPtr;
			MapEnts** insertedPointer = nullptr;
			if (pointer == (MapEnts*)0xFFFFFFFE)
			{
				insertedPointer = (MapEnts**)DB_InsertPointer();
			}
			Load_MapEnts(true);
			Load_MapEntsAsset(varMapEntsPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varMapEntsPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varMapEntsPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_MapEntsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMapEntsPtr, sizeof(MapEnts*) * count);
	MapEnts** pointer = varMapEntsPtr;
	for (int i = 0; i < count; i++)
	{
		varMapEntsPtr = pointer;
		Load_MapEntsPtr(false);
		pointer++;
	}
}

void Load_MapTriggers(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMapTriggers, sizeof(MapTriggers));

	if (varMapTriggers->models)
	{
		if (varMapTriggers->models == (TriggerModel*)0xFFFFFFFF)
		{
			varMapTriggers->models = AllocLoad_TriggerModel();
			varTriggerModel = varMapTriggers->models;
			Load_TriggerModelArray(true, (varMapTriggers->count));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMapTriggers->models);
		}
	}

	if (varMapTriggers->hulls)
	{
		if (varMapTriggers->hulls == (TriggerHull*)0xFFFFFFFF)
		{
			varMapTriggers->hulls = AllocLoad_TriggerHull();
			varTriggerHull = varMapTriggers->hulls;
			Load_TriggerHullArray(true, (varMapTriggers->hullCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMapTriggers->hulls);
		}
	}

	if (varMapTriggers->slabs)
	{
		if (varMapTriggers->slabs == (TriggerSlab*)0xFFFFFFFF)
		{
			varMapTriggers->slabs = AllocLoad_TriggerSlab();
			varTriggerSlab = varMapTriggers->slabs;
			Load_TriggerSlabArray(true, (varMapTriggers->slabCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMapTriggers->slabs);
		}
	}

}

void Load_MapTriggersArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMapTriggers, sizeof(MapTriggers) * count);
	MapTriggers* pointer = varMapTriggers;
	for (int i = 0; i < count; i++)
	{
		varMapTriggers = pointer;
		Load_MapTriggers(false);
		pointer++;
	}
}

void Load_MapTriggersPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMapTriggers, sizeof(MapTriggers));
	if (*varMapTriggersPtr != nullptr)
	{
		if (*varMapTriggersPtr == (MapTriggers*)0xFFFFFFFF)
		{
			*varMapTriggersPtr = AllocLoad_MapTriggers();
			varMapTriggers = *varMapTriggersPtr;
			Load_MapTriggers(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMapTriggersPtr);
		}
	}
}

void Load_MapTriggersPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMapTriggersPtr, sizeof(MapTriggers*) * count);
	MapTriggers** pointer = varMapTriggersPtr;
	for (int i = 0; i < count; i++)
	{
		varMapTriggersPtr = pointer;
		Load_MapTriggersPtr(false);
		pointer++;
	}
}

void Load_Material(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterial, sizeof(Material));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varMaterialInfo = &varMaterial->info;
	Load_MaterialInfo(false);

	varMaterialTechniqueSetPtr = &varMaterial->techniqueSet;
	Load_MaterialTechniqueSetPtr(false);

	if (varMaterial->textureTable)
	{
		if (varMaterial->textureTable == (MaterialTextureDef*)0xFFFFFFFF)
		{
			varMaterial->textureTable = AllocLoad_MaterialTextureDef();
			varMaterialTextureDef = varMaterial->textureTable;
			Load_MaterialTextureDefArray(true, (varMaterial->textureCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMaterial->textureTable);
		}
	}

	if (varMaterial->constantTable)
	{
		if (varMaterial->constantTable == (MaterialConstantDef*)0xFFFFFFFF)
		{
			varMaterial->constantTable = AllocLoad_MaterialConstantDef();
			varMaterialConstantDef = varMaterial->constantTable;
			Load_MaterialConstantDefArray(true, (varMaterial->constantCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMaterial->constantTable);
		}
	}

	if (varMaterial->stateBitsTable)
	{
		if (varMaterial->stateBitsTable == (GfxStateBits*)0xFFFFFFFF)
		{
			varMaterial->stateBitsTable = AllocLoad_GfxStateBits();
			varGfxStateBits = varMaterial->stateBitsTable;
			Load_GfxStateBitsArray(true, (varMaterial->stateBitsCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMaterial->stateBitsTable);
		}
	}

	DB_PopStreamPos();
}

void Load_MaterialArgumentCodeConst(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialArgumentCodeConst, sizeof(MaterialArgumentCodeConst));

}

void Load_MaterialArgumentCodeConstArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialArgumentCodeConst, sizeof(MaterialArgumentCodeConst) * count);
	MaterialArgumentCodeConst* pointer = varMaterialArgumentCodeConst;
	for (int i = 0; i < count; i++)
	{
		varMaterialArgumentCodeConst = pointer;
		Load_MaterialArgumentCodeConst(false);
		pointer++;
	}
}

void Load_MaterialArgumentCodeConstPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialArgumentCodeConst, sizeof(MaterialArgumentCodeConst));
	if (*varMaterialArgumentCodeConstPtr != nullptr)
	{
		if (*varMaterialArgumentCodeConstPtr == (MaterialArgumentCodeConst*)0xFFFFFFFF)
		{
			*varMaterialArgumentCodeConstPtr = AllocLoad_MaterialArgumentCodeConst();
			varMaterialArgumentCodeConst = *varMaterialArgumentCodeConstPtr;
			Load_MaterialArgumentCodeConst(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialArgumentCodeConstPtr);
		}
	}
}

void Load_MaterialArgumentCodeConstPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialArgumentCodeConstPtr, sizeof(MaterialArgumentCodeConst*) * count);
	MaterialArgumentCodeConst** pointer = varMaterialArgumentCodeConstPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialArgumentCodeConstPtr = pointer;
		Load_MaterialArgumentCodeConstPtr(false);
		pointer++;
	}
}

void Load_MaterialArgumentDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialArgumentDef, sizeof(MaterialArgumentDef));

	switch (varMaterialShaderArgument->type)
	{
	case 1:
	case 7:
		varfloat = varMaterialArgumentDef->literalConst;
		Load_floatArray(true, (4));
		break;
	}
}

void Load_MaterialArgumentDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialArgumentDef, sizeof(MaterialArgumentDef) * count);
	MaterialArgumentDef* pointer = varMaterialArgumentDef;
	for (int i = 0; i < count; i++)
	{
		varMaterialArgumentDef = pointer;
		Load_MaterialArgumentDef(false);
		pointer++;
	}
}

void Load_MaterialArgumentDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialArgumentDef, sizeof(MaterialArgumentDef));
	if (*varMaterialArgumentDefPtr != nullptr)
	{
		if (*varMaterialArgumentDefPtr == (MaterialArgumentDef*)0xFFFFFFFF)
		{
			*varMaterialArgumentDefPtr = AllocLoad_MaterialArgumentDef();
			varMaterialArgumentDef = *varMaterialArgumentDefPtr;
			Load_MaterialArgumentDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialArgumentDefPtr);
		}
	}
}

void Load_MaterialArgumentDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialArgumentDefPtr, sizeof(MaterialArgumentDef*) * count);
	MaterialArgumentDef** pointer = varMaterialArgumentDefPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialArgumentDefPtr = pointer;
		Load_MaterialArgumentDefPtr(false);
		pointer++;
	}
}

void Load_MaterialArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterial, sizeof(Material) * count);
	Material* pointer = varMaterial;
	for (int i = 0; i < count; i++)
	{
		varMaterial = pointer;
		Load_Material(false);
		pointer++;
	}
}

void Load_MaterialAsset(Material** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_MATERIAL, (void**)varMaterialPtr);
}

void Load_MaterialConstantDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialConstantDef, sizeof(MaterialConstantDef));

}

void Load_MaterialConstantDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialConstantDef, sizeof(MaterialConstantDef) * count);
	MaterialConstantDef* pointer = varMaterialConstantDef;
	for (int i = 0; i < count; i++)
	{
		varMaterialConstantDef = pointer;
		Load_MaterialConstantDef(false);
		pointer++;
	}
}

void Load_MaterialConstantDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialConstantDef, sizeof(MaterialConstantDef));
	if (*varMaterialConstantDefPtr != nullptr)
	{
		if (*varMaterialConstantDefPtr == (MaterialConstantDef*)0xFFFFFFFF)
		{
			*varMaterialConstantDefPtr = AllocLoad_MaterialConstantDef();
			varMaterialConstantDef = *varMaterialConstantDefPtr;
			Load_MaterialConstantDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialConstantDefPtr);
		}
	}
}

void Load_MaterialConstantDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialConstantDefPtr, sizeof(MaterialConstantDef*) * count);
	MaterialConstantDef** pointer = varMaterialConstantDefPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialConstantDefPtr = pointer;
		Load_MaterialConstantDefPtr(false);
		pointer++;
	}
}

void Load_MaterialInfo(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialInfo, sizeof(MaterialInfo));

	varXString = &varMaterialInfo->name;
	Load_XString(false);

	varGfxDrawSurf = &varMaterialInfo->drawSurf;
	Load_GfxDrawSurf(false);

}

void Load_MaterialInfoArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialInfo, sizeof(MaterialInfo) * count);
	MaterialInfo* pointer = varMaterialInfo;
	for (int i = 0; i < count; i++)
	{
		varMaterialInfo = pointer;
		Load_MaterialInfo(false);
		pointer++;
	}
}

void Load_MaterialInfoPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialInfo, sizeof(MaterialInfo));
	if (*varMaterialInfoPtr != nullptr)
	{
		if (*varMaterialInfoPtr == (MaterialInfo*)0xFFFFFFFF)
		{
			*varMaterialInfoPtr = AllocLoad_MaterialInfo();
			varMaterialInfo = *varMaterialInfoPtr;
			Load_MaterialInfo(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialInfoPtr);
		}
	}
}

void Load_MaterialInfoPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialInfoPtr, sizeof(MaterialInfo*) * count);
	MaterialInfo** pointer = varMaterialInfoPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialInfoPtr = pointer;
		Load_MaterialInfoPtr(false);
		pointer++;
	}
}

void Load_MaterialPass(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialPass, sizeof(MaterialPass));

	varMaterialVertexDeclarationPtr = &varMaterialPass->vertexDecl;
	Load_MaterialVertexDeclarationPtr(false);

	varMaterialVertexShaderPtr = &varMaterialPass->vertexShader;
	Load_MaterialVertexShaderPtr(false);

	varMaterialPixelShaderPtr = &varMaterialPass->pixelShader;
	Load_MaterialPixelShaderPtr(false);

	if (varMaterialPass->args)
	{
		if (varMaterialPass->args == (MaterialShaderArgument*)0xFFFFFFFF)
		{
			varMaterialPass->args = AllocLoad_MaterialShaderArgument();
			varMaterialShaderArgument = varMaterialPass->args;
			Load_MaterialShaderArgumentArray(true, (varMaterialPass->perPrimArgCount + varMaterialPass->perObjArgCount + varMaterialPass->stableArgCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMaterialPass->args);
		}
	}

}

void Load_MaterialPassArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialPass, sizeof(MaterialPass) * count);
	MaterialPass* pointer = varMaterialPass;
	for (int i = 0; i < count; i++)
	{
		varMaterialPass = pointer;
		Load_MaterialPass(false);
		pointer++;
	}
}

void Load_MaterialPassPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialPass, sizeof(MaterialPass));
	if (*varMaterialPassPtr != nullptr)
	{
		if (*varMaterialPassPtr == (MaterialPass*)0xFFFFFFFF)
		{
			*varMaterialPassPtr = AllocLoad_MaterialPass();
			varMaterialPass = *varMaterialPassPtr;
			Load_MaterialPass(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialPassPtr);
		}
	}
}

void Load_MaterialPassPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialPassPtr, sizeof(MaterialPass*) * count);
	MaterialPass** pointer = varMaterialPassPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialPassPtr = pointer;
		Load_MaterialPassPtr(false);
		pointer++;
	}
}

void Load_MaterialPixelShader(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialPixelShader, sizeof(MaterialPixelShader));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varMaterialPixelShader->name;
	Load_XString(false);

	varMaterialPixelShaderProgram = &varMaterialPixelShader->prog;
	Load_MaterialPixelShaderProgram(false);

	DB_PopStreamPos();
}

void Load_MaterialPixelShaderArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialPixelShader, sizeof(MaterialPixelShader) * count);
	MaterialPixelShader* pointer = varMaterialPixelShader;
	for (int i = 0; i < count; i++)
	{
		varMaterialPixelShader = pointer;
		Load_MaterialPixelShader(false);
		pointer++;
	}
}

void Load_MaterialPixelShaderAsset(MaterialPixelShader** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_PIXELSHADER, (void**)varMaterialPixelShaderPtr);
}

void Load_MaterialPixelShaderProgram(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialPixelShaderProgram, sizeof(MaterialPixelShaderProgram));

	varGfxPixelShaderLoadDef = &varMaterialPixelShaderProgram->loadDef;
	Load_GfxPixelShaderLoadDef(false);

}

void Load_MaterialPixelShaderProgramArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialPixelShaderProgram, sizeof(MaterialPixelShaderProgram) * count);
	MaterialPixelShaderProgram* pointer = varMaterialPixelShaderProgram;
	for (int i = 0; i < count; i++)
	{
		varMaterialPixelShaderProgram = pointer;
		Load_MaterialPixelShaderProgram(false);
		pointer++;
	}
}

void Load_MaterialPixelShaderProgramPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialPixelShaderProgram, sizeof(MaterialPixelShaderProgram));
	if (*varMaterialPixelShaderProgramPtr != nullptr)
	{
		if (*varMaterialPixelShaderProgramPtr == (MaterialPixelShaderProgram*)0xFFFFFFFF)
		{
			*varMaterialPixelShaderProgramPtr = AllocLoad_MaterialPixelShaderProgram();
			varMaterialPixelShaderProgram = *varMaterialPixelShaderProgramPtr;
			Load_MaterialPixelShaderProgram(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialPixelShaderProgramPtr);
		}
	}
}

void Load_MaterialPixelShaderProgramPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialPixelShaderProgramPtr, sizeof(MaterialPixelShaderProgram*) * count);
	MaterialPixelShaderProgram** pointer = varMaterialPixelShaderProgramPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialPixelShaderProgramPtr = pointer;
		Load_MaterialPixelShaderProgramPtr(false);
		pointer++;
	}
}

void Load_MaterialPixelShaderPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialPixelShader, sizeof(MaterialPixelShader*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	MaterialPixelShader* pointer = *varMaterialPixelShaderPtr;
	if (*varMaterialPixelShaderPtr != nullptr)
	{
		if (*varMaterialPixelShaderPtr == (MaterialPixelShader*)0xFFFFFFFF || *varMaterialPixelShaderPtr == (MaterialPixelShader*)0xFFFFFFFE)
		{
			*varMaterialPixelShaderPtr = AllocLoad_MaterialPixelShader();
			varMaterialPixelShader = *varMaterialPixelShaderPtr;
			MaterialPixelShader** insertedPointer = nullptr;
			if (pointer == (MaterialPixelShader*)0xFFFFFFFE)
			{
				insertedPointer = (MaterialPixelShader**)DB_InsertPointer();
			}
			Load_MaterialPixelShader(true);
			Load_MaterialPixelShaderAsset(varMaterialPixelShaderPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varMaterialPixelShaderPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varMaterialPixelShaderPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_MaterialPixelShaderPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialPixelShaderPtr, sizeof(MaterialPixelShader*) * count);
	MaterialPixelShader** pointer = varMaterialPixelShaderPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialPixelShaderPtr = pointer;
		Load_MaterialPixelShaderPtr(false);
		pointer++;
	}
}

void Load_MaterialPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterial, sizeof(Material*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	Material* pointer = *varMaterialPtr;
	if (*varMaterialPtr != nullptr)
	{
		if (*varMaterialPtr == (Material*)0xFFFFFFFF || *varMaterialPtr == (Material*)0xFFFFFFFE)
		{
			*varMaterialPtr = AllocLoad_Material();
			varMaterial = *varMaterialPtr;
			Material** insertedPointer = nullptr;
			if (pointer == (Material*)0xFFFFFFFE)
			{
				insertedPointer = (Material**)DB_InsertPointer();
			}
			Load_Material(true);
			Load_MaterialAsset(varMaterialPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varMaterialPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varMaterialPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_MaterialPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialPtr, sizeof(Material*) * count);
	Material** pointer = varMaterialPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialPtr = pointer;
		Load_MaterialPtr(false);
		pointer++;
	}
}

void Load_MaterialShaderArgument(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialShaderArgument, sizeof(MaterialShaderArgument));

	varMaterialArgumentDef = &varMaterialShaderArgument->u;
	Load_MaterialArgumentDef(false);

}

void Load_MaterialShaderArgumentArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialShaderArgument, sizeof(MaterialShaderArgument) * count);
	MaterialShaderArgument* pointer = varMaterialShaderArgument;
	for (int i = 0; i < count; i++)
	{
		varMaterialShaderArgument = pointer;
		Load_MaterialShaderArgument(false);
		pointer++;
	}
}

void Load_MaterialShaderArgumentPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialShaderArgument, sizeof(MaterialShaderArgument));
	if (*varMaterialShaderArgumentPtr != nullptr)
	{
		if (*varMaterialShaderArgumentPtr == (MaterialShaderArgument*)0xFFFFFFFF)
		{
			*varMaterialShaderArgumentPtr = AllocLoad_MaterialShaderArgument();
			varMaterialShaderArgument = *varMaterialShaderArgumentPtr;
			Load_MaterialShaderArgument(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialShaderArgumentPtr);
		}
	}
}

void Load_MaterialShaderArgumentPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialShaderArgumentPtr, sizeof(MaterialShaderArgument*) * count);
	MaterialShaderArgument** pointer = varMaterialShaderArgumentPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialShaderArgumentPtr = pointer;
		Load_MaterialShaderArgumentPtr(false);
		pointer++;
	}
}

void Load_MaterialStreamRouting(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialStreamRouting, sizeof(MaterialStreamRouting));

}

void Load_MaterialStreamRoutingArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialStreamRouting, sizeof(MaterialStreamRouting) * count);
	MaterialStreamRouting* pointer = varMaterialStreamRouting;
	for (int i = 0; i < count; i++)
	{
		varMaterialStreamRouting = pointer;
		Load_MaterialStreamRouting(false);
		pointer++;
	}
}

void Load_MaterialStreamRoutingPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialStreamRouting, sizeof(MaterialStreamRouting));
	if (*varMaterialStreamRoutingPtr != nullptr)
	{
		if (*varMaterialStreamRoutingPtr == (MaterialStreamRouting*)0xFFFFFFFF)
		{
			*varMaterialStreamRoutingPtr = AllocLoad_MaterialStreamRouting();
			varMaterialStreamRouting = *varMaterialStreamRoutingPtr;
			Load_MaterialStreamRouting(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialStreamRoutingPtr);
		}
	}
}

void Load_MaterialStreamRoutingPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialStreamRoutingPtr, sizeof(MaterialStreamRouting*) * count);
	MaterialStreamRouting** pointer = varMaterialStreamRoutingPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialStreamRoutingPtr = pointer;
		Load_MaterialStreamRoutingPtr(false);
		pointer++;
	}
}

void Load_MaterialTechnique(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialTechnique, (sizeof(MaterialTechnique) - sizeof(MaterialPass)));

	varMaterialPass = varMaterialTechnique->passArray;
	Load_MaterialPassArray(true, varMaterialTechnique->passCount);

	varXString = &varMaterialTechnique->name;
	Load_XString(false);

}

void Load_MaterialTechniqueArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialTechnique, sizeof(MaterialTechnique) * count);
	MaterialTechnique* pointer = varMaterialTechnique;
	for (int i = 0; i < count; i++)
	{
		varMaterialTechnique = pointer;
		Load_MaterialTechnique(false);
		pointer++;
	}
}

void Load_MaterialTechniquePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialTechnique, sizeof(MaterialTechnique));
	if (*varMaterialTechniquePtr != nullptr)
	{
		if (*varMaterialTechniquePtr == (MaterialTechnique*)0xFFFFFFFF)
		{
			*varMaterialTechniquePtr = AllocLoad_MaterialTechnique();
			varMaterialTechnique = *varMaterialTechniquePtr;
			Load_MaterialTechnique(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialTechniquePtr);
		}
	}
}

void Load_MaterialTechniquePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialTechniquePtr, sizeof(MaterialTechnique*) * count);
	MaterialTechnique** pointer = varMaterialTechniquePtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialTechniquePtr = pointer;
		Load_MaterialTechniquePtr(false);
		pointer++;
	}
}

void Load_MaterialTechniqueSet(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialTechniqueSet, sizeof(MaterialTechniqueSet));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varMaterialTechniqueSet->name;
	Load_XString(false);

	if (varMaterialTechniqueSet->techniques)
	{
		varMaterialTechniquePtr = varMaterialTechniqueSet->techniques;
		Load_MaterialTechniquePtrArray(false, 48);
	}

	DB_PopStreamPos();
}

void Load_MaterialTechniqueSetArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialTechniqueSet, sizeof(MaterialTechniqueSet) * count);
	MaterialTechniqueSet* pointer = varMaterialTechniqueSet;
	for (int i = 0; i < count; i++)
	{
		varMaterialTechniqueSet = pointer;
		Load_MaterialTechniqueSet(false);
		pointer++;
	}
}

void Load_MaterialTechniqueSetAsset(MaterialTechniqueSet** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_TECHNIQUE_SET, (void**)varMaterialTechniqueSetPtr);
}

void Load_MaterialTechniqueSetPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialTechniqueSet, sizeof(MaterialTechniqueSet*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	MaterialTechniqueSet* pointer = *varMaterialTechniqueSetPtr;
	if (*varMaterialTechniqueSetPtr != nullptr)
	{
		if (*varMaterialTechniqueSetPtr == (MaterialTechniqueSet*)0xFFFFFFFF || *varMaterialTechniqueSetPtr == (MaterialTechniqueSet*)0xFFFFFFFE)
		{
			*varMaterialTechniqueSetPtr = AllocLoad_MaterialTechniqueSet();
			varMaterialTechniqueSet = *varMaterialTechniqueSetPtr;
			MaterialTechniqueSet** insertedPointer = nullptr;
			if (pointer == (MaterialTechniqueSet*)0xFFFFFFFE)
			{
				insertedPointer = (MaterialTechniqueSet**)DB_InsertPointer();
			}
			Load_MaterialTechniqueSet(true);
			Load_MaterialTechniqueSetAsset(varMaterialTechniqueSetPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varMaterialTechniqueSetPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varMaterialTechniqueSetPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_MaterialTechniqueSetPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialTechniqueSetPtr, sizeof(MaterialTechniqueSet*) * count);
	MaterialTechniqueSet** pointer = varMaterialTechniqueSetPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialTechniqueSetPtr = pointer;
		Load_MaterialTechniqueSetPtr(false);
		pointer++;
	}
}

void Load_MaterialTextureDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialTextureDef, sizeof(MaterialTextureDef));

	varMaterialTextureDefInfo = &varMaterialTextureDef->u;
	Load_MaterialTextureDefInfo(false);

}

void Load_MaterialTextureDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialTextureDef, sizeof(MaterialTextureDef) * count);
	MaterialTextureDef* pointer = varMaterialTextureDef;
	for (int i = 0; i < count; i++)
	{
		varMaterialTextureDef = pointer;
		Load_MaterialTextureDef(false);
		pointer++;
	}
}

void Load_MaterialTextureDefInfo(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialTextureDefInfo, sizeof(MaterialTextureDefInfo));

	switch (varMaterialTextureDef->semantic)
	{
	case 11:
		varwater_tPtr = &varMaterialTextureDefInfo->water;
		Load_water_tPtr(false);
		break;
	default:
		varGfxImagePtr = &varMaterialTextureDefInfo->image;
		Load_GfxImagePtr(false);
		break;
	}
}

void Load_MaterialTextureDefInfoArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialTextureDefInfo, sizeof(MaterialTextureDefInfo) * count);
	MaterialTextureDefInfo* pointer = varMaterialTextureDefInfo;
	for (int i = 0; i < count; i++)
	{
		varMaterialTextureDefInfo = pointer;
		Load_MaterialTextureDefInfo(false);
		pointer++;
	}
}

void Load_MaterialTextureDefInfoPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialTextureDefInfo, sizeof(MaterialTextureDefInfo));
	if (*varMaterialTextureDefInfoPtr != nullptr)
	{
		if (*varMaterialTextureDefInfoPtr == (MaterialTextureDefInfo*)0xFFFFFFFF)
		{
			*varMaterialTextureDefInfoPtr = AllocLoad_MaterialTextureDefInfo();
			varMaterialTextureDefInfo = *varMaterialTextureDefInfoPtr;
			Load_MaterialTextureDefInfo(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialTextureDefInfoPtr);
		}
	}
}

void Load_MaterialTextureDefInfoPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialTextureDefInfoPtr, sizeof(MaterialTextureDefInfo*) * count);
	MaterialTextureDefInfo** pointer = varMaterialTextureDefInfoPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialTextureDefInfoPtr = pointer;
		Load_MaterialTextureDefInfoPtr(false);
		pointer++;
	}
}

void Load_MaterialTextureDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialTextureDef, sizeof(MaterialTextureDef));
	if (*varMaterialTextureDefPtr != nullptr)
	{
		if (*varMaterialTextureDefPtr == (MaterialTextureDef*)0xFFFFFFFF)
		{
			*varMaterialTextureDefPtr = AllocLoad_MaterialTextureDef();
			varMaterialTextureDef = *varMaterialTextureDefPtr;
			Load_MaterialTextureDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialTextureDefPtr);
		}
	}
}

void Load_MaterialTextureDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialTextureDefPtr, sizeof(MaterialTextureDef*) * count);
	MaterialTextureDef** pointer = varMaterialTextureDefPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialTextureDefPtr = pointer;
		Load_MaterialTextureDefPtr(false);
		pointer++;
	}
}

void Load_MaterialVertexDeclaration(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialVertexDeclaration, sizeof(MaterialVertexDeclaration));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varMaterialVertexDeclaration->name;
	Load_XString(false);

	varMaterialVertexStreamRouting = &varMaterialVertexDeclaration->routing;
	Load_MaterialVertexStreamRouting(false);

	DB_PopStreamPos();
}

void Load_MaterialVertexDeclarationArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialVertexDeclaration, sizeof(MaterialVertexDeclaration) * count);
	MaterialVertexDeclaration* pointer = varMaterialVertexDeclaration;
	for (int i = 0; i < count; i++)
	{
		varMaterialVertexDeclaration = pointer;
		Load_MaterialVertexDeclaration(false);
		pointer++;
	}
}

void Load_MaterialVertexDeclarationAsset(MaterialVertexDeclaration** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_VERTEXDECL, (void**)varMaterialVertexDeclarationPtr);
}

void Load_MaterialVertexDeclarationPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialVertexDeclaration, sizeof(MaterialVertexDeclaration*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	MaterialVertexDeclaration* pointer = *varMaterialVertexDeclarationPtr;
	if (*varMaterialVertexDeclarationPtr != nullptr)
	{
		if (*varMaterialVertexDeclarationPtr == (MaterialVertexDeclaration*)0xFFFFFFFF || *varMaterialVertexDeclarationPtr == (MaterialVertexDeclaration*)0xFFFFFFFE)
		{
			*varMaterialVertexDeclarationPtr = AllocLoad_MaterialVertexDeclaration();
			varMaterialVertexDeclaration = *varMaterialVertexDeclarationPtr;
			MaterialVertexDeclaration** insertedPointer = nullptr;
			if (pointer == (MaterialVertexDeclaration*)0xFFFFFFFE)
			{
				insertedPointer = (MaterialVertexDeclaration**)DB_InsertPointer();
			}
			Load_MaterialVertexDeclaration(true);
			Load_MaterialVertexDeclarationAsset(varMaterialVertexDeclarationPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varMaterialVertexDeclarationPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varMaterialVertexDeclarationPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_MaterialVertexDeclarationPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialVertexDeclarationPtr, sizeof(MaterialVertexDeclaration*) * count);
	MaterialVertexDeclaration** pointer = varMaterialVertexDeclarationPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialVertexDeclarationPtr = pointer;
		Load_MaterialVertexDeclarationPtr(false);
		pointer++;
	}
}

void Load_MaterialVertexShader(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialVertexShader, sizeof(MaterialVertexShader));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varMaterialVertexShader->name;
	Load_XString(false);

	varMaterialVertexShaderProgram = &varMaterialVertexShader->prog;
	Load_MaterialVertexShaderProgram(false);

	DB_PopStreamPos();
}

void Load_MaterialVertexShaderArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialVertexShader, sizeof(MaterialVertexShader) * count);
	MaterialVertexShader* pointer = varMaterialVertexShader;
	for (int i = 0; i < count; i++)
	{
		varMaterialVertexShader = pointer;
		Load_MaterialVertexShader(false);
		pointer++;
	}
}

void Load_MaterialVertexShaderAsset(MaterialVertexShader** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_VERTEXSHADER, (void**)varMaterialVertexShaderPtr);
}

void Load_MaterialVertexShaderProgram(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialVertexShaderProgram, sizeof(MaterialVertexShaderProgram));

	varGfxVertexShaderLoadDef = &varMaterialVertexShaderProgram->loadDef;
	Load_GfxVertexShaderLoadDef(false);

}

void Load_MaterialVertexShaderProgramArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialVertexShaderProgram, sizeof(MaterialVertexShaderProgram) * count);
	MaterialVertexShaderProgram* pointer = varMaterialVertexShaderProgram;
	for (int i = 0; i < count; i++)
	{
		varMaterialVertexShaderProgram = pointer;
		Load_MaterialVertexShaderProgram(false);
		pointer++;
	}
}

void Load_MaterialVertexShaderProgramPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialVertexShaderProgram, sizeof(MaterialVertexShaderProgram));
	if (*varMaterialVertexShaderProgramPtr != nullptr)
	{
		if (*varMaterialVertexShaderProgramPtr == (MaterialVertexShaderProgram*)0xFFFFFFFF)
		{
			*varMaterialVertexShaderProgramPtr = AllocLoad_MaterialVertexShaderProgram();
			varMaterialVertexShaderProgram = *varMaterialVertexShaderProgramPtr;
			Load_MaterialVertexShaderProgram(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialVertexShaderProgramPtr);
		}
	}
}

void Load_MaterialVertexShaderProgramPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialVertexShaderProgramPtr, sizeof(MaterialVertexShaderProgram*) * count);
	MaterialVertexShaderProgram** pointer = varMaterialVertexShaderProgramPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialVertexShaderProgramPtr = pointer;
		Load_MaterialVertexShaderProgramPtr(false);
		pointer++;
	}
}

void Load_MaterialVertexShaderPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialVertexShader, sizeof(MaterialVertexShader*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	MaterialVertexShader* pointer = *varMaterialVertexShaderPtr;
	if (*varMaterialVertexShaderPtr != nullptr)
	{
		if (*varMaterialVertexShaderPtr == (MaterialVertexShader*)0xFFFFFFFF || *varMaterialVertexShaderPtr == (MaterialVertexShader*)0xFFFFFFFE)
		{
			*varMaterialVertexShaderPtr = AllocLoad_MaterialVertexShader();
			varMaterialVertexShader = *varMaterialVertexShaderPtr;
			MaterialVertexShader** insertedPointer = nullptr;
			if (pointer == (MaterialVertexShader*)0xFFFFFFFE)
			{
				insertedPointer = (MaterialVertexShader**)DB_InsertPointer();
			}
			Load_MaterialVertexShader(true);
			Load_MaterialVertexShaderAsset(varMaterialVertexShaderPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varMaterialVertexShaderPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varMaterialVertexShaderPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_MaterialVertexShaderPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialVertexShaderPtr, sizeof(MaterialVertexShader*) * count);
	MaterialVertexShader** pointer = varMaterialVertexShaderPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialVertexShaderPtr = pointer;
		Load_MaterialVertexShaderPtr(false);
		pointer++;
	}
}

void Load_MaterialVertexStreamRouting(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialVertexStreamRouting, sizeof(MaterialVertexStreamRouting));

	varMaterialStreamRouting = varMaterialVertexStreamRouting->data;
	Load_MaterialStreamRoutingArray(false, 13);

}

void Load_MaterialVertexStreamRoutingArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialVertexStreamRouting, sizeof(MaterialVertexStreamRouting) * count);
	MaterialVertexStreamRouting* pointer = varMaterialVertexStreamRouting;
	for (int i = 0; i < count; i++)
	{
		varMaterialVertexStreamRouting = pointer;
		Load_MaterialVertexStreamRouting(false);
		pointer++;
	}
}

void Load_MaterialVertexStreamRoutingPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMaterialVertexStreamRouting, sizeof(MaterialVertexStreamRouting));
	if (*varMaterialVertexStreamRoutingPtr != nullptr)
	{
		if (*varMaterialVertexStreamRoutingPtr == (MaterialVertexStreamRouting*)0xFFFFFFFF)
		{
			*varMaterialVertexStreamRoutingPtr = AllocLoad_MaterialVertexStreamRouting();
			varMaterialVertexStreamRouting = *varMaterialVertexStreamRoutingPtr;
			Load_MaterialVertexStreamRouting(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMaterialVertexStreamRoutingPtr);
		}
	}
}

void Load_MaterialVertexStreamRoutingPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMaterialVertexStreamRoutingPtr, sizeof(MaterialVertexStreamRouting*) * count);
	MaterialVertexStreamRouting** pointer = varMaterialVertexStreamRoutingPtr;
	for (int i = 0; i < count; i++)
	{
		varMaterialVertexStreamRoutingPtr = pointer;
		Load_MaterialVertexStreamRoutingPtr(false);
		pointer++;
	}
}

void Load_MenuEventHandler(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMenuEventHandler, sizeof(MenuEventHandler));

	varEventData = &varMenuEventHandler->eventData;
	Load_EventData(false);

}

void Load_MenuEventHandlerArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMenuEventHandler, sizeof(MenuEventHandler) * count);
	MenuEventHandler* pointer = varMenuEventHandler;
	for (int i = 0; i < count; i++)
	{
		varMenuEventHandler = pointer;
		Load_MenuEventHandler(false);
		pointer++;
	}
}

void Load_MenuEventHandlerPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMenuEventHandler, sizeof(MenuEventHandler));
	if (*varMenuEventHandlerPtr != nullptr)
	{
		if (*varMenuEventHandlerPtr == (MenuEventHandler*)0xFFFFFFFF)
		{
			*varMenuEventHandlerPtr = AllocLoad_MenuEventHandler();
			varMenuEventHandler = *varMenuEventHandlerPtr;
			Load_MenuEventHandler(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMenuEventHandlerPtr);
		}
	}
}

void Load_MenuEventHandlerPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMenuEventHandlerPtr, sizeof(MenuEventHandler*) * count);
	MenuEventHandler** pointer = varMenuEventHandlerPtr;
	for (int i = 0; i < count; i++)
	{
		varMenuEventHandlerPtr = pointer;
		Load_MenuEventHandlerPtr(false);
		pointer++;
	}
}

void Load_MenuEventHandlerSet(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMenuEventHandlerSet, sizeof(MenuEventHandlerSet));

	if (varMenuEventHandlerSet->eventHandlers)
	{
		if (varMenuEventHandlerSet->eventHandlers == (MenuEventHandler**)0xFFFFFFFF)
		{
			varMenuEventHandlerSet->eventHandlers = AllocLoad_MenuEventHandlerPtr();
			varMenuEventHandlerPtr = varMenuEventHandlerSet->eventHandlers;
			Load_MenuEventHandlerPtrArray(true, (varMenuEventHandlerSet->eventHandlerCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMenuEventHandlerSet->eventHandlers);
		}
	}

}

void Load_MenuEventHandlerSetArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMenuEventHandlerSet, sizeof(MenuEventHandlerSet) * count);
	MenuEventHandlerSet* pointer = varMenuEventHandlerSet;
	for (int i = 0; i < count; i++)
	{
		varMenuEventHandlerSet = pointer;
		Load_MenuEventHandlerSet(false);
		pointer++;
	}
}

void Load_MenuEventHandlerSetPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMenuEventHandlerSet, sizeof(MenuEventHandlerSet));
	if (*varMenuEventHandlerSetPtr != nullptr)
	{
		if (*varMenuEventHandlerSetPtr == (MenuEventHandlerSet*)0xFFFFFFFF)
		{
			*varMenuEventHandlerSetPtr = AllocLoad_MenuEventHandlerSet();
			varMenuEventHandlerSet = *varMenuEventHandlerSetPtr;
			Load_MenuEventHandlerSet(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMenuEventHandlerSetPtr);
		}
	}
}

void Load_MenuEventHandlerSetPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMenuEventHandlerSetPtr, sizeof(MenuEventHandlerSet*) * count);
	MenuEventHandlerSet** pointer = varMenuEventHandlerSetPtr;
	for (int i = 0; i < count; i++)
	{
		varMenuEventHandlerSetPtr = pointer;
		Load_MenuEventHandlerSetPtr(false);
		pointer++;
	}
}

void Load_MenuList(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMenuList, sizeof(MenuList));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varMenuList->name;
	Load_XString(false);

	if (varMenuList->menus)
	{
		if (varMenuList->menus == (menuDef_t**)0xFFFFFFFF)
		{
			varMenuList->menus = AllocLoad_menuDef_tPtr();
			varmenuDef_tPtr = varMenuList->menus;
			Load_menuDef_tPtrArray(true, (varMenuList->menuCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMenuList->menus);
		}
	}

	DB_PopStreamPos();
}

void Load_MenuListArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMenuList, sizeof(MenuList) * count);
	MenuList* pointer = varMenuList;
	for (int i = 0; i < count; i++)
	{
		varMenuList = pointer;
		Load_MenuList(false);
		pointer++;
	}
}

void Load_MenuListAsset(MenuList** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_MENULIST, (void**)varMenuListPtr);
}

void Load_MenuListPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMenuList, sizeof(MenuList*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	MenuList* pointer = *varMenuListPtr;
	if (*varMenuListPtr != nullptr)
	{
		if (*varMenuListPtr == (MenuList*)0xFFFFFFFF || *varMenuListPtr == (MenuList*)0xFFFFFFFE)
		{
			*varMenuListPtr = AllocLoad_MenuList();
			varMenuList = *varMenuListPtr;
			MenuList** insertedPointer = nullptr;
			if (pointer == (MenuList*)0xFFFFFFFE)
			{
				insertedPointer = (MenuList**)DB_InsertPointer();
			}
			Load_MenuList(true);
			Load_MenuListAsset(varMenuListPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varMenuListPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varMenuListPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_MenuListPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMenuListPtr, sizeof(MenuList*) * count);
	MenuList** pointer = varMenuListPtr;
	for (int i = 0; i < count; i++)
	{
		varMenuListPtr = pointer;
		Load_MenuListPtr(false);
		pointer++;
	}
}

void Load_MssSound(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMssSound, sizeof(MssSound));

	var_AILSOUNDINFO = &varMssSound->info;
	Load__AILSOUNDINFO(false);

	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (varMssSound->data)
	{
		if (varMssSound->data == (char*)0xFFFFFFFF)
		{
			varMssSound->data = AllocLoad_char();
			varchar = varMssSound->data;
			Load_charArray(true, (varMssSound->info.data_len));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varMssSound->data);
		}
	}
	DB_PopStreamPos();

}

void Load_MssSoundArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMssSound, sizeof(MssSound) * count);
	MssSound* pointer = varMssSound;
	for (int i = 0; i < count; i++)
	{
		varMssSound = pointer;
		Load_MssSound(false);
		pointer++;
	}
}

void Load_MssSoundPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varMssSound, sizeof(MssSound));
	if (*varMssSoundPtr != nullptr)
	{
		if (*varMssSoundPtr == (MssSound*)0xFFFFFFFF)
		{
			*varMssSoundPtr = AllocLoad_MssSound();
			varMssSound = *varMssSoundPtr;
			Load_MssSound(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varMssSoundPtr);
		}
	}
}

void Load_MssSoundPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varMssSoundPtr, sizeof(MssSound*) * count);
	MssSound** pointer = varMssSoundPtr;
	for (int i = 0; i < count; i++)
	{
		varMssSoundPtr = pointer;
		Load_MssSoundPtr(false);
		pointer++;
	}
}

void Load_Operand(bool atStreamStart)
{
	Load_Stream(atStreamStart, varOperand, sizeof(Operand));

	varoperandInternalDataUnion = &varOperand->internals;
	Load_operandInternalDataUnion(false);

}

void Load_OperandArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varOperand, sizeof(Operand) * count);
	Operand* pointer = varOperand;
	for (int i = 0; i < count; i++)
	{
		varOperand = pointer;
		Load_Operand(false);
		pointer++;
	}
}

void Load_OperandPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varOperand, sizeof(Operand));
	if (*varOperandPtr != nullptr)
	{
		if (*varOperandPtr == (Operand*)0xFFFFFFFF)
		{
			*varOperandPtr = AllocLoad_Operand();
			varOperand = *varOperandPtr;
			Load_Operand(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varOperandPtr);
		}
	}
}

void Load_OperandPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varOperandPtr, sizeof(Operand*) * count);
	Operand** pointer = varOperandPtr;
	for (int i = 0; i < count; i++)
	{
		varOperandPtr = pointer;
		Load_OperandPtr(false);
		pointer++;
	}
}

void Load_PackedTexCoords(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPackedTexCoords, sizeof(PackedTexCoords));

}

void Load_PackedTexCoordsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPackedTexCoords, sizeof(PackedTexCoords) * count);
	PackedTexCoords* pointer = varPackedTexCoords;
	for (int i = 0; i < count; i++)
	{
		varPackedTexCoords = pointer;
		Load_PackedTexCoords(false);
		pointer++;
	}
}

void Load_PackedTexCoordsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPackedTexCoords, sizeof(PackedTexCoords));
	if (*varPackedTexCoordsPtr != nullptr)
	{
		*varPackedTexCoordsPtr = AllocLoad_PackedTexCoords();
		varPackedTexCoords = *varPackedTexCoordsPtr;
		Load_PackedTexCoords(true);
	}
}

void Load_PackedTexCoordsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPackedTexCoordsPtr, sizeof(PackedTexCoords*) * count);
	PackedTexCoords** pointer = varPackedTexCoordsPtr;
	for (int i = 0; i < count; i++)
	{
		varPackedTexCoordsPtr = pointer;
		Load_PackedTexCoordsPtr(false);
		pointer++;
	}
}

void Load_PackedUnitVec(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPackedUnitVec, sizeof(PackedUnitVec));

}

void Load_PackedUnitVecArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPackedUnitVec, sizeof(PackedUnitVec) * count);
	PackedUnitVec* pointer = varPackedUnitVec;
	for (int i = 0; i < count; i++)
	{
		varPackedUnitVec = pointer;
		Load_PackedUnitVec(false);
		pointer++;
	}
}

void Load_PackedUnitVecPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPackedUnitVec, sizeof(PackedUnitVec));
	if (*varPackedUnitVecPtr != nullptr)
	{
		if (*varPackedUnitVecPtr == (PackedUnitVec*)0xFFFFFFFF)
		{
			*varPackedUnitVecPtr = AllocLoad_PackedUnitVec();
			varPackedUnitVec = *varPackedUnitVecPtr;
			Load_PackedUnitVec(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varPackedUnitVecPtr);
		}
	}
}

void Load_PackedUnitVecPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPackedUnitVecPtr, sizeof(PackedUnitVec*) * count);
	PackedUnitVec** pointer = varPackedUnitVecPtr;
	for (int i = 0; i < count; i++)
	{
		varPackedUnitVecPtr = pointer;
		Load_PackedUnitVecPtr(false);
		pointer++;
	}
}

void Load_PhysCollmap(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPhysCollmap, sizeof(PhysCollmap));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varPhysCollmap->name;
	Load_XString(false);

	if (varPhysCollmap->geoms)
	{
		varPhysGeomInfoPtr = &varPhysCollmap->geoms;
		Load_PhysGeomInfoPtr(false);
	}

	varPhysMass = &varPhysCollmap->mass;
	Load_PhysMass(false);

	varBounds = &varPhysCollmap->bounds;
	Load_Bounds(false);

	DB_PopStreamPos();
}

void Load_PhysCollmapArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPhysCollmap, sizeof(PhysCollmap) * count);
	PhysCollmap* pointer = varPhysCollmap;
	for (int i = 0; i < count; i++)
	{
		varPhysCollmap = pointer;
		Load_PhysCollmap(false);
		pointer++;
	}
}

void Load_PhysCollmapAsset(PhysCollmap** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_PHYSCOLLMAP, (void**)varPhysCollmapPtr);
}

void Load_PhysCollmapPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPhysCollmap, sizeof(PhysCollmap*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	PhysCollmap* pointer = *varPhysCollmapPtr;
	if (*varPhysCollmapPtr != nullptr)
	{
		if (*varPhysCollmapPtr == (PhysCollmap*)0xFFFFFFFF || *varPhysCollmapPtr == (PhysCollmap*)0xFFFFFFFE)
		{
			*varPhysCollmapPtr = AllocLoad_PhysCollmap();
			varPhysCollmap = *varPhysCollmapPtr;
			PhysCollmap** insertedPointer = nullptr;
			if (pointer == (PhysCollmap*)0xFFFFFFFE)
			{
				insertedPointer = (PhysCollmap**)DB_InsertPointer();
			}
			Load_PhysCollmap(true);
			Load_PhysCollmapAsset(varPhysCollmapPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varPhysCollmapPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varPhysCollmapPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_PhysCollmapPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPhysCollmapPtr, sizeof(PhysCollmap*) * count);
	PhysCollmap** pointer = varPhysCollmapPtr;
	for (int i = 0; i < count; i++)
	{
		varPhysCollmapPtr = pointer;
		Load_PhysCollmapPtr(false);
		pointer++;
	}
}

void Load_PhysGeomInfo(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPhysGeomInfo, sizeof(PhysGeomInfo));

	if (varPhysGeomInfo->brushWrapper)
	{
		varBrushWrapperPtr = &varPhysGeomInfo->brushWrapper;
		Load_BrushWrapperPtr(false);
	}

	varBounds = &varPhysGeomInfo->bounds;
	Load_Bounds(false);

}

void Load_PhysGeomInfoArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPhysGeomInfo, sizeof(PhysGeomInfo) * count);
	PhysGeomInfo* pointer = varPhysGeomInfo;
	for (int i = 0; i < count; i++)
	{
		varPhysGeomInfo = pointer;
		Load_PhysGeomInfo(false);
		pointer++;
	}
}

void Load_PhysGeomInfoPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPhysGeomInfo, sizeof(PhysGeomInfo));
	if (*varPhysGeomInfoPtr != nullptr)
	{
		if (*varPhysGeomInfoPtr == (PhysGeomInfo*)0xFFFFFFFF)
		{
			*varPhysGeomInfoPtr = AllocLoad_PhysGeomInfo();
			varPhysGeomInfo = *varPhysGeomInfoPtr;
			Load_PhysGeomInfo(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varPhysGeomInfoPtr);
		}
	}
}

void Load_PhysGeomInfoPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPhysGeomInfoPtr, sizeof(PhysGeomInfo*) * count);
	PhysGeomInfo** pointer = varPhysGeomInfoPtr;
	for (int i = 0; i < count; i++)
	{
		varPhysGeomInfoPtr = pointer;
		Load_PhysGeomInfoPtr(false);
		pointer++;
	}
}

void Load_PhysMass(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPhysMass, sizeof(PhysMass));

}

void Load_PhysMassArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPhysMass, sizeof(PhysMass) * count);
	PhysMass* pointer = varPhysMass;
	for (int i = 0; i < count; i++)
	{
		varPhysMass = pointer;
		Load_PhysMass(false);
		pointer++;
	}
}

void Load_PhysMassPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPhysMass, sizeof(PhysMass));
	if (*varPhysMassPtr != nullptr)
	{
		if (*varPhysMassPtr == (PhysMass*)0xFFFFFFFF)
		{
			*varPhysMassPtr = AllocLoad_PhysMass();
			varPhysMass = *varPhysMassPtr;
			Load_PhysMass(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varPhysMassPtr);
		}
	}
}

void Load_PhysMassPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPhysMassPtr, sizeof(PhysMass*) * count);
	PhysMass** pointer = varPhysMassPtr;
	for (int i = 0; i < count; i++)
	{
		varPhysMassPtr = pointer;
		Load_PhysMassPtr(false);
		pointer++;
	}
}

void Load_PhysPreset(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPhysPreset, sizeof(PhysPreset));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varPhysPreset->name;
	Load_XString(false);

	varXString = &varPhysPreset->sndAliasPrefix;
	Load_XString(false);

	DB_PopStreamPos();
}

void Load_PhysPresetArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPhysPreset, sizeof(PhysPreset) * count);
	PhysPreset* pointer = varPhysPreset;
	for (int i = 0; i < count; i++)
	{
		varPhysPreset = pointer;
		Load_PhysPreset(false);
		pointer++;
	}
}

void Load_PhysPresetAsset(PhysPreset** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_PHYSPRESET, (void**)varPhysPresetPtr);
}

void Load_PhysPresetPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPhysPreset, sizeof(PhysPreset*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	PhysPreset* pointer = *varPhysPresetPtr;
	if (*varPhysPresetPtr != nullptr)
	{
		if (*varPhysPresetPtr == (PhysPreset*)0xFFFFFFFF || *varPhysPresetPtr == (PhysPreset*)0xFFFFFFFE)
		{
			*varPhysPresetPtr = AllocLoad_PhysPreset();
			varPhysPreset = *varPhysPresetPtr;
			PhysPreset** insertedPointer = nullptr;
			if (pointer == (PhysPreset*)0xFFFFFFFE)
			{
				insertedPointer = (PhysPreset**)DB_InsertPointer();
			}
			Load_PhysPreset(true);
			Load_PhysPresetAsset(varPhysPresetPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varPhysPresetPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varPhysPresetPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_PhysPresetPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPhysPresetPtr, sizeof(PhysPreset*) * count);
	PhysPreset** pointer = varPhysPresetPtr;
	for (int i = 0; i < count; i++)
	{
		varPhysPresetPtr = pointer;
		Load_PhysPresetPtr(false);
		pointer++;
	}
}

void Load_Picmip(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPicmip, sizeof(Picmip));

}

void Load_PicmipArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPicmip, sizeof(Picmip) * count);
	Picmip* pointer = varPicmip;
	for (int i = 0; i < count; i++)
	{
		varPicmip = pointer;
		Load_Picmip(false);
		pointer++;
	}
}

void Load_PicmipPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varPicmip, sizeof(Picmip));
	if (*varPicmipPtr != nullptr)
	{
		*varPicmipPtr = AllocLoad_Picmip();
		varPicmip = *varPicmipPtr;
		Load_Picmip(true);
	}
}

void Load_PicmipPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varPicmipPtr, sizeof(Picmip*) * count);
	Picmip** pointer = varPicmipPtr;
	for (int i = 0; i < count; i++)
	{
		varPicmipPtr = pointer;
		Load_PicmipPtr(false);
		pointer++;
	}
}

void Load_RawFile(bool atStreamStart)
{
	Load_Stream(atStreamStart, varRawFile, sizeof(RawFile));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varRawFile->name;
	Load_XString(false);

	if (varRawFile->buffer)
	{
		if (varRawFile->buffer == (char*)0xFFFFFFFF)
		{
			varRawFile->buffer = AllocLoad_char();
			varchar = varRawFile->buffer;
			Load_charArray(true, ((varRawFile->compressedLen) ? varRawFile->compressedLen : varRawFile->len + 1));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varRawFile->buffer);
		}
	}

	DB_PopStreamPos();
}

void Load_RawFileArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varRawFile, sizeof(RawFile) * count);
	RawFile* pointer = varRawFile;
	for (int i = 0; i < count; i++)
	{
		varRawFile = pointer;
		Load_RawFile(false);
		pointer++;
	}
}

void Load_RawFileAsset(RawFile** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_RAWFILE, (void**)varRawFilePtr);
}

void Load_RawFilePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varRawFile, sizeof(RawFile*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	RawFile* pointer = *varRawFilePtr;
	if (*varRawFilePtr != nullptr)
	{
		if (*varRawFilePtr == (RawFile*)0xFFFFFFFF || *varRawFilePtr == (RawFile*)0xFFFFFFFE)
		{
			*varRawFilePtr = AllocLoad_RawFile();
			varRawFile = *varRawFilePtr;
			RawFile** insertedPointer = nullptr;
			if (pointer == (RawFile*)0xFFFFFFFE)
			{
				insertedPointer = (RawFile**)DB_InsertPointer();
			}
			Load_RawFile(true);
			Load_RawFileAsset(varRawFilePtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varRawFilePtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varRawFilePtr);
		}
	}
	DB_PopStreamPos();
}

void Load_RawFilePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varRawFilePtr, sizeof(RawFile*) * count);
	RawFile** pointer = varRawFilePtr;
	for (int i = 0; i < count; i++)
	{
		varRawFilePtr = pointer;
		Load_RawFilePtr(false);
		pointer++;
	}
}

void Load_SModelAabbNode(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSModelAabbNode, sizeof(SModelAabbNode));

	varBounds = &varSModelAabbNode->bounds;
	Load_Bounds(false);

}

void Load_SModelAabbNodeArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSModelAabbNode, sizeof(SModelAabbNode) * count);
	SModelAabbNode* pointer = varSModelAabbNode;
	for (int i = 0; i < count; i++)
	{
		varSModelAabbNode = pointer;
		Load_SModelAabbNode(false);
		pointer++;
	}
}

void Load_SModelAabbNodePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSModelAabbNode, sizeof(SModelAabbNode));
	if (*varSModelAabbNodePtr != nullptr)
	{
		if (*varSModelAabbNodePtr == (SModelAabbNode*)0xFFFFFFFF)
		{
			*varSModelAabbNodePtr = AllocLoad_SModelAabbNode();
			varSModelAabbNode = *varSModelAabbNodePtr;
			Load_SModelAabbNode(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varSModelAabbNodePtr);
		}
	}
}

void Load_SModelAabbNodePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSModelAabbNodePtr, sizeof(SModelAabbNode*) * count);
	SModelAabbNode** pointer = varSModelAabbNodePtr;
	for (int i = 0; i < count; i++)
	{
		varSModelAabbNodePtr = pointer;
		Load_SModelAabbNodePtr(false);
		pointer++;
	}
}

void Load_ScriptStringList(bool atStreamStart)
{
	Load_Stream(atStreamStart, varScriptStringList, sizeof(ScriptStringList));

	if (varScriptStringList->strings)
	{
		if (varScriptStringList->strings == (TempString*)0xFFFFFFFF)
		{
			varScriptStringList->strings = AllocLoad_TempString();
			varTempString = varScriptStringList->strings;
			Load_TempStringArray(true, (varScriptStringList->count));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varScriptStringList->strings);
		}
	}

}

void Load_ScriptStringListArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varScriptStringList, sizeof(ScriptStringList) * count);
	ScriptStringList* pointer = varScriptStringList;
	for (int i = 0; i < count; i++)
	{
		varScriptStringList = pointer;
		Load_ScriptStringList(false);
		pointer++;
	}
}

void Load_ScriptStringListPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varScriptStringList, sizeof(ScriptStringList));
	if (*varScriptStringListPtr != nullptr)
	{
		if (*varScriptStringListPtr == (ScriptStringList*)0xFFFFFFFF)
		{
			*varScriptStringListPtr = AllocLoad_ScriptStringList();
			varScriptStringList = *varScriptStringListPtr;
			Load_ScriptStringList(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varScriptStringListPtr);
		}
	}
}

void Load_ScriptStringListPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varScriptStringListPtr, sizeof(ScriptStringList*) * count);
	ScriptStringList** pointer = varScriptStringListPtr;
	for (int i = 0; i < count; i++)
	{
		varScriptStringListPtr = pointer;
		Load_ScriptStringListPtr(false);
		pointer++;
	}
}

void Load_SetLocalVarData(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSetLocalVarData, sizeof(SetLocalVarData));

	varXString = &varSetLocalVarData->localVarName;
	Load_XString(false);

	if (varSetLocalVarData->expression)
	{
		varStatement_sPtr = &varSetLocalVarData->expression;
		Load_Statement_sPtr(false);
	}

}

void Load_SetLocalVarDataArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSetLocalVarData, sizeof(SetLocalVarData) * count);
	SetLocalVarData* pointer = varSetLocalVarData;
	for (int i = 0; i < count; i++)
	{
		varSetLocalVarData = pointer;
		Load_SetLocalVarData(false);
		pointer++;
	}
}

void Load_SetLocalVarDataPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSetLocalVarData, sizeof(SetLocalVarData));
	if (*varSetLocalVarDataPtr != nullptr)
	{
		if (*varSetLocalVarDataPtr == (SetLocalVarData*)0xFFFFFFFF)
		{
			*varSetLocalVarDataPtr = AllocLoad_SetLocalVarData();
			varSetLocalVarData = *varSetLocalVarDataPtr;
			Load_SetLocalVarData(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varSetLocalVarDataPtr);
		}
	}
}

void Load_SetLocalVarDataPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSetLocalVarDataPtr, sizeof(SetLocalVarData*) * count);
	SetLocalVarData** pointer = varSetLocalVarDataPtr;
	for (int i = 0; i < count; i++)
	{
		varSetLocalVarDataPtr = pointer;
		Load_SetLocalVarDataPtr(false);
		pointer++;
	}
}

void Load_SndCurve(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSndCurve, sizeof(SndCurve));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varSndCurve->filename;
	Load_XString(false);

	DB_PopStreamPos();
}

void Load_SndCurveArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSndCurve, sizeof(SndCurve) * count);
	SndCurve* pointer = varSndCurve;
	for (int i = 0; i < count; i++)
	{
		varSndCurve = pointer;
		Load_SndCurve(false);
		pointer++;
	}
}

void Load_SndCurveAsset(SndCurve** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_SOUND_CURVE, (void**)varSndCurvePtr);
}

void Load_SndCurvePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSndCurve, sizeof(SndCurve*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	SndCurve* pointer = *varSndCurvePtr;
	if (*varSndCurvePtr != nullptr)
	{
		if (*varSndCurvePtr == (SndCurve*)0xFFFFFFFF || *varSndCurvePtr == (SndCurve*)0xFFFFFFFE)
		{
			*varSndCurvePtr = AllocLoad_SndCurve();
			varSndCurve = *varSndCurvePtr;
			SndCurve** insertedPointer = nullptr;
			if (pointer == (SndCurve*)0xFFFFFFFE)
			{
				insertedPointer = (SndCurve**)DB_InsertPointer();
			}
			Load_SndCurve(true);
			Load_SndCurveAsset(varSndCurvePtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varSndCurvePtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varSndCurvePtr);
		}
	}
	DB_PopStreamPos();
}

void Load_SndCurvePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSndCurvePtr, sizeof(SndCurve*) * count);
	SndCurve** pointer = varSndCurvePtr;
	for (int i = 0; i < count; i++)
	{
		varSndCurvePtr = pointer;
		Load_SndCurvePtr(false);
		pointer++;
	}
}

void Load_SndDriverGlobals(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSndDriverGlobals, sizeof(SndDriverGlobals));

	varXString = &varSndDriverGlobals->name;
	Load_XString(false);

}

void Load_SndDriverGlobalsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSndDriverGlobals, sizeof(SndDriverGlobals) * count);
	SndDriverGlobals* pointer = varSndDriverGlobals;
	for (int i = 0; i < count; i++)
	{
		varSndDriverGlobals = pointer;
		Load_SndDriverGlobals(false);
		pointer++;
	}
}

void Load_SndDriverGlobalsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSndDriverGlobals, sizeof(SndDriverGlobals));
	if (*varSndDriverGlobalsPtr != nullptr)
	{
		*varSndDriverGlobalsPtr = AllocLoad_SndDriverGlobals();
		varSndDriverGlobals = *varSndDriverGlobalsPtr;
		Load_SndDriverGlobals(true);
	}
}

void Load_SndDriverGlobalsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSndDriverGlobalsPtr, sizeof(SndDriverGlobals*) * count);
	SndDriverGlobals** pointer = varSndDriverGlobalsPtr;
	for (int i = 0; i < count; i++)
	{
		varSndDriverGlobalsPtr = pointer;
		Load_SndDriverGlobalsPtr(false);
		pointer++;
	}
}

void Load_SoundFile(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSoundFile, sizeof(SoundFile));

	varSoundFileRef = &varSoundFile->u;
	Load_SoundFileRef(false);

}

void Load_SoundFileArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSoundFile, sizeof(SoundFile) * count);
	SoundFile* pointer = varSoundFile;
	for (int i = 0; i < count; i++)
	{
		varSoundFile = pointer;
		Load_SoundFile(false);
		pointer++;
	}
}

void Load_SoundFilePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSoundFile, sizeof(SoundFile));
	if (*varSoundFilePtr != nullptr)
	{
		if (*varSoundFilePtr == (SoundFile*)0xFFFFFFFF)
		{
			*varSoundFilePtr = AllocLoad_SoundFile();
			varSoundFile = *varSoundFilePtr;
			Load_SoundFile(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varSoundFilePtr);
		}
	}
}

void Load_SoundFilePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSoundFilePtr, sizeof(SoundFile*) * count);
	SoundFile** pointer = varSoundFilePtr;
	for (int i = 0; i < count; i++)
	{
		varSoundFilePtr = pointer;
		Load_SoundFilePtr(false);
		pointer++;
	}
}

void Load_SoundFileRef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSoundFileRef, sizeof(SoundFileRef));

	switch (varSoundFile->type)
	{
	case 1:
		varLoadedSoundPtr = &varSoundFileRef->loadSnd;
		Load_LoadedSoundPtr(false);
		break;
	default:
		varStreamedSound = &varSoundFileRef->streamSnd;
		Load_StreamedSound(atStreamStart);
		break;
	}
}

void Load_SoundFileRefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSoundFileRef, sizeof(SoundFileRef) * count);
	SoundFileRef* pointer = varSoundFileRef;
	for (int i = 0; i < count; i++)
	{
		varSoundFileRef = pointer;
		Load_SoundFileRef(false);
		pointer++;
	}
}

void Load_SoundFileRefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSoundFileRef, sizeof(SoundFileRef));
	if (*varSoundFileRefPtr != nullptr)
	{
		if (*varSoundFileRefPtr == (SoundFileRef*)0xFFFFFFFF)
		{
			*varSoundFileRefPtr = AllocLoad_SoundFileRef();
			varSoundFileRef = *varSoundFileRefPtr;
			Load_SoundFileRef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varSoundFileRefPtr);
		}
	}
}

void Load_SoundFileRefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSoundFileRefPtr, sizeof(SoundFileRef*) * count);
	SoundFileRef** pointer = varSoundFileRefPtr;
	for (int i = 0; i < count; i++)
	{
		varSoundFileRefPtr = pointer;
		Load_SoundFileRefPtr(false);
		pointer++;
	}
}

void Load_SpeakerMap(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSpeakerMap, sizeof(SpeakerMap));

	varXString = &varSpeakerMap->name;
	Load_XString(false);

	varMSSChannelMap = varSpeakerMap->channelMaps;
	Load_MSSChannelMapArray(false, 4);

}

void Load_SpeakerMapArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSpeakerMap, sizeof(SpeakerMap) * count);
	SpeakerMap* pointer = varSpeakerMap;
	for (int i = 0; i < count; i++)
	{
		varSpeakerMap = pointer;
		Load_SpeakerMap(false);
		pointer++;
	}
}

void Load_SpeakerMapPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varSpeakerMap, sizeof(SpeakerMap));
	if (*varSpeakerMapPtr != nullptr)
	{
		if (*varSpeakerMapPtr == (SpeakerMap*)0xFFFFFFFF)
		{
			*varSpeakerMapPtr = AllocLoad_SpeakerMap();
			varSpeakerMap = *varSpeakerMapPtr;
			Load_SpeakerMap(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varSpeakerMapPtr);
		}
	}
}

void Load_SpeakerMapPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varSpeakerMapPtr, sizeof(SpeakerMap*) * count);
	SpeakerMap** pointer = varSpeakerMapPtr;
	for (int i = 0; i < count; i++)
	{
		varSpeakerMapPtr = pointer;
		Load_SpeakerMapPtr(false);
		pointer++;
	}
}

void Load_Stage(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStage, sizeof(Stage));

	varXString = &varStage->name;
	Load_XString(false);

}

void Load_StageArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStage, sizeof(Stage) * count);
	Stage* pointer = varStage;
	for (int i = 0; i < count; i++)
	{
		varStage = pointer;
		Load_Stage(false);
		pointer++;
	}
}

void Load_StagePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStage, sizeof(Stage));
	if (*varStagePtr != nullptr)
	{
		if (*varStagePtr == (Stage*)0xFFFFFFFF)
		{
			*varStagePtr = AllocLoad_Stage();
			varStage = *varStagePtr;
			Load_Stage(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStagePtr);
		}
	}
}

void Load_StagePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStagePtr, sizeof(Stage*) * count);
	Stage** pointer = varStagePtr;
	for (int i = 0; i < count; i++)
	{
		varStagePtr = pointer;
		Load_StagePtr(false);
		pointer++;
	}
}

void Load_Statement_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStatement_s, sizeof(Statement_s));

	if (varStatement_s->entries)
	{
		if (varStatement_s->entries == (expressionEntry*)0xFFFFFFFF)
		{
			varStatement_s->entries = AllocLoad_expressionEntry();
			varexpressionEntry = varStatement_s->entries;
			Load_expressionEntryArray(true, (varStatement_s->numEntries));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStatement_s->entries);
		}
	}

	if (varStatement_s->supportingData)
	{
		varExpressionSupportingDataPtr = &varStatement_s->supportingData;
		Load_ExpressionSupportingDataPtr(false);
	}

}

void Load_Statement_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStatement_s, sizeof(Statement_s) * count);
	Statement_s* pointer = varStatement_s;
	for (int i = 0; i < count; i++)
	{
		varStatement_s = pointer;
		Load_Statement_s(false);
		pointer++;
	}
}

void Load_Statement_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStatement_s, sizeof(Statement_s));
	if (*varStatement_sPtr != nullptr)
	{
		if (*varStatement_sPtr == (Statement_s*)0xFFFFFFFF)
		{
			*varStatement_sPtr = AllocLoad_Statement_s();
			varStatement_s = *varStatement_sPtr;
			Load_Statement_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStatement_sPtr);
		}
	}
}

void Load_Statement_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStatement_sPtr, sizeof(Statement_s*) * count);
	Statement_s** pointer = varStatement_sPtr;
	for (int i = 0; i < count; i++)
	{
		varStatement_sPtr = pointer;
		Load_Statement_sPtr(false);
		pointer++;
	}
}

void Load_StaticDvar(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStaticDvar, sizeof(StaticDvar));

	varXString = &varStaticDvar->dvarName;
	Load_XString(false);

}

void Load_StaticDvarArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStaticDvar, sizeof(StaticDvar) * count);
	StaticDvar* pointer = varStaticDvar;
	for (int i = 0; i < count; i++)
	{
		varStaticDvar = pointer;
		Load_StaticDvar(false);
		pointer++;
	}
}

void Load_StaticDvarList(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStaticDvarList, sizeof(StaticDvarList));

	if (varStaticDvarList->staticDvars)
	{
		if (varStaticDvarList->staticDvars == (StaticDvar**)0xFFFFFFFF)
		{
			varStaticDvarList->staticDvars = AllocLoad_StaticDvarPtr();
			varStaticDvarPtr = varStaticDvarList->staticDvars;
			Load_StaticDvarPtrArray(true, (varStaticDvarList->numStaticDvars));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStaticDvarList->staticDvars);
		}
	}

}

void Load_StaticDvarListArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStaticDvarList, sizeof(StaticDvarList) * count);
	StaticDvarList* pointer = varStaticDvarList;
	for (int i = 0; i < count; i++)
	{
		varStaticDvarList = pointer;
		Load_StaticDvarList(false);
		pointer++;
	}
}

void Load_StaticDvarListPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStaticDvarList, sizeof(StaticDvarList));
	if (*varStaticDvarListPtr != nullptr)
	{
		if (*varStaticDvarListPtr == (StaticDvarList*)0xFFFFFFFF)
		{
			*varStaticDvarListPtr = AllocLoad_StaticDvarList();
			varStaticDvarList = *varStaticDvarListPtr;
			Load_StaticDvarList(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStaticDvarListPtr);
		}
	}
}

void Load_StaticDvarListPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStaticDvarListPtr, sizeof(StaticDvarList*) * count);
	StaticDvarList** pointer = varStaticDvarListPtr;
	for (int i = 0; i < count; i++)
	{
		varStaticDvarListPtr = pointer;
		Load_StaticDvarListPtr(false);
		pointer++;
	}
}

void Load_StaticDvarPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStaticDvar, sizeof(StaticDvar));
	if (*varStaticDvarPtr != nullptr)
	{
		if (*varStaticDvarPtr == (StaticDvar*)0xFFFFFFFF)
		{
			*varStaticDvarPtr = AllocLoad_StaticDvar();
			varStaticDvar = *varStaticDvarPtr;
			Load_StaticDvar(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStaticDvarPtr);
		}
	}
}

void Load_StaticDvarPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStaticDvarPtr, sizeof(StaticDvar*) * count);
	StaticDvar** pointer = varStaticDvarPtr;
	for (int i = 0; i < count; i++)
	{
		varStaticDvarPtr = pointer;
		Load_StaticDvarPtr(false);
		pointer++;
	}
}

void Load_StreamFileInfo(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStreamFileInfo, sizeof(StreamFileInfo));

	varStreamFileNameRaw = &varStreamFileInfo->raw;
	Load_StreamFileNameRaw(false);

}

void Load_StreamFileInfoArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStreamFileInfo, sizeof(StreamFileInfo) * count);
	StreamFileInfo* pointer = varStreamFileInfo;
	for (int i = 0; i < count; i++)
	{
		varStreamFileInfo = pointer;
		Load_StreamFileInfo(false);
		pointer++;
	}
}

void Load_StreamFileInfoPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStreamFileInfo, sizeof(StreamFileInfo));
	if (*varStreamFileInfoPtr != nullptr)
	{
		*varStreamFileInfoPtr = AllocLoad_StreamFileInfo();
		varStreamFileInfo = *varStreamFileInfoPtr;
		Load_StreamFileInfo(true);
	}
}

void Load_StreamFileInfoPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStreamFileInfoPtr, sizeof(StreamFileInfo*) * count);
	StreamFileInfo** pointer = varStreamFileInfoPtr;
	for (int i = 0; i < count; i++)
	{
		varStreamFileInfoPtr = pointer;
		Load_StreamFileInfoPtr(false);
		pointer++;
	}
}

void Load_StreamFileName(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStreamFileName, sizeof(StreamFileName));

	varStreamFileInfo = &varStreamFileName->info;
	Load_StreamFileInfo(false);

}

void Load_StreamFileNameArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStreamFileName, sizeof(StreamFileName) * count);
	StreamFileName* pointer = varStreamFileName;
	for (int i = 0; i < count; i++)
	{
		varStreamFileName = pointer;
		Load_StreamFileName(false);
		pointer++;
	}
}

void Load_StreamFileNamePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStreamFileName, sizeof(StreamFileName));
	if (*varStreamFileNamePtr != nullptr)
	{
		*varStreamFileNamePtr = AllocLoad_StreamFileName();
		varStreamFileName = *varStreamFileNamePtr;
		Load_StreamFileName(true);
	}
}

void Load_StreamFileNamePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStreamFileNamePtr, sizeof(StreamFileName*) * count);
	StreamFileName** pointer = varStreamFileNamePtr;
	for (int i = 0; i < count; i++)
	{
		varStreamFileNamePtr = pointer;
		Load_StreamFileNamePtr(false);
		pointer++;
	}
}

void Load_StreamFileNameRaw(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStreamFileNameRaw, sizeof(StreamFileNameRaw));

	varXString = &varStreamFileNameRaw->dir;
	Load_XString(false);

	varXString = &varStreamFileNameRaw->name;
	Load_XString(false);

}

void Load_StreamFileNameRawArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStreamFileNameRaw, sizeof(StreamFileNameRaw) * count);
	StreamFileNameRaw* pointer = varStreamFileNameRaw;
	for (int i = 0; i < count; i++)
	{
		varStreamFileNameRaw = pointer;
		Load_StreamFileNameRaw(false);
		pointer++;
	}
}

void Load_StreamFileNameRawPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStreamFileNameRaw, sizeof(StreamFileNameRaw));
	if (*varStreamFileNameRawPtr != nullptr)
	{
		if (*varStreamFileNameRawPtr == (StreamFileNameRaw*)0xFFFFFFFF)
		{
			*varStreamFileNameRawPtr = AllocLoad_StreamFileNameRaw();
			varStreamFileNameRaw = *varStreamFileNameRawPtr;
			Load_StreamFileNameRaw(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStreamFileNameRawPtr);
		}
	}
}

void Load_StreamFileNameRawPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStreamFileNameRawPtr, sizeof(StreamFileNameRaw*) * count);
	StreamFileNameRaw** pointer = varStreamFileNameRawPtr;
	for (int i = 0; i < count; i++)
	{
		varStreamFileNameRawPtr = pointer;
		Load_StreamFileNameRawPtr(false);
		pointer++;
	}
}

void Load_StreamedSound(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStreamedSound, sizeof(StreamedSound));

	varStreamFileName = &varStreamedSound->filename;
	Load_StreamFileName(false);

}

void Load_StreamedSoundArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStreamedSound, sizeof(StreamedSound) * count);
	StreamedSound* pointer = varStreamedSound;
	for (int i = 0; i < count; i++)
	{
		varStreamedSound = pointer;
		Load_StreamedSound(false);
		pointer++;
	}
}

void Load_StreamedSoundPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStreamedSound, sizeof(StreamedSound));
	if (*varStreamedSoundPtr != nullptr)
	{
		*varStreamedSoundPtr = AllocLoad_StreamedSound();
		varStreamedSound = *varStreamedSoundPtr;
		Load_StreamedSound(true);
	}
}

void Load_StreamedSoundPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStreamedSoundPtr, sizeof(StreamedSound*) * count);
	StreamedSound** pointer = varStreamedSoundPtr;
	for (int i = 0; i < count; i++)
	{
		varStreamedSoundPtr = pointer;
		Load_StreamedSoundPtr(false);
		pointer++;
	}
}

void Load_StringList(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStringList, sizeof(StringList));

	if (varStringList->strings)
	{
		if (varStringList->strings == (XString*)0xFFFFFFFF)
		{
			varStringList->strings = AllocLoad_XString();
			varXString = varStringList->strings;
			Load_XStringArray(true, (varStringList->totalStrings));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStringList->strings);
		}
	}

}

void Load_StringListArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStringList, sizeof(StringList) * count);
	StringList* pointer = varStringList;
	for (int i = 0; i < count; i++)
	{
		varStringList = pointer;
		Load_StringList(false);
		pointer++;
	}
}

void Load_StringListPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStringList, sizeof(StringList));
	if (*varStringListPtr != nullptr)
	{
		if (*varStringListPtr == (StringList*)0xFFFFFFFF)
		{
			*varStringListPtr = AllocLoad_StringList();
			varStringList = *varStringListPtr;
			Load_StringList(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStringListPtr);
		}
	}
}

void Load_StringListPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStringListPtr, sizeof(StringList*) * count);
	StringList** pointer = varStringListPtr;
	for (int i = 0; i < count; i++)
	{
		varStringListPtr = pointer;
		Load_StringListPtr(false);
		pointer++;
	}
}

void Load_StringTable(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStringTable, sizeof(StringTable));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varStringTable->name;
	Load_XString(false);

	if (varStringTable->values)
	{
		if (varStringTable->values == (StringTableCell*)0xFFFFFFFF)
		{
			varStringTable->values = AllocLoad_StringTableCell();
			varStringTableCell = varStringTable->values;
			Load_StringTableCellArray(true, (varStringTable->columnCount * varStringTable->rowCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStringTable->values);
		}
	}

	DB_PopStreamPos();
}

void Load_StringTableArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStringTable, sizeof(StringTable) * count);
	StringTable* pointer = varStringTable;
	for (int i = 0; i < count; i++)
	{
		varStringTable = pointer;
		Load_StringTable(false);
		pointer++;
	}
}

void Load_StringTableAsset(StringTable** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_STRINGTABLE, (void**)varStringTablePtr);
}

void Load_StringTableCell(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStringTableCell, sizeof(StringTableCell));

	varXString = &varStringTableCell->string;
	Load_XString(false);

}

void Load_StringTableCellArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStringTableCell, sizeof(StringTableCell) * count);
	StringTableCell* pointer = varStringTableCell;
	for (int i = 0; i < count; i++)
	{
		varStringTableCell = pointer;
		Load_StringTableCell(false);
		pointer++;
	}
}

void Load_StringTableCellPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStringTableCell, sizeof(StringTableCell));
	if (*varStringTableCellPtr != nullptr)
	{
		if (*varStringTableCellPtr == (StringTableCell*)0xFFFFFFFF)
		{
			*varStringTableCellPtr = AllocLoad_StringTableCell();
			varStringTableCell = *varStringTableCellPtr;
			Load_StringTableCell(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStringTableCellPtr);
		}
	}
}

void Load_StringTableCellPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStringTableCellPtr, sizeof(StringTableCell*) * count);
	StringTableCell** pointer = varStringTableCellPtr;
	for (int i = 0; i < count; i++)
	{
		varStringTableCellPtr = pointer;
		Load_StringTableCellPtr(false);
		pointer++;
	}
}

void Load_StringTablePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStringTable, sizeof(StringTable*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	StringTable* pointer = *varStringTablePtr;
	if (*varStringTablePtr != nullptr)
	{
		if (*varStringTablePtr == (StringTable*)0xFFFFFFFF || *varStringTablePtr == (StringTable*)0xFFFFFFFE)
		{
			*varStringTablePtr = AllocLoad_StringTable();
			varStringTable = *varStringTablePtr;
			StringTable** insertedPointer = nullptr;
			if (pointer == (StringTable*)0xFFFFFFFE)
			{
				insertedPointer = (StringTable**)DB_InsertPointer();
			}
			Load_StringTable(true);
			Load_StringTableAsset(varStringTablePtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varStringTablePtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varStringTablePtr);
		}
	}
	DB_PopStreamPos();
}

void Load_StringTablePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStringTablePtr, sizeof(StringTable*) * count);
	StringTable** pointer = varStringTablePtr;
	for (int i = 0; i < count; i++)
	{
		varStringTablePtr = pointer;
		Load_StringTablePtr(false);
		pointer++;
	}
}

void Load_StructuredDataDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataDef, sizeof(StructuredDataDef));

	if (varStructuredDataDef->enums)
	{
		if (varStructuredDataDef->enums == (StructuredDataEnum*)0xFFFFFFFF)
		{
			varStructuredDataDef->enums = AllocLoad_StructuredDataEnum();
			varStructuredDataEnum = varStructuredDataDef->enums;
			Load_StructuredDataEnumArray(true, (varStructuredDataDef->enumCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStructuredDataDef->enums);
		}
	}

	if (varStructuredDataDef->structs)
	{
		if (varStructuredDataDef->structs == (StructuredDataStruct*)0xFFFFFFFF)
		{
			varStructuredDataDef->structs = AllocLoad_StructuredDataStruct();
			varStructuredDataStruct = varStructuredDataDef->structs;
			Load_StructuredDataStructArray(true, (varStructuredDataDef->structCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStructuredDataDef->structs);
		}
	}

	if (varStructuredDataDef->indexedArrays)
	{
		if (varStructuredDataDef->indexedArrays == (StructuredDataIndexedArray*)0xFFFFFFFF)
		{
			varStructuredDataDef->indexedArrays = AllocLoad_StructuredDataIndexedArray();
			varStructuredDataIndexedArray = varStructuredDataDef->indexedArrays;
			Load_StructuredDataIndexedArrayArray(true, (varStructuredDataDef->indexedArrayCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStructuredDataDef->indexedArrays);
		}
	}

	if (varStructuredDataDef->enumedArrays)
	{
		if (varStructuredDataDef->enumedArrays == (StructuredDataEnumedArray*)0xFFFFFFFF)
		{
			varStructuredDataDef->enumedArrays = AllocLoad_StructuredDataEnumedArray();
			varStructuredDataEnumedArray = varStructuredDataDef->enumedArrays;
			Load_StructuredDataEnumedArrayArray(true, (varStructuredDataDef->enumedArrayCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStructuredDataDef->enumedArrays);
		}
	}

	varStructuredDataType = &varStructuredDataDef->rootType;
	Load_StructuredDataType(false);

}

void Load_StructuredDataDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataDef, sizeof(StructuredDataDef) * count);
	StructuredDataDef* pointer = varStructuredDataDef;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataDef = pointer;
		Load_StructuredDataDef(false);
		pointer++;
	}
}

void Load_StructuredDataDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataDef, sizeof(StructuredDataDef));
	if (*varStructuredDataDefPtr != nullptr)
	{
		if (*varStructuredDataDefPtr == (StructuredDataDef*)0xFFFFFFFF)
		{
			*varStructuredDataDefPtr = AllocLoad_StructuredDataDef();
			varStructuredDataDef = *varStructuredDataDefPtr;
			Load_StructuredDataDef(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataDefPtr);
		}
	}
}

void Load_StructuredDataDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataDefPtr, sizeof(StructuredDataDef*) * count);
	StructuredDataDef** pointer = varStructuredDataDefPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataDefPtr = pointer;
		Load_StructuredDataDefPtr(false);
		pointer++;
	}
}

void Load_StructuredDataDefSet(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataDefSet, sizeof(StructuredDataDefSet));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varStructuredDataDefSet->name;
	Load_XString(false);

	if (varStructuredDataDefSet->defs)
	{
		if (varStructuredDataDefSet->defs == (StructuredDataDef*)0xFFFFFFFF)
		{
			varStructuredDataDefSet->defs = AllocLoad_StructuredDataDef();
			varStructuredDataDef = varStructuredDataDefSet->defs;
			Load_StructuredDataDefArray(true, (varStructuredDataDefSet->defCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStructuredDataDefSet->defs);
		}
	}

	DB_PopStreamPos();
}

void Load_StructuredDataDefSetArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataDefSet, sizeof(StructuredDataDefSet) * count);
	StructuredDataDefSet* pointer = varStructuredDataDefSet;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataDefSet = pointer;
		Load_StructuredDataDefSet(false);
		pointer++;
	}
}

void Load_StructuredDataDefSetAsset(StructuredDataDefSet** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_STRUCTURED_DATA_DEF, (void**)varStructuredDataDefSetPtr);
}

void Load_StructuredDataDefSetPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataDefSet, sizeof(StructuredDataDefSet*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	StructuredDataDefSet* pointer = *varStructuredDataDefSetPtr;
	if (*varStructuredDataDefSetPtr != nullptr)
	{
		if (*varStructuredDataDefSetPtr == (StructuredDataDefSet*)0xFFFFFFFF || *varStructuredDataDefSetPtr == (StructuredDataDefSet*)0xFFFFFFFE)
		{
			*varStructuredDataDefSetPtr = AllocLoad_StructuredDataDefSet();
			varStructuredDataDefSet = *varStructuredDataDefSetPtr;
			StructuredDataDefSet** insertedPointer = nullptr;
			if (pointer == (StructuredDataDefSet*)0xFFFFFFFE)
			{
				insertedPointer = (StructuredDataDefSet**)DB_InsertPointer();
			}
			Load_StructuredDataDefSet(true);
			Load_StructuredDataDefSetAsset(varStructuredDataDefSetPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varStructuredDataDefSetPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varStructuredDataDefSetPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_StructuredDataDefSetPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataDefSetPtr, sizeof(StructuredDataDefSet*) * count);
	StructuredDataDefSet** pointer = varStructuredDataDefSetPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataDefSetPtr = pointer;
		Load_StructuredDataDefSetPtr(false);
		pointer++;
	}
}

void Load_StructuredDataEnum(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataEnum, sizeof(StructuredDataEnum));

	if (varStructuredDataEnum->entries)
	{
		if (varStructuredDataEnum->entries == (StructuredDataEnumEntry*)0xFFFFFFFF)
		{
			varStructuredDataEnum->entries = AllocLoad_StructuredDataEnumEntry();
			varStructuredDataEnumEntry = varStructuredDataEnum->entries;
			Load_StructuredDataEnumEntryArray(true, (varStructuredDataEnum->entryCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStructuredDataEnum->entries);
		}
	}

}

void Load_StructuredDataEnumArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataEnum, sizeof(StructuredDataEnum) * count);
	StructuredDataEnum* pointer = varStructuredDataEnum;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataEnum = pointer;
		Load_StructuredDataEnum(false);
		pointer++;
	}
}

void Load_StructuredDataEnumEntry(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataEnumEntry, sizeof(StructuredDataEnumEntry));

	varXString = &varStructuredDataEnumEntry->string;
	Load_XString(false);

}

void Load_StructuredDataEnumEntryArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataEnumEntry, sizeof(StructuredDataEnumEntry) * count);
	StructuredDataEnumEntry* pointer = varStructuredDataEnumEntry;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataEnumEntry = pointer;
		Load_StructuredDataEnumEntry(false);
		pointer++;
	}
}

void Load_StructuredDataEnumEntryPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataEnumEntry, sizeof(StructuredDataEnumEntry));
	if (*varStructuredDataEnumEntryPtr != nullptr)
	{
		if (*varStructuredDataEnumEntryPtr == (StructuredDataEnumEntry*)0xFFFFFFFF)
		{
			*varStructuredDataEnumEntryPtr = AllocLoad_StructuredDataEnumEntry();
			varStructuredDataEnumEntry = *varStructuredDataEnumEntryPtr;
			Load_StructuredDataEnumEntry(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataEnumEntryPtr);
		}
	}
}

void Load_StructuredDataEnumEntryPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataEnumEntryPtr, sizeof(StructuredDataEnumEntry*) * count);
	StructuredDataEnumEntry** pointer = varStructuredDataEnumEntryPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataEnumEntryPtr = pointer;
		Load_StructuredDataEnumEntryPtr(false);
		pointer++;
	}
}

void Load_StructuredDataEnumPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataEnum, sizeof(StructuredDataEnum));
	if (*varStructuredDataEnumPtr != nullptr)
	{
		if (*varStructuredDataEnumPtr == (StructuredDataEnum*)0xFFFFFFFF)
		{
			*varStructuredDataEnumPtr = AllocLoad_StructuredDataEnum();
			varStructuredDataEnum = *varStructuredDataEnumPtr;
			Load_StructuredDataEnum(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataEnumPtr);
		}
	}
}

void Load_StructuredDataEnumPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataEnumPtr, sizeof(StructuredDataEnum*) * count);
	StructuredDataEnum** pointer = varStructuredDataEnumPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataEnumPtr = pointer;
		Load_StructuredDataEnumPtr(false);
		pointer++;
	}
}

void Load_StructuredDataEnumedArray(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataEnumedArray, sizeof(StructuredDataEnumedArray));

	varStructuredDataType = &varStructuredDataEnumedArray->elementType;
	Load_StructuredDataType(false);

}

void Load_StructuredDataEnumedArrayArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataEnumedArray, sizeof(StructuredDataEnumedArray) * count);
	StructuredDataEnumedArray* pointer = varStructuredDataEnumedArray;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataEnumedArray = pointer;
		Load_StructuredDataEnumedArray(false);
		pointer++;
	}
}

void Load_StructuredDataEnumedArrayPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataEnumedArray, sizeof(StructuredDataEnumedArray));
	if (*varStructuredDataEnumedArrayPtr != nullptr)
	{
		if (*varStructuredDataEnumedArrayPtr == (StructuredDataEnumedArray*)0xFFFFFFFF)
		{
			*varStructuredDataEnumedArrayPtr = AllocLoad_StructuredDataEnumedArray();
			varStructuredDataEnumedArray = *varStructuredDataEnumedArrayPtr;
			Load_StructuredDataEnumedArray(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataEnumedArrayPtr);
		}
	}
}

void Load_StructuredDataEnumedArrayPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataEnumedArrayPtr, sizeof(StructuredDataEnumedArray*) * count);
	StructuredDataEnumedArray** pointer = varStructuredDataEnumedArrayPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataEnumedArrayPtr = pointer;
		Load_StructuredDataEnumedArrayPtr(false);
		pointer++;
	}
}

void Load_StructuredDataIndexedArray(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataIndexedArray, sizeof(StructuredDataIndexedArray));

	varStructuredDataType = &varStructuredDataIndexedArray->elementType;
	Load_StructuredDataType(false);

}

void Load_StructuredDataIndexedArrayArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataIndexedArray, sizeof(StructuredDataIndexedArray) * count);
	StructuredDataIndexedArray* pointer = varStructuredDataIndexedArray;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataIndexedArray = pointer;
		Load_StructuredDataIndexedArray(false);
		pointer++;
	}
}

void Load_StructuredDataIndexedArrayPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataIndexedArray, sizeof(StructuredDataIndexedArray));
	if (*varStructuredDataIndexedArrayPtr != nullptr)
	{
		if (*varStructuredDataIndexedArrayPtr == (StructuredDataIndexedArray*)0xFFFFFFFF)
		{
			*varStructuredDataIndexedArrayPtr = AllocLoad_StructuredDataIndexedArray();
			varStructuredDataIndexedArray = *varStructuredDataIndexedArrayPtr;
			Load_StructuredDataIndexedArray(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataIndexedArrayPtr);
		}
	}
}

void Load_StructuredDataIndexedArrayPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataIndexedArrayPtr, sizeof(StructuredDataIndexedArray*) * count);
	StructuredDataIndexedArray** pointer = varStructuredDataIndexedArrayPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataIndexedArrayPtr = pointer;
		Load_StructuredDataIndexedArrayPtr(false);
		pointer++;
	}
}

void Load_StructuredDataStruct(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataStruct, sizeof(StructuredDataStruct));

	if (varStructuredDataStruct->properties)
	{
		if (varStructuredDataStruct->properties == (StructuredDataStructProperty*)0xFFFFFFFF)
		{
			varStructuredDataStruct->properties = AllocLoad_StructuredDataStructProperty();
			varStructuredDataStructProperty = varStructuredDataStruct->properties;
			Load_StructuredDataStructPropertyArray(true, (varStructuredDataStruct->propertyCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varStructuredDataStruct->properties);
		}
	}

}

void Load_StructuredDataStructArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataStruct, sizeof(StructuredDataStruct) * count);
	StructuredDataStruct* pointer = varStructuredDataStruct;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataStruct = pointer;
		Load_StructuredDataStruct(false);
		pointer++;
	}
}

void Load_StructuredDataStructProperty(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataStructProperty, sizeof(StructuredDataStructProperty));

	varXString = &varStructuredDataStructProperty->name;
	Load_XString(false);

	varStructuredDataType = &varStructuredDataStructProperty->type;
	Load_StructuredDataType(false);

}

void Load_StructuredDataStructPropertyArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataStructProperty, sizeof(StructuredDataStructProperty) * count);
	StructuredDataStructProperty* pointer = varStructuredDataStructProperty;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataStructProperty = pointer;
		Load_StructuredDataStructProperty(false);
		pointer++;
	}
}

void Load_StructuredDataStructPropertyPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataStructProperty, sizeof(StructuredDataStructProperty));
	if (*varStructuredDataStructPropertyPtr != nullptr)
	{
		if (*varStructuredDataStructPropertyPtr == (StructuredDataStructProperty*)0xFFFFFFFF)
		{
			*varStructuredDataStructPropertyPtr = AllocLoad_StructuredDataStructProperty();
			varStructuredDataStructProperty = *varStructuredDataStructPropertyPtr;
			Load_StructuredDataStructProperty(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataStructPropertyPtr);
		}
	}
}

void Load_StructuredDataStructPropertyPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataStructPropertyPtr, sizeof(StructuredDataStructProperty*) * count);
	StructuredDataStructProperty** pointer = varStructuredDataStructPropertyPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataStructPropertyPtr = pointer;
		Load_StructuredDataStructPropertyPtr(false);
		pointer++;
	}
}

void Load_StructuredDataStructPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataStruct, sizeof(StructuredDataStruct));
	if (*varStructuredDataStructPtr != nullptr)
	{
		if (*varStructuredDataStructPtr == (StructuredDataStruct*)0xFFFFFFFF)
		{
			*varStructuredDataStructPtr = AllocLoad_StructuredDataStruct();
			varStructuredDataStruct = *varStructuredDataStructPtr;
			Load_StructuredDataStruct(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataStructPtr);
		}
	}
}

void Load_StructuredDataStructPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataStructPtr, sizeof(StructuredDataStruct*) * count);
	StructuredDataStruct** pointer = varStructuredDataStructPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataStructPtr = pointer;
		Load_StructuredDataStructPtr(false);
		pointer++;
	}
}

void Load_StructuredDataType(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataType, sizeof(StructuredDataType));

	varStructuredDataTypeUnion = &varStructuredDataType->u;
	Load_StructuredDataTypeUnion(false);

}

void Load_StructuredDataTypeArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataType, sizeof(StructuredDataType) * count);
	StructuredDataType* pointer = varStructuredDataType;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataType = pointer;
		Load_StructuredDataType(false);
		pointer++;
	}
}

void Load_StructuredDataTypePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataType, sizeof(StructuredDataType));
	if (*varStructuredDataTypePtr != nullptr)
	{
		if (*varStructuredDataTypePtr == (StructuredDataType*)0xFFFFFFFF)
		{
			*varStructuredDataTypePtr = AllocLoad_StructuredDataType();
			varStructuredDataType = *varStructuredDataTypePtr;
			Load_StructuredDataType(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataTypePtr);
		}
	}
}

void Load_StructuredDataTypePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataTypePtr, sizeof(StructuredDataType*) * count);
	StructuredDataType** pointer = varStructuredDataTypePtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataTypePtr = pointer;
		Load_StructuredDataTypePtr(false);
		pointer++;
	}
}

void Load_StructuredDataTypeUnion(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataTypeUnion, sizeof(StructuredDataTypeUnion));

}

void Load_StructuredDataTypeUnionArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataTypeUnion, sizeof(StructuredDataTypeUnion) * count);
	StructuredDataTypeUnion* pointer = varStructuredDataTypeUnion;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataTypeUnion = pointer;
		Load_StructuredDataTypeUnion(false);
		pointer++;
	}
}

void Load_StructuredDataTypeUnionPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varStructuredDataTypeUnion, sizeof(StructuredDataTypeUnion));
	if (*varStructuredDataTypeUnionPtr != nullptr)
	{
		if (*varStructuredDataTypeUnionPtr == (StructuredDataTypeUnion*)0xFFFFFFFF)
		{
			*varStructuredDataTypeUnionPtr = AllocLoad_StructuredDataTypeUnion();
			varStructuredDataTypeUnion = *varStructuredDataTypeUnionPtr;
			Load_StructuredDataTypeUnion(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varStructuredDataTypeUnionPtr);
		}
	}
}

void Load_StructuredDataTypeUnionPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varStructuredDataTypeUnionPtr, sizeof(StructuredDataTypeUnion*) * count);
	StructuredDataTypeUnion** pointer = varStructuredDataTypeUnionPtr;
	for (int i = 0; i < count; i++)
	{
		varStructuredDataTypeUnionPtr = pointer;
		Load_StructuredDataTypeUnionPtr(false);
		pointer++;
	}
}

void Load_TempStringArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTempString, sizeof(TempString) * count);
	TempString* pointer = varTempString;
	for (int i = 0; i < count; i++)
	{
		varTempString = pointer;
		Load_TempString(false);
		pointer++;
	}
}

void Load_TempStringPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTempString, sizeof(TempString));
	if (*varTempStringPtr != nullptr)
	{
		*varTempStringPtr = AllocLoad_TempString();
		varTempString = *varTempStringPtr;
		Load_TempString(true);
	}
}

void Load_TempStringPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTempStringPtr, sizeof(TempString*) * count);
	TempString** pointer = varTempStringPtr;
	for (int i = 0; i < count; i++)
	{
		varTempStringPtr = pointer;
		Load_TempStringPtr(false);
		pointer++;
	}
}

void Load_TracerDef(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTracerDef, sizeof(TracerDef));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varTracerDef->name;
	Load_XString(false);

	varMaterialPtr = &varTracerDef->material;
	Load_MaterialPtr(false);

	DB_PopStreamPos();
}

void Load_TracerDefArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTracerDef, sizeof(TracerDef) * count);
	TracerDef* pointer = varTracerDef;
	for (int i = 0; i < count; i++)
	{
		varTracerDef = pointer;
		Load_TracerDef(false);
		pointer++;
	}
}

void Load_TracerDefAsset(TracerDef** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_TRACER, (void**)varTracerDefPtr);
}

void Load_TracerDefPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTracerDef, sizeof(TracerDef*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	TracerDef* pointer = *varTracerDefPtr;
	if (*varTracerDefPtr != nullptr)
	{
		if (*varTracerDefPtr == (TracerDef*)0xFFFFFFFF || *varTracerDefPtr == (TracerDef*)0xFFFFFFFE)
		{
			*varTracerDefPtr = AllocLoad_TracerDef();
			varTracerDef = *varTracerDefPtr;
			TracerDef** insertedPointer = nullptr;
			if (pointer == (TracerDef*)0xFFFFFFFE)
			{
				insertedPointer = (TracerDef**)DB_InsertPointer();
			}
			Load_TracerDef(true);
			Load_TracerDefAsset(varTracerDefPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varTracerDefPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varTracerDefPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_TracerDefPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTracerDefPtr, sizeof(TracerDef*) * count);
	TracerDef** pointer = varTracerDefPtr;
	for (int i = 0; i < count; i++)
	{
		varTracerDefPtr = pointer;
		Load_TracerDefPtr(false);
		pointer++;
	}
}

void Load_TriIndice(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTriIndice, sizeof(TriIndice));

}

void Load_TriIndiceArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTriIndice, sizeof(TriIndice) * count);
	TriIndice* pointer = varTriIndice;
	for (int i = 0; i < count; i++)
	{
		varTriIndice = pointer;
		Load_TriIndice(false);
		pointer++;
	}
}

void Load_TriIndicePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTriIndice, sizeof(TriIndice));
	if (*varTriIndicePtr != nullptr)
	{
		if (*varTriIndicePtr == (TriIndice*)0xFFFFFFFF)
		{
			*varTriIndicePtr = AllocLoad_TriIndice();
			varTriIndice = *varTriIndicePtr;
			Load_TriIndice(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varTriIndicePtr);
		}
	}
}

void Load_TriIndicePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTriIndicePtr, sizeof(TriIndice*) * count);
	TriIndice** pointer = varTriIndicePtr;
	for (int i = 0; i < count; i++)
	{
		varTriIndicePtr = pointer;
		Load_TriIndicePtr(false);
		pointer++;
	}
}

void Load_TriggerHull(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTriggerHull, sizeof(TriggerHull));

	varBounds = &varTriggerHull->bounds;
	Load_Bounds(false);

}

void Load_TriggerHullArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTriggerHull, sizeof(TriggerHull) * count);
	TriggerHull* pointer = varTriggerHull;
	for (int i = 0; i < count; i++)
	{
		varTriggerHull = pointer;
		Load_TriggerHull(false);
		pointer++;
	}
}

void Load_TriggerHullPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTriggerHull, sizeof(TriggerHull));
	if (*varTriggerHullPtr != nullptr)
	{
		if (*varTriggerHullPtr == (TriggerHull*)0xFFFFFFFF)
		{
			*varTriggerHullPtr = AllocLoad_TriggerHull();
			varTriggerHull = *varTriggerHullPtr;
			Load_TriggerHull(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varTriggerHullPtr);
		}
	}
}

void Load_TriggerHullPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTriggerHullPtr, sizeof(TriggerHull*) * count);
	TriggerHull** pointer = varTriggerHullPtr;
	for (int i = 0; i < count; i++)
	{
		varTriggerHullPtr = pointer;
		Load_TriggerHullPtr(false);
		pointer++;
	}
}

void Load_TriggerModel(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTriggerModel, sizeof(TriggerModel));

}

void Load_TriggerModelArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTriggerModel, sizeof(TriggerModel) * count);
	TriggerModel* pointer = varTriggerModel;
	for (int i = 0; i < count; i++)
	{
		varTriggerModel = pointer;
		Load_TriggerModel(false);
		pointer++;
	}
}

void Load_TriggerModelPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTriggerModel, sizeof(TriggerModel));
	if (*varTriggerModelPtr != nullptr)
	{
		if (*varTriggerModelPtr == (TriggerModel*)0xFFFFFFFF)
		{
			*varTriggerModelPtr = AllocLoad_TriggerModel();
			varTriggerModel = *varTriggerModelPtr;
			Load_TriggerModel(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varTriggerModelPtr);
		}
	}
}

void Load_TriggerModelPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTriggerModelPtr, sizeof(TriggerModel*) * count);
	TriggerModel** pointer = varTriggerModelPtr;
	for (int i = 0; i < count; i++)
	{
		varTriggerModelPtr = pointer;
		Load_TriggerModelPtr(false);
		pointer++;
	}
}

void Load_TriggerSlab(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTriggerSlab, sizeof(TriggerSlab));

}

void Load_TriggerSlabArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTriggerSlab, sizeof(TriggerSlab) * count);
	TriggerSlab* pointer = varTriggerSlab;
	for (int i = 0; i < count; i++)
	{
		varTriggerSlab = pointer;
		Load_TriggerSlab(false);
		pointer++;
	}
}

void Load_TriggerSlabPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varTriggerSlab, sizeof(TriggerSlab));
	if (*varTriggerSlabPtr != nullptr)
	{
		if (*varTriggerSlabPtr == (TriggerSlab*)0xFFFFFFFF)
		{
			*varTriggerSlabPtr = AllocLoad_TriggerSlab();
			varTriggerSlab = *varTriggerSlabPtr;
			Load_TriggerSlab(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varTriggerSlabPtr);
		}
	}
}

void Load_TriggerSlabPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varTriggerSlabPtr, sizeof(TriggerSlab*) * count);
	TriggerSlab** pointer = varTriggerSlabPtr;
	for (int i = 0; i < count; i++)
	{
		varTriggerSlabPtr = pointer;
		Load_TriggerSlabPtr(false);
		pointer++;
	}
}

void Load_UIFunctionList(bool atStreamStart)
{
	Load_Stream(atStreamStart, varUIFunctionList, sizeof(UIFunctionList));

	if (varUIFunctionList->functions)
	{
		if (varUIFunctionList->functions == (Statement_s**)0xFFFFFFFF)
		{
			varUIFunctionList->functions = AllocLoad_Statement_sPtr();
			varStatement_sPtr = varUIFunctionList->functions;
			Load_Statement_sPtrArray(true, (varUIFunctionList->totalFunctions));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varUIFunctionList->functions);
		}
	}

}

void Load_UIFunctionListArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varUIFunctionList, sizeof(UIFunctionList) * count);
	UIFunctionList* pointer = varUIFunctionList;
	for (int i = 0; i < count; i++)
	{
		varUIFunctionList = pointer;
		Load_UIFunctionList(false);
		pointer++;
	}
}

void Load_UIFunctionListPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varUIFunctionList, sizeof(UIFunctionList));
	if (*varUIFunctionListPtr != nullptr)
	{
		if (*varUIFunctionListPtr == (UIFunctionList*)0xFFFFFFFF)
		{
			*varUIFunctionListPtr = AllocLoad_UIFunctionList();
			varUIFunctionList = *varUIFunctionListPtr;
			Load_UIFunctionList(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varUIFunctionListPtr);
		}
	}
}

void Load_UIFunctionListPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varUIFunctionListPtr, sizeof(UIFunctionList*) * count);
	UIFunctionList** pointer = varUIFunctionListPtr;
	for (int i = 0; i < count; i++)
	{
		varUIFunctionListPtr = pointer;
		Load_UIFunctionListPtr(false);
		pointer++;
	}
}

void Load_WaterWritable(bool atStreamStart)
{
	Load_Stream(atStreamStart, varWaterWritable, sizeof(WaterWritable));

}

void Load_WaterWritableArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varWaterWritable, sizeof(WaterWritable) * count);
	WaterWritable* pointer = varWaterWritable;
	for (int i = 0; i < count; i++)
	{
		varWaterWritable = pointer;
		Load_WaterWritable(false);
		pointer++;
	}
}

void Load_WaterWritablePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varWaterWritable, sizeof(WaterWritable));
	if (*varWaterWritablePtr != nullptr)
	{
		*varWaterWritablePtr = AllocLoad_WaterWritable();
		varWaterWritable = *varWaterWritablePtr;
		Load_WaterWritable(true);
	}
}

void Load_WaterWritablePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varWaterWritablePtr, sizeof(WaterWritable*) * count);
	WaterWritable** pointer = varWaterWritablePtr;
	for (int i = 0; i < count; i++)
	{
		varWaterWritablePtr = pointer;
		Load_WaterWritablePtr(false);
		pointer++;
	}
}

void Load_XAnimDeltaPart(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPart, sizeof(XAnimDeltaPart));

	if (varXAnimDeltaPart->trans)
	{
		varXAnimPartTransPtr = &varXAnimDeltaPart->trans;
		Load_XAnimPartTransPtr(false);
	}

	if (varXAnimDeltaPart->quat2)
	{
		varXAnimDeltaPartQuat2Ptr = &varXAnimDeltaPart->quat2;
		Load_XAnimDeltaPartQuat2Ptr(false);
	}

	if (varXAnimDeltaPart->quat)
	{
		varXAnimDeltaPartQuatPtr = &varXAnimDeltaPart->quat;
		Load_XAnimDeltaPartQuatPtr(false);
	}

}

void Load_XAnimDeltaPartArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPart, sizeof(XAnimDeltaPart) * count);
	XAnimDeltaPart* pointer = varXAnimDeltaPart;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPart = pointer;
		Load_XAnimDeltaPart(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPart, sizeof(XAnimDeltaPart));
	if (*varXAnimDeltaPartPtr != nullptr)
	{
		if (*varXAnimDeltaPartPtr == (XAnimDeltaPart*)0xFFFFFFFF)
		{
			*varXAnimDeltaPartPtr = AllocLoad_XAnimDeltaPart();
			varXAnimDeltaPart = *varXAnimDeltaPartPtr;
			Load_XAnimDeltaPart(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDeltaPartPtr);
		}
	}
}

void Load_XAnimDeltaPartPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartPtr, sizeof(XAnimDeltaPart*) * count);
	XAnimDeltaPart** pointer = varXAnimDeltaPartPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartPtr = pointer;
		Load_XAnimDeltaPartPtr(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuat(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuat, sizeof(XAnimDeltaPartQuat));

	varXAnimDeltaPartQuatData = &varXAnimDeltaPartQuat->u;
	Load_XAnimDeltaPartQuatData(false);

}

void Load_XAnimDeltaPartQuat2(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuat2, sizeof(XAnimDeltaPartQuat2));

	varXAnimDeltaPartQuatData2 = &varXAnimDeltaPartQuat2->u;
	Load_XAnimDeltaPartQuatData2(false);

}

void Load_XAnimDeltaPartQuat2Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuat2, sizeof(XAnimDeltaPartQuat2) * count);
	XAnimDeltaPartQuat2* pointer = varXAnimDeltaPartQuat2;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuat2 = pointer;
		Load_XAnimDeltaPartQuat2(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuat2Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuat2, sizeof(XAnimDeltaPartQuat2));
	if (*varXAnimDeltaPartQuat2Ptr != nullptr)
	{
		if (*varXAnimDeltaPartQuat2Ptr == (XAnimDeltaPartQuat2*)0xFFFFFFFF)
		{
			*varXAnimDeltaPartQuat2Ptr = AllocLoad_XAnimDeltaPartQuat2();
			varXAnimDeltaPartQuat2 = *varXAnimDeltaPartQuat2Ptr;
			Load_XAnimDeltaPartQuat2(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDeltaPartQuat2Ptr);
		}
	}
}

void Load_XAnimDeltaPartQuat2PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuat2Ptr, sizeof(XAnimDeltaPartQuat2*) * count);
	XAnimDeltaPartQuat2** pointer = varXAnimDeltaPartQuat2Ptr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuat2Ptr = pointer;
		Load_XAnimDeltaPartQuat2Ptr(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuat, sizeof(XAnimDeltaPartQuat) * count);
	XAnimDeltaPartQuat* pointer = varXAnimDeltaPartQuat;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuat = pointer;
		Load_XAnimDeltaPartQuat(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatData(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatData, sizeof(XAnimDeltaPartQuatData));

}

void Load_XAnimDeltaPartQuatData2(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatData2, sizeof(XAnimDeltaPartQuatData2));

}

void Load_XAnimDeltaPartQuatData2Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatData2, sizeof(XAnimDeltaPartQuatData2) * count);
	XAnimDeltaPartQuatData2* pointer = varXAnimDeltaPartQuatData2;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatData2 = pointer;
		Load_XAnimDeltaPartQuatData2(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatData2Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatData2, sizeof(XAnimDeltaPartQuatData2));
	if (*varXAnimDeltaPartQuatData2Ptr != nullptr)
	{
		if (*varXAnimDeltaPartQuatData2Ptr == (XAnimDeltaPartQuatData2*)0xFFFFFFFF)
		{
			*varXAnimDeltaPartQuatData2Ptr = AllocLoad_XAnimDeltaPartQuatData2();
			varXAnimDeltaPartQuatData2 = *varXAnimDeltaPartQuatData2Ptr;
			Load_XAnimDeltaPartQuatData2(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDeltaPartQuatData2Ptr);
		}
	}
}

void Load_XAnimDeltaPartQuatData2PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatData2Ptr, sizeof(XAnimDeltaPartQuatData2*) * count);
	XAnimDeltaPartQuatData2** pointer = varXAnimDeltaPartQuatData2Ptr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatData2Ptr = pointer;
		Load_XAnimDeltaPartQuatData2Ptr(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatDataArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatData, sizeof(XAnimDeltaPartQuatData) * count);
	XAnimDeltaPartQuatData* pointer = varXAnimDeltaPartQuatData;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatData = pointer;
		Load_XAnimDeltaPartQuatData(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatDataFrames(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames, sizeof(XAnimDeltaPartQuatDataFrames));

	if (varXAnimDeltaPartQuatDataFrames->frames4)
	{
		varint64Ptr = &varXAnimDeltaPartQuatDataFrames->frames4;
		Load_int64Ptr(false);
	}

	varXAnimDynamicIndices = &varXAnimDeltaPartQuatDataFrames->indices;
	Load_XAnimDynamicIndices(false);

}

void Load_XAnimDeltaPartQuatDataFrames2(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames2, sizeof(XAnimDeltaPartQuatDataFrames2));

	if (varXAnimDeltaPartQuatDataFrames2->frames)
	{
		varint32Ptr = &varXAnimDeltaPartQuatDataFrames2->frames;
		Load_int32Ptr(false);
	}

	varXAnimDynamicIndices = &varXAnimDeltaPartQuatDataFrames2->indices;
	Load_XAnimDynamicIndices(false);

}

void Load_XAnimDeltaPartQuatDataFrames2Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames2, sizeof(XAnimDeltaPartQuatDataFrames2) * count);
	XAnimDeltaPartQuatDataFrames2* pointer = varXAnimDeltaPartQuatDataFrames2;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatDataFrames2 = pointer;
		Load_XAnimDeltaPartQuatDataFrames2(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatDataFrames2Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames2, sizeof(XAnimDeltaPartQuatDataFrames2));
	if (*varXAnimDeltaPartQuatDataFrames2Ptr != nullptr)
	{
		if (*varXAnimDeltaPartQuatDataFrames2Ptr == (XAnimDeltaPartQuatDataFrames2*)0xFFFFFFFF)
		{
			*varXAnimDeltaPartQuatDataFrames2Ptr = AllocLoad_XAnimDeltaPartQuatDataFrames2();
			varXAnimDeltaPartQuatDataFrames2 = *varXAnimDeltaPartQuatDataFrames2Ptr;
			Load_XAnimDeltaPartQuatDataFrames2(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDeltaPartQuatDataFrames2Ptr);
		}
	}
}

void Load_XAnimDeltaPartQuatDataFrames2PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames2Ptr, sizeof(XAnimDeltaPartQuatDataFrames2*) * count);
	XAnimDeltaPartQuatDataFrames2** pointer = varXAnimDeltaPartQuatDataFrames2Ptr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatDataFrames2Ptr = pointer;
		Load_XAnimDeltaPartQuatDataFrames2Ptr(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatDataFramesArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames, sizeof(XAnimDeltaPartQuatDataFrames) * count);
	XAnimDeltaPartQuatDataFrames* pointer = varXAnimDeltaPartQuatDataFrames;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatDataFrames = pointer;
		Load_XAnimDeltaPartQuatDataFrames(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatDataFramesPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames, sizeof(XAnimDeltaPartQuatDataFrames));
	if (*varXAnimDeltaPartQuatDataFramesPtr != nullptr)
	{
		if (*varXAnimDeltaPartQuatDataFramesPtr == (XAnimDeltaPartQuatDataFrames*)0xFFFFFFFF)
		{
			*varXAnimDeltaPartQuatDataFramesPtr = AllocLoad_XAnimDeltaPartQuatDataFrames();
			varXAnimDeltaPartQuatDataFrames = *varXAnimDeltaPartQuatDataFramesPtr;
			Load_XAnimDeltaPartQuatDataFrames(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDeltaPartQuatDataFramesPtr);
		}
	}
}

void Load_XAnimDeltaPartQuatDataFramesPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataFramesPtr, sizeof(XAnimDeltaPartQuatDataFrames*) * count);
	XAnimDeltaPartQuatDataFrames** pointer = varXAnimDeltaPartQuatDataFramesPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatDataFramesPtr = pointer;
		Load_XAnimDeltaPartQuatDataFramesPtr(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatDataPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatData, sizeof(XAnimDeltaPartQuatData));
	if (*varXAnimDeltaPartQuatDataPtr != nullptr)
	{
		if (*varXAnimDeltaPartQuatDataPtr == (XAnimDeltaPartQuatData*)0xFFFFFFFF)
		{
			*varXAnimDeltaPartQuatDataPtr = AllocLoad_XAnimDeltaPartQuatData();
			varXAnimDeltaPartQuatData = *varXAnimDeltaPartQuatDataPtr;
			Load_XAnimDeltaPartQuatData(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDeltaPartQuatDataPtr);
		}
	}
}

void Load_XAnimDeltaPartQuatDataPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatDataPtr, sizeof(XAnimDeltaPartQuatData*) * count);
	XAnimDeltaPartQuatData** pointer = varXAnimDeltaPartQuatDataPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatDataPtr = pointer;
		Load_XAnimDeltaPartQuatDataPtr(false);
		pointer++;
	}
}

void Load_XAnimDeltaPartQuatPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuat, sizeof(XAnimDeltaPartQuat));
	if (*varXAnimDeltaPartQuatPtr != nullptr)
	{
		if (*varXAnimDeltaPartQuatPtr == (XAnimDeltaPartQuat*)0xFFFFFFFF)
		{
			*varXAnimDeltaPartQuatPtr = AllocLoad_XAnimDeltaPartQuat();
			varXAnimDeltaPartQuat = *varXAnimDeltaPartQuatPtr;
			Load_XAnimDeltaPartQuat(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDeltaPartQuatPtr);
		}
	}
}

void Load_XAnimDeltaPartQuatPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDeltaPartQuatPtr, sizeof(XAnimDeltaPartQuat*) * count);
	XAnimDeltaPartQuat** pointer = varXAnimDeltaPartQuatPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDeltaPartQuatPtr = pointer;
		Load_XAnimDeltaPartQuatPtr(false);
		pointer++;
	}
}

void Load_XAnimDynamicFrames(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDynamicFrames, sizeof(XAnimDynamicFrames));

}

void Load_XAnimDynamicFramesArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDynamicFrames, sizeof(XAnimDynamicFrames) * count);
	XAnimDynamicFrames* pointer = varXAnimDynamicFrames;
	for (int i = 0; i < count; i++)
	{
		varXAnimDynamicFrames = pointer;
		Load_XAnimDynamicFrames(false);
		pointer++;
	}
}

void Load_XAnimDynamicFramesPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDynamicFrames, sizeof(XAnimDynamicFrames));
	if (*varXAnimDynamicFramesPtr != nullptr)
	{
		if (*varXAnimDynamicFramesPtr == (XAnimDynamicFrames*)0xFFFFFFFF)
		{
			*varXAnimDynamicFramesPtr = AllocLoad_XAnimDynamicFrames();
			varXAnimDynamicFrames = *varXAnimDynamicFramesPtr;
			Load_XAnimDynamicFrames(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDynamicFramesPtr);
		}
	}
}

void Load_XAnimDynamicFramesPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDynamicFramesPtr, sizeof(XAnimDynamicFrames*) * count);
	XAnimDynamicFrames** pointer = varXAnimDynamicFramesPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDynamicFramesPtr = pointer;
		Load_XAnimDynamicFramesPtr(false);
		pointer++;
	}
}

void Load_XAnimDynamicIndices(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDynamicIndices, sizeof(XAnimDynamicIndices));

}

void Load_XAnimDynamicIndicesArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDynamicIndices, sizeof(XAnimDynamicIndices) * count);
	XAnimDynamicIndices* pointer = varXAnimDynamicIndices;
	for (int i = 0; i < count; i++)
	{
		varXAnimDynamicIndices = pointer;
		Load_XAnimDynamicIndices(false);
		pointer++;
	}
}

void Load_XAnimDynamicIndicesPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimDynamicIndices, sizeof(XAnimDynamicIndices));
	if (*varXAnimDynamicIndicesPtr != nullptr)
	{
		if (*varXAnimDynamicIndicesPtr == (XAnimDynamicIndices*)0xFFFFFFFF)
		{
			*varXAnimDynamicIndicesPtr = AllocLoad_XAnimDynamicIndices();
			varXAnimDynamicIndices = *varXAnimDynamicIndicesPtr;
			Load_XAnimDynamicIndices(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimDynamicIndicesPtr);
		}
	}
}

void Load_XAnimDynamicIndicesPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimDynamicIndicesPtr, sizeof(XAnimDynamicIndices*) * count);
	XAnimDynamicIndices** pointer = varXAnimDynamicIndicesPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimDynamicIndicesPtr = pointer;
		Load_XAnimDynamicIndicesPtr(false);
		pointer++;
	}
}

void Load_XAnimIndices(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimIndices, sizeof(XAnimIndices));

}

void Load_XAnimIndicesArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimIndices, sizeof(XAnimIndices) * count);
	XAnimIndices* pointer = varXAnimIndices;
	for (int i = 0; i < count; i++)
	{
		varXAnimIndices = pointer;
		Load_XAnimIndices(false);
		pointer++;
	}
}

void Load_XAnimIndicesPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimIndices, sizeof(XAnimIndices));
	if (*varXAnimIndicesPtr != nullptr)
	{
		if (*varXAnimIndicesPtr == (XAnimIndices*)0xFFFFFFFF)
		{
			*varXAnimIndicesPtr = AllocLoad_XAnimIndices();
			varXAnimIndices = *varXAnimIndicesPtr;
			Load_XAnimIndices(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimIndicesPtr);
		}
	}
}

void Load_XAnimIndicesPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimIndicesPtr, sizeof(XAnimIndices*) * count);
	XAnimIndices** pointer = varXAnimIndicesPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimIndicesPtr = pointer;
		Load_XAnimIndicesPtr(false);
		pointer++;
	}
}

void Load_XAnimNotifyInfo(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimNotifyInfo, sizeof(XAnimNotifyInfo));

}

void Load_XAnimNotifyInfoArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimNotifyInfo, sizeof(XAnimNotifyInfo) * count);
	XAnimNotifyInfo* pointer = varXAnimNotifyInfo;
	for (int i = 0; i < count; i++)
	{
		varXAnimNotifyInfo = pointer;
		Load_XAnimNotifyInfo(false);
		pointer++;
	}
}

void Load_XAnimNotifyInfoPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimNotifyInfo, sizeof(XAnimNotifyInfo));
	if (*varXAnimNotifyInfoPtr != nullptr)
	{
		if (*varXAnimNotifyInfoPtr == (XAnimNotifyInfo*)0xFFFFFFFF)
		{
			*varXAnimNotifyInfoPtr = AllocLoad_XAnimNotifyInfo();
			varXAnimNotifyInfo = *varXAnimNotifyInfoPtr;
			Load_XAnimNotifyInfo(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimNotifyInfoPtr);
		}
	}
}

void Load_XAnimNotifyInfoPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimNotifyInfoPtr, sizeof(XAnimNotifyInfo*) * count);
	XAnimNotifyInfo** pointer = varXAnimNotifyInfoPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimNotifyInfoPtr = pointer;
		Load_XAnimNotifyInfoPtr(false);
		pointer++;
	}
}

void Load_XAnimPartTrans(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimPartTrans, sizeof(XAnimPartTrans));

	varXAnimPartTransData = &varXAnimPartTrans->u;
	Load_XAnimPartTransData(false);

}

void Load_XAnimPartTransArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimPartTrans, sizeof(XAnimPartTrans) * count);
	XAnimPartTrans* pointer = varXAnimPartTrans;
	for (int i = 0; i < count; i++)
	{
		varXAnimPartTrans = pointer;
		Load_XAnimPartTrans(false);
		pointer++;
	}
}

void Load_XAnimPartTransData(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimPartTransData, sizeof(XAnimPartTransData));

}

void Load_XAnimPartTransDataArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimPartTransData, sizeof(XAnimPartTransData) * count);
	XAnimPartTransData* pointer = varXAnimPartTransData;
	for (int i = 0; i < count; i++)
	{
		varXAnimPartTransData = pointer;
		Load_XAnimPartTransData(false);
		pointer++;
	}
}

void Load_XAnimPartTransDataPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimPartTransData, sizeof(XAnimPartTransData));
	if (*varXAnimPartTransDataPtr != nullptr)
	{
		if (*varXAnimPartTransDataPtr == (XAnimPartTransData*)0xFFFFFFFF)
		{
			*varXAnimPartTransDataPtr = AllocLoad_XAnimPartTransData();
			varXAnimPartTransData = *varXAnimPartTransDataPtr;
			Load_XAnimPartTransData(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimPartTransDataPtr);
		}
	}
}

void Load_XAnimPartTransDataPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimPartTransDataPtr, sizeof(XAnimPartTransData*) * count);
	XAnimPartTransData** pointer = varXAnimPartTransDataPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimPartTransDataPtr = pointer;
		Load_XAnimPartTransDataPtr(false);
		pointer++;
	}
}

void Load_XAnimPartTransFrames(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimPartTransFrames, sizeof(XAnimPartTransFrames));

	varXAnimDynamicFrames = &varXAnimPartTransFrames->frames;
	Load_XAnimDynamicFrames(false);

	varXAnimDynamicIndices = &varXAnimPartTransFrames->indices;
	Load_XAnimDynamicIndices(false);

}

void Load_XAnimPartTransFramesArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimPartTransFrames, sizeof(XAnimPartTransFrames) * count);
	XAnimPartTransFrames* pointer = varXAnimPartTransFrames;
	for (int i = 0; i < count; i++)
	{
		varXAnimPartTransFrames = pointer;
		Load_XAnimPartTransFrames(false);
		pointer++;
	}
}

void Load_XAnimPartTransFramesPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimPartTransFrames, sizeof(XAnimPartTransFrames));
	if (*varXAnimPartTransFramesPtr != nullptr)
	{
		if (*varXAnimPartTransFramesPtr == (XAnimPartTransFrames*)0xFFFFFFFF)
		{
			*varXAnimPartTransFramesPtr = AllocLoad_XAnimPartTransFrames();
			varXAnimPartTransFrames = *varXAnimPartTransFramesPtr;
			Load_XAnimPartTransFrames(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimPartTransFramesPtr);
		}
	}
}

void Load_XAnimPartTransFramesPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimPartTransFramesPtr, sizeof(XAnimPartTransFrames*) * count);
	XAnimPartTransFrames** pointer = varXAnimPartTransFramesPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimPartTransFramesPtr = pointer;
		Load_XAnimPartTransFramesPtr(false);
		pointer++;
	}
}

void Load_XAnimPartTransPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimPartTrans, sizeof(XAnimPartTrans));
	if (*varXAnimPartTransPtr != nullptr)
	{
		if (*varXAnimPartTransPtr == (XAnimPartTrans*)0xFFFFFFFF)
		{
			*varXAnimPartTransPtr = AllocLoad_XAnimPartTrans();
			varXAnimPartTrans = *varXAnimPartTransPtr;
			Load_XAnimPartTrans(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAnimPartTransPtr);
		}
	}
}

void Load_XAnimPartTransPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimPartTransPtr, sizeof(XAnimPartTrans*) * count);
	XAnimPartTrans** pointer = varXAnimPartTransPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimPartTransPtr = pointer;
		Load_XAnimPartTransPtr(false);
		pointer++;
	}
}

void Load_XAnimParts(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimParts, sizeof(XAnimParts));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varXAnimParts->name;
	Load_XString(false);

	if (varXAnimParts->names)
	{
		if (varXAnimParts->names == (uint16*)0xFFFFFFFF)
		{
			varXAnimParts->names = AllocLoad_uint16();
			varuint16 = varXAnimParts->names;
			Load_uint16Array(true, (varXAnimParts->boneCount[9]));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXAnimParts->names);
		}
	}

	if (varXAnimParts->notify)
	{
		if (varXAnimParts->notify == (XAnimNotifyInfo*)0xFFFFFFFF)
		{
			varXAnimParts->notify = AllocLoad_XAnimNotifyInfo();
			varXAnimNotifyInfo = varXAnimParts->notify;
			Load_XAnimNotifyInfoArray(true, (varXAnimParts->notifyCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXAnimParts->notify);
		}
	}

	if (varXAnimParts->deltaPart)
	{
		varXAnimDeltaPartPtr = &varXAnimParts->deltaPart;
		Load_XAnimDeltaPartPtr(false);
	}

	if (varXAnimParts->dataByte)
	{
		if (varXAnimParts->dataByte == (char*)0xFFFFFFFF)
		{
			varXAnimParts->dataByte = AllocLoad_char();
			varchar = varXAnimParts->dataByte;
			Load_charArray(true, (varXAnimParts->dataByteCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXAnimParts->dataByte);
		}
	}

	if (varXAnimParts->dataShort)
	{
		if (varXAnimParts->dataShort == (int16*)0xFFFFFFFF)
		{
			varXAnimParts->dataShort = AllocLoad_int16();
			varint16 = varXAnimParts->dataShort;
			Load_int16Array(true, (varXAnimParts->dataShortCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXAnimParts->dataShort);
		}
	}

	if (varXAnimParts->randomDataShort)
	{
		if (varXAnimParts->randomDataShort == (int16*)0xFFFFFFFF)
		{
			varXAnimParts->randomDataShort = AllocLoad_int16();
			varint16 = varXAnimParts->randomDataShort;
			Load_int16Array(true, (varXAnimParts->randomDataShortCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXAnimParts->randomDataShort);
		}
	}

	if (varXAnimParts->randomDataByte)
	{
		if (varXAnimParts->randomDataByte == (char*)0xFFFFFFFF)
		{
			varXAnimParts->randomDataByte = AllocLoad_char();
			varchar = varXAnimParts->randomDataByte;
			Load_charArray(true, (varXAnimParts->randomDataByteCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXAnimParts->randomDataByte);
		}
	}

	varXAnimIndices = &varXAnimParts->indices;
	Load_XAnimIndices(false);

	DB_PopStreamPos();
}

void Load_XAnimPartsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimParts, sizeof(XAnimParts) * count);
	XAnimParts* pointer = varXAnimParts;
	for (int i = 0; i < count; i++)
	{
		varXAnimParts = pointer;
		Load_XAnimParts(false);
		pointer++;
	}
}

void Load_XAnimPartsAsset(XAnimParts** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_XANIMPARTS, (void**)varXAnimPartsPtr);
}

void Load_XAnimPartsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAnimParts, sizeof(XAnimParts*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	XAnimParts* pointer = *varXAnimPartsPtr;
	if (*varXAnimPartsPtr != nullptr)
	{
		if (*varXAnimPartsPtr == (XAnimParts*)0xFFFFFFFF || *varXAnimPartsPtr == (XAnimParts*)0xFFFFFFFE)
		{
			*varXAnimPartsPtr = AllocLoad_XAnimParts();
			varXAnimParts = *varXAnimPartsPtr;
			XAnimParts** insertedPointer = nullptr;
			if (pointer == (XAnimParts*)0xFFFFFFFE)
			{
				insertedPointer = (XAnimParts**)DB_InsertPointer();
			}
			Load_XAnimParts(true);
			Load_XAnimPartsAsset(varXAnimPartsPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varXAnimPartsPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varXAnimPartsPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_XAnimPartsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAnimPartsPtr, sizeof(XAnimParts*) * count);
	XAnimParts** pointer = varXAnimPartsPtr;
	for (int i = 0; i < count; i++)
	{
		varXAnimPartsPtr = pointer;
		Load_XAnimPartsPtr(false);
		pointer++;
	}
}

void Load_XAsset(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAsset, sizeof(XAsset));

	varXAssetHeader = &varXAsset->asset;
	Load_XAssetHeader(false);

}

void Load_XAssetArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAsset, sizeof(XAsset) * count);
	XAsset* pointer = varXAsset;
	for (int i = 0; i < count; i++)
	{
		varXAsset = pointer;
		Load_XAsset(false);
		pointer++;
	}
}

void Load_XAssetHeader(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAssetHeader, sizeof(XAssetHeader));

	switch (varXAsset->type)
	{
	case XAssetType::ASSET_TYPE_PHYSPRESET:
		varPhysPresetPtr = &varXAssetHeader->physPreset;
		Load_PhysPresetPtr(false);
		break;
	case XAssetType::ASSET_TYPE_PHYSCOLLMAP:
		varPhysCollmapPtr = &varXAssetHeader->physCollmap;
		Load_PhysCollmapPtr(false);
		break;
	case XAssetType::ASSET_TYPE_XANIMPARTS:
		varXAnimPartsPtr = &varXAssetHeader->parts;
		Load_XAnimPartsPtr(false);
		break;
	case XAssetType::ASSET_TYPE_XMODEL_SURFS:
		varXModelSurfsPtr = &varXAssetHeader->modelSurfs;
		Load_XModelSurfsPtr(false);
		break;
	case XAssetType::ASSET_TYPE_XMODEL:
		varXModelPtr = &varXAssetHeader->xmodel;
		Load_XModelPtr(false);
		break;
	case XAssetType::ASSET_TYPE_MATERIAL:
		varMaterialPtr = &varXAssetHeader->material;
		Load_MaterialPtr(false);
		break;
	case XAssetType::ASSET_TYPE_PIXELSHADER:
		varMaterialPixelShaderPtr = &varXAssetHeader->pixelShader;
		Load_MaterialPixelShaderPtr(false);
		break;
	case XAssetType::ASSET_TYPE_VERTEXSHADER:
		varMaterialVertexShaderPtr = &varXAssetHeader->vertexShader;
		Load_MaterialVertexShaderPtr(false);
		break;
	case XAssetType::ASSET_TYPE_VERTEXDECL:
		varMaterialVertexDeclarationPtr = &varXAssetHeader->vertexDecl;
		Load_MaterialVertexDeclarationPtr(false);
		break;
	case XAssetType::ASSET_TYPE_TECHNIQUE_SET:
		varMaterialTechniqueSetPtr = &varXAssetHeader->techset;
		Load_MaterialTechniqueSetPtr(false);
		break;
	case XAssetType::ASSET_TYPE_IMAGE:
		varGfxImagePtr = &varXAssetHeader->image;
		Load_GfxImagePtr(false);
		break;
	case XAssetType::ASSET_TYPE_SOUND:
		varsnd_alias_list_tPtr = &varXAssetHeader->sound;
		Load_snd_alias_list_tPtr(false);
		break;
	case XAssetType::ASSET_TYPE_SOUND_CURVE:
		varSndCurvePtr = &varXAssetHeader->sndCurve;
		Load_SndCurvePtr(false);
		break;
	case XAssetType::ASSET_TYPE_FX:
		varFxEffectDefPtr = &varXAssetHeader->fxEffectDef;
		Load_FxEffectDefPtr(false);
		break;
	case XAssetType::ASSET_TYPE_CLIPMAP_MP:
		varclipMap_tPtr = &varXAssetHeader->clipMap;
		Load_clipMap_tPtr(false);
		break;
	case XAssetType::ASSET_TYPE_COMWORLD:
		varComWorldPtr = &varXAssetHeader->comWorld;
		Load_ComWorldPtr(false);
		break;
	case XAssetType::ASSET_TYPE_GAMEWORLD_MP:
		varGameWorldMpPtr = &varXAssetHeader->gameWorldMp;
		Load_GameWorldMpPtr(false);
		break;
	case XAssetType::ASSET_TYPE_MAP_ENTS:
		varMapEntsPtr = &varXAssetHeader->mapEnts;
		Load_MapEntsPtr(false);
		break;
	case XAssetType::ASSET_TYPE_FXWORLD:
		varFxWorldPtr = &varXAssetHeader->fxWorld;
		Load_FxWorldPtr(false);
		break;
	case XAssetType::ASSET_TYPE_LIGHT_DEF:
		varGfxLightDefPtr = &varXAssetHeader->lightDef;
		Load_GfxLightDefPtr(false);
		break;
	case XAssetType::ASSET_TYPE_FONT:
		varFont_sPtr = &varXAssetHeader->font;
		Load_Font_sPtr(false);
		break;
	case XAssetType::ASSET_TYPE_MENULIST:
		varMenuListPtr = &varXAssetHeader->menuList;
		Load_MenuListPtr(false);
		break;
	case XAssetType::ASSET_TYPE_MENU:
		varmenuDef_tPtr = &varXAssetHeader->menu;
		Load_menuDef_tPtr(false);
		break;
	case XAssetType::ASSET_TYPE_LOCALIZE_ENTRY:
		varLocalizeEntryPtr = &varXAssetHeader->localizeEntry;
		Load_LocalizeEntryPtr(false);
		break;
	case XAssetType::ASSET_TYPE_RAWFILE:
		varRawFilePtr = &varXAssetHeader->rawFile;
		Load_RawFilePtr(false);
		break;
	case XAssetType::ASSET_TYPE_STRINGTABLE:
		varStringTablePtr = &varXAssetHeader->stringTable;
		Load_StringTablePtr(false);
		break;
	case XAssetType::ASSET_TYPE_LEADERBOARD:
		varLeaderboardDefPtr = &varXAssetHeader->leaderboardDef;
		Load_LeaderboardDefPtr(false);
		break;
	case XAssetType::ASSET_TYPE_STRUCTURED_DATA_DEF:
		varStructuredDataDefSetPtr = &varXAssetHeader->structuredDataDefSet;
		Load_StructuredDataDefSetPtr(false);
		break;
	case XAssetType::ASSET_TYPE_TRACER:
		varTracerDefPtr = &varXAssetHeader->tracerDef;
		Load_TracerDefPtr(false);
		break;
	case XAssetType::ASSET_TYPE_ASSETLIST:
		varXAssetListPtr = &varXAssetHeader->assetList;
		Load_XAssetListPtr(false);
		break;
	}
}

void Load_XAssetHeaderArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAssetHeader, sizeof(XAssetHeader) * count);
	XAssetHeader* pointer = varXAssetHeader;
	for (int i = 0; i < count; i++)
	{
		varXAssetHeader = pointer;
		Load_XAssetHeader(false);
		pointer++;
	}
}

void Load_XAssetHeaderPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAssetHeader, sizeof(XAssetHeader));
	if (*varXAssetHeaderPtr != nullptr)
	{
		if (*varXAssetHeaderPtr == (XAssetHeader*)0xFFFFFFFF)
		{
			*varXAssetHeaderPtr = AllocLoad_XAssetHeader();
			varXAssetHeader = *varXAssetHeaderPtr;
			Load_XAssetHeader(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAssetHeaderPtr);
		}
	}
}

void Load_XAssetHeaderPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAssetHeaderPtr, sizeof(XAssetHeader*) * count);
	XAssetHeader** pointer = varXAssetHeaderPtr;
	for (int i = 0; i < count; i++)
	{
		varXAssetHeaderPtr = pointer;
		Load_XAssetHeaderPtr(false);
		pointer++;
	}
}

void Load_XAssetList(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAssetList, sizeof(XAssetList));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varScriptStringList = &varXAssetList->stringList;
	Load_ScriptStringList(false);

	if (varXAssetList->assets)
	{
		if (varXAssetList->assets == (XAsset*)0xFFFFFFFF)
		{
			varXAssetList->assets = AllocLoad_XAsset();
			varXAsset = varXAssetList->assets;
			Load_XAssetArray(true, (varXAssetList->assetCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXAssetList->assets);
		}
	}

	DB_PopStreamPos();
}

void Load_XAssetListArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAssetList, sizeof(XAssetList) * count);
	XAssetList* pointer = varXAssetList;
	for (int i = 0; i < count; i++)
	{
		varXAssetList = pointer;
		Load_XAssetList(false);
		pointer++;
	}
}

void Load_XAssetListAsset(XAssetList** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_ASSETLIST, (void**)varXAssetListPtr);
}

void Load_XAssetListPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAssetList, sizeof(XAssetList*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	XAssetList* pointer = *varXAssetListPtr;
	if (*varXAssetListPtr != nullptr)
	{
		if (*varXAssetListPtr == (XAssetList*)0xFFFFFFFF || *varXAssetListPtr == (XAssetList*)0xFFFFFFFE)
		{
			*varXAssetListPtr = AllocLoad_XAssetList();
			varXAssetList = *varXAssetListPtr;
			XAssetList** insertedPointer = nullptr;
			if (pointer == (XAssetList*)0xFFFFFFFE)
			{
				insertedPointer = (XAssetList**)DB_InsertPointer();
			}
			Load_XAssetList(true);
			Load_XAssetListAsset(varXAssetListPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varXAssetListPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varXAssetListPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_XAssetListPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAssetListPtr, sizeof(XAssetList*) * count);
	XAssetList** pointer = varXAssetListPtr;
	for (int i = 0; i < count; i++)
	{
		varXAssetListPtr = pointer;
		Load_XAssetListPtr(false);
		pointer++;
	}
}

void Load_XAssetPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXAsset, sizeof(XAsset));
	if (*varXAssetPtr != nullptr)
	{
		if (*varXAssetPtr == (XAsset*)0xFFFFFFFF)
		{
			*varXAssetPtr = AllocLoad_XAsset();
			varXAsset = *varXAssetPtr;
			Load_XAsset(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXAssetPtr);
		}
	}
}

void Load_XAssetPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXAssetPtr, sizeof(XAsset*) * count);
	XAsset** pointer = varXAssetPtr;
	for (int i = 0; i < count; i++)
	{
		varXAssetPtr = pointer;
		Load_XAssetPtr(false);
		pointer++;
	}
}

void Load_XBoneInfo(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXBoneInfo, sizeof(XBoneInfo));

	varBounds = &varXBoneInfo->bounds;
	Load_Bounds(false);

}

void Load_XBoneInfoArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXBoneInfo, sizeof(XBoneInfo) * count);
	XBoneInfo* pointer = varXBoneInfo;
	for (int i = 0; i < count; i++)
	{
		varXBoneInfo = pointer;
		Load_XBoneInfo(false);
		pointer++;
	}
}

void Load_XBoneInfoPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXBoneInfo, sizeof(XBoneInfo));
	if (*varXBoneInfoPtr != nullptr)
	{
		if (*varXBoneInfoPtr == (XBoneInfo*)0xFFFFFFFF)
		{
			*varXBoneInfoPtr = AllocLoad_XBoneInfo();
			varXBoneInfo = *varXBoneInfoPtr;
			Load_XBoneInfo(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXBoneInfoPtr);
		}
	}
}

void Load_XBoneInfoPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXBoneInfoPtr, sizeof(XBoneInfo*) * count);
	XBoneInfo** pointer = varXBoneInfoPtr;
	for (int i = 0; i < count; i++)
	{
		varXBoneInfoPtr = pointer;
		Load_XBoneInfoPtr(false);
		pointer++;
	}
}

void Load_XModel(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModel, sizeof(XModel));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varXModel->name;
	Load_XString(false);

	if (varXModel->boneNames)
	{
		if (varXModel->boneNames == (uint16*)0xFFFFFFFF)
		{
			varXModel->boneNames = AllocLoad_uint16();
			varuint16 = varXModel->boneNames;
			Load_uint16Array(true, (varXModel->numBones));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->boneNames);
		}
	}

	if (varXModel->parentList)
	{
		if (varXModel->parentList == (char*)0xFFFFFFFF)
		{
			varXModel->parentList = AllocLoad_char();
			varchar = varXModel->parentList;
			Load_charArray(true, (varXModel->numBones - varXModel->numRootBones));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->parentList);
		}
	}

	if (varXModel->quats)
	{
		if (varXModel->quats == (int16*)0xFFFFFFFF)
		{
			varXModel->quats = AllocLoad_int16();
			varint16 = varXModel->quats;
			Load_int16Array(true, (4 * (varXModel->numBones - varXModel->numRootBones)));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->quats);
		}
	}

	if (varXModel->trans)
	{
		if (varXModel->trans == (float*)0xFFFFFFFF)
		{
			varXModel->trans = AllocLoad_float();
			varfloat = varXModel->trans;
			Load_floatArray(true, (3 * (varXModel->numBones - varXModel->numRootBones)));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->trans);
		}
	}

	if (varXModel->partClassification)
	{
		if (varXModel->partClassification == (char*)0xFFFFFFFF)
		{
			varXModel->partClassification = AllocLoad_char();
			varchar = varXModel->partClassification;
			Load_charArray(true, (varXModel->numBones));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->partClassification);
		}
	}

	if (varXModel->baseMat)
	{
		if (varXModel->baseMat == (DObjAnimMat*)0xFFFFFFFF)
		{
			varXModel->baseMat = AllocLoad_DObjAnimMat();
			varDObjAnimMat = varXModel->baseMat;
			Load_DObjAnimMatArray(true, (varXModel->numBones));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->baseMat);
		}
	}

	if (varXModel->materialHandles)
	{
		if (varXModel->materialHandles == (Material**)0xFFFFFFFF)
		{
			varXModel->materialHandles = AllocLoad_MaterialPtr();
			varMaterialPtr = varXModel->materialHandles;
			Load_MaterialPtrArray(true, (varXModel->numsurfs));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->materialHandles);
		}
	}

	varXModelLodInfo = varXModel->lodInfo;
	Load_XModelLodInfoArray(false, 4);

	if (varXModel->collSurfs)
	{
		if (varXModel->collSurfs == (XModelCollSurf_s*)0xFFFFFFFF)
		{
			varXModel->collSurfs = AllocLoad_XModelCollSurf_s();
			varXModelCollSurf_s = varXModel->collSurfs;
			Load_XModelCollSurf_sArray(true, (varXModel->numCollSurfs));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->collSurfs);
		}
	}

	if (varXModel->boneInfo)
	{
		if (varXModel->boneInfo == (XBoneInfo*)0xFFFFFFFF)
		{
			varXModel->boneInfo = AllocLoad_XBoneInfo();
			varXBoneInfo = varXModel->boneInfo;
			Load_XBoneInfoArray(true, (varXModel->numBones));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModel->boneInfo);
		}
	}

	varBounds = &varXModel->bounds;
	Load_Bounds(false);

	varPhysPresetPtr = &varXModel->physPreset;
	Load_PhysPresetPtr(false);

	varPhysCollmapPtr = &varXModel->physCollmap;
	Load_PhysCollmapPtr(false);

	DB_PopStreamPos();
}

void Load_XModelArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModel, sizeof(XModel) * count);
	XModel* pointer = varXModel;
	for (int i = 0; i < count; i++)
	{
		varXModel = pointer;
		Load_XModel(false);
		pointer++;
	}
}

void Load_XModelAsset(XModel** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_XMODEL, (void**)varXModelPtr);
}

void Load_XModelCollSurf_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModelCollSurf_s, sizeof(XModelCollSurf_s));

	if (varXModelCollSurf_s->collTris)
	{
		if (varXModelCollSurf_s->collTris == (XModelCollTri_s*)0xFFFFFFFF)
		{
			varXModelCollSurf_s->collTris = AllocLoad_XModelCollTri_s();
			varXModelCollTri_s = varXModelCollSurf_s->collTris;
			Load_XModelCollTri_sArray(true, (varXModelCollSurf_s->numCollTris));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModelCollSurf_s->collTris);
		}
	}

	varBounds = &varXModelCollSurf_s->bounds;
	Load_Bounds(false);

}

void Load_XModelCollSurf_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelCollSurf_s, sizeof(XModelCollSurf_s) * count);
	XModelCollSurf_s* pointer = varXModelCollSurf_s;
	for (int i = 0; i < count; i++)
	{
		varXModelCollSurf_s = pointer;
		Load_XModelCollSurf_s(false);
		pointer++;
	}
}

void Load_XModelCollSurf_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModelCollSurf_s, sizeof(XModelCollSurf_s));
	if (*varXModelCollSurf_sPtr != nullptr)
	{
		if (*varXModelCollSurf_sPtr == (XModelCollSurf_s*)0xFFFFFFFF)
		{
			*varXModelCollSurf_sPtr = AllocLoad_XModelCollSurf_s();
			varXModelCollSurf_s = *varXModelCollSurf_sPtr;
			Load_XModelCollSurf_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXModelCollSurf_sPtr);
		}
	}
}

void Load_XModelCollSurf_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelCollSurf_sPtr, sizeof(XModelCollSurf_s*) * count);
	XModelCollSurf_s** pointer = varXModelCollSurf_sPtr;
	for (int i = 0; i < count; i++)
	{
		varXModelCollSurf_sPtr = pointer;
		Load_XModelCollSurf_sPtr(false);
		pointer++;
	}
}

void Load_XModelCollTri_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModelCollTri_s, sizeof(XModelCollTri_s));

}

void Load_XModelCollTri_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelCollTri_s, sizeof(XModelCollTri_s) * count);
	XModelCollTri_s* pointer = varXModelCollTri_s;
	for (int i = 0; i < count; i++)
	{
		varXModelCollTri_s = pointer;
		Load_XModelCollTri_s(false);
		pointer++;
	}
}

void Load_XModelCollTri_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModelCollTri_s, sizeof(XModelCollTri_s));
	if (*varXModelCollTri_sPtr != nullptr)
	{
		if (*varXModelCollTri_sPtr == (XModelCollTri_s*)0xFFFFFFFF)
		{
			*varXModelCollTri_sPtr = AllocLoad_XModelCollTri_s();
			varXModelCollTri_s = *varXModelCollTri_sPtr;
			Load_XModelCollTri_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXModelCollTri_sPtr);
		}
	}
}

void Load_XModelCollTri_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelCollTri_sPtr, sizeof(XModelCollTri_s*) * count);
	XModelCollTri_s** pointer = varXModelCollTri_sPtr;
	for (int i = 0; i < count; i++)
	{
		varXModelCollTri_sPtr = pointer;
		Load_XModelCollTri_sPtr(false);
		pointer++;
	}
}

void Load_XModelLodInfo(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModelLodInfo, sizeof(XModelLodInfo));

	varXModelSurfsPtr = &varXModelLodInfo->modelSurfs;
	Load_XModelSurfsPtr(false);

	if (varXModelLodInfo->surfs)
	{
		if (varXModelLodInfo->surfs == (XSurface*)0xFFFFFFFF)
		{
			varXModelLodInfo->surfs = AllocLoad_XSurface();
			varXSurface = varXModelLodInfo->surfs;
			Load_XSurfaceArray(true, (varXModelLodInfo->numsurfs));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModelLodInfo->surfs);
		}
	}

}

void Load_XModelLodInfoArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelLodInfo, sizeof(XModelLodInfo) * count);
	XModelLodInfo* pointer = varXModelLodInfo;
	for (int i = 0; i < count; i++)
	{
		varXModelLodInfo = pointer;
		Load_XModelLodInfo(false);
		pointer++;
	}
}

void Load_XModelLodInfoPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModelLodInfo, sizeof(XModelLodInfo));
	if (*varXModelLodInfoPtr != nullptr)
	{
		if (*varXModelLodInfoPtr == (XModelLodInfo*)0xFFFFFFFF)
		{
			*varXModelLodInfoPtr = AllocLoad_XModelLodInfo();
			varXModelLodInfo = *varXModelLodInfoPtr;
			Load_XModelLodInfo(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXModelLodInfoPtr);
		}
	}
}

void Load_XModelLodInfoPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelLodInfoPtr, sizeof(XModelLodInfo*) * count);
	XModelLodInfo** pointer = varXModelLodInfoPtr;
	for (int i = 0; i < count; i++)
	{
		varXModelLodInfoPtr = pointer;
		Load_XModelLodInfoPtr(false);
		pointer++;
	}
}

void Load_XModelPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModel, sizeof(XModel*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	XModel* pointer = *varXModelPtr;
	if (*varXModelPtr != nullptr)
	{
		if (*varXModelPtr == (XModel*)0xFFFFFFFF || *varXModelPtr == (XModel*)0xFFFFFFFE)
		{
			*varXModelPtr = AllocLoad_XModel();
			varXModel = *varXModelPtr;
			XModel** insertedPointer = nullptr;
			if (pointer == (XModel*)0xFFFFFFFE)
			{
				insertedPointer = (XModel**)DB_InsertPointer();
			}
			Load_XModel(true);
			Load_XModelAsset(varXModelPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varXModelPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varXModelPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_XModelPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelPtr, sizeof(XModel*) * count);
	XModel** pointer = varXModelPtr;
	for (int i = 0; i < count; i++)
	{
		varXModelPtr = pointer;
		Load_XModelPtr(false);
		pointer++;
	}
}

void Load_XModelSurfs(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModelSurfs, sizeof(XModelSurfs));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varXModelSurfs->name;
	Load_XString(false);

	if (varXModelSurfs->surfs)
	{
		if (varXModelSurfs->surfs == (XSurface*)0xFFFFFFFF)
		{
			varXModelSurfs->surfs = AllocLoad_XSurface();
			varXSurface = varXModelSurfs->surfs;
			Load_XSurfaceArray(true, (varXModelSurfs->numsurfs));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXModelSurfs->surfs);
		}
	}

	DB_PopStreamPos();
}

void Load_XModelSurfsArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelSurfs, sizeof(XModelSurfs) * count);
	XModelSurfs* pointer = varXModelSurfs;
	for (int i = 0; i < count; i++)
	{
		varXModelSurfs = pointer;
		Load_XModelSurfs(false);
		pointer++;
	}
}

void Load_XModelSurfsAsset(XModelSurfs** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_XMODEL_SURFS, (void**)varXModelSurfsPtr);
}

void Load_XModelSurfsPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXModelSurfs, sizeof(XModelSurfs*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	XModelSurfs* pointer = *varXModelSurfsPtr;
	if (*varXModelSurfsPtr != nullptr)
	{
		if (*varXModelSurfsPtr == (XModelSurfs*)0xFFFFFFFF || *varXModelSurfsPtr == (XModelSurfs*)0xFFFFFFFE)
		{
			*varXModelSurfsPtr = AllocLoad_XModelSurfs();
			varXModelSurfs = *varXModelSurfsPtr;
			XModelSurfs** insertedPointer = nullptr;
			if (pointer == (XModelSurfs*)0xFFFFFFFE)
			{
				insertedPointer = (XModelSurfs**)DB_InsertPointer();
			}
			Load_XModelSurfs(true);
			Load_XModelSurfsAsset(varXModelSurfsPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varXModelSurfsPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varXModelSurfsPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_XModelSurfsPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXModelSurfsPtr, sizeof(XModelSurfs*) * count);
	XModelSurfs** pointer = varXModelSurfsPtr;
	for (int i = 0; i < count; i++)
	{
		varXModelSurfsPtr = pointer;
		Load_XModelSurfsPtr(false);
		pointer++;
	}
}

void Load_XRigidVertList(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXRigidVertList, sizeof(XRigidVertList));

	if (varXRigidVertList->collisionTree)
	{
		varXSurfaceCollisionTreePtr = &varXRigidVertList->collisionTree;
		Load_XSurfaceCollisionTreePtr(false);
	}

}

void Load_XRigidVertListArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXRigidVertList, sizeof(XRigidVertList) * count);
	XRigidVertList* pointer = varXRigidVertList;
	for (int i = 0; i < count; i++)
	{
		varXRigidVertList = pointer;
		Load_XRigidVertList(false);
		pointer++;
	}
}

void Load_XRigidVertListPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXRigidVertList, sizeof(XRigidVertList));
	if (*varXRigidVertListPtr != nullptr)
	{
		if (*varXRigidVertListPtr == (XRigidVertList*)0xFFFFFFFF)
		{
			*varXRigidVertListPtr = AllocLoad_XRigidVertList();
			varXRigidVertList = *varXRigidVertListPtr;
			Load_XRigidVertList(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXRigidVertListPtr);
		}
	}
}

void Load_XRigidVertListPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXRigidVertListPtr, sizeof(XRigidVertList*) * count);
	XRigidVertList** pointer = varXRigidVertListPtr;
	for (int i = 0; i < count; i++)
	{
		varXRigidVertListPtr = pointer;
		Load_XRigidVertListPtr(false);
		pointer++;
	}
}

void Load_XStringArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXString, sizeof(XString) * count);
	XString* pointer = varXString;
	for (int i = 0; i < count; i++)
	{
		varXString = pointer;
		Load_XString(false);
		pointer++;
	}
}

void Load_XStringPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXString, sizeof(XString));
	if (*varXStringPtr != nullptr)
	{
		*varXStringPtr = AllocLoad_XString();
		varXString = *varXStringPtr;
		Load_XString(true);
	}
}

void Load_XStringPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXStringPtr, sizeof(XString*) * count);
	XString** pointer = varXStringPtr;
	for (int i = 0; i < count; i++)
	{
		varXStringPtr = pointer;
		Load_XStringPtr(false);
		pointer++;
	}
}

void Load_XSurface(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurface, sizeof(XSurface));

	varXSurfaceVertexInfo = &varXSurface->vertInfo;
	Load_XSurfaceVertexInfo(false);

	DB_PushStreamPos(XFILE_BLOCK_VERTEX);
	if (varXSurface->verts0)
	{
		if (varXSurface->verts0 == (GfxPackedVertex*)0xFFFFFFFF)
		{
			varXSurface->verts0 = AllocLoad_GfxPackedVertex();
			varGfxPackedVertex = varXSurface->verts0;
			Load_GfxPackedVertexArray(true, (varXSurface->vertCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXSurface->verts0);
		}
	}
	DB_PopStreamPos();

	if (varXSurface->vertList)
	{
		if (varXSurface->vertList == (XRigidVertList*)0xFFFFFFFF)
		{
			varXSurface->vertList = AllocLoad_XRigidVertList();
			varXRigidVertList = varXSurface->vertList;
			Load_XRigidVertListArray(true, (varXSurface->vertListCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXSurface->vertList);
		}
	}

	DB_PushStreamPos(XFILE_BLOCK_INDEX);
	if (varXSurface->triIndices)
	{
		if (varXSurface->triIndices == (TriIndice*)0xFFFFFFFF)
		{
			varXSurface->triIndices = AllocLoad_TriIndice();
			varTriIndice = varXSurface->triIndices;
			Load_TriIndiceArray(true, (varXSurface->triCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXSurface->triIndices);
		}
	}
	DB_PopStreamPos();

}

void Load_XSurfaceArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurface, sizeof(XSurface) * count);
	XSurface* pointer = varXSurface;
	for (int i = 0; i < count; i++)
	{
		varXSurface = pointer;
		Load_XSurface(false);
		pointer++;
	}
}

void Load_XSurfaceCollisionAabb(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionAabb, sizeof(XSurfaceCollisionAabb));

}

void Load_XSurfaceCollisionAabbArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionAabb, sizeof(XSurfaceCollisionAabb) * count);
	XSurfaceCollisionAabb* pointer = varXSurfaceCollisionAabb;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceCollisionAabb = pointer;
		Load_XSurfaceCollisionAabb(false);
		pointer++;
	}
}

void Load_XSurfaceCollisionAabbPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionAabb, sizeof(XSurfaceCollisionAabb));
	if (*varXSurfaceCollisionAabbPtr != nullptr)
	{
		if (*varXSurfaceCollisionAabbPtr == (XSurfaceCollisionAabb*)0xFFFFFFFF)
		{
			*varXSurfaceCollisionAabbPtr = AllocLoad_XSurfaceCollisionAabb();
			varXSurfaceCollisionAabb = *varXSurfaceCollisionAabbPtr;
			Load_XSurfaceCollisionAabb(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXSurfaceCollisionAabbPtr);
		}
	}
}

void Load_XSurfaceCollisionAabbPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionAabbPtr, sizeof(XSurfaceCollisionAabb*) * count);
	XSurfaceCollisionAabb** pointer = varXSurfaceCollisionAabbPtr;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceCollisionAabbPtr = pointer;
		Load_XSurfaceCollisionAabbPtr(false);
		pointer++;
	}
}

void Load_XSurfaceCollisionLeaf(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionLeaf, sizeof(XSurfaceCollisionLeaf));

}

void Load_XSurfaceCollisionLeafArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionLeaf, sizeof(XSurfaceCollisionLeaf) * count);
	XSurfaceCollisionLeaf* pointer = varXSurfaceCollisionLeaf;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceCollisionLeaf = pointer;
		Load_XSurfaceCollisionLeaf(false);
		pointer++;
	}
}

void Load_XSurfaceCollisionLeafPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionLeaf, sizeof(XSurfaceCollisionLeaf));
	if (*varXSurfaceCollisionLeafPtr != nullptr)
	{
		*varXSurfaceCollisionLeafPtr = AllocLoad_XSurfaceCollisionLeaf();
		varXSurfaceCollisionLeaf = *varXSurfaceCollisionLeafPtr;
		Load_XSurfaceCollisionLeaf(true);
	}
}

void Load_XSurfaceCollisionLeafPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionLeafPtr, sizeof(XSurfaceCollisionLeaf*) * count);
	XSurfaceCollisionLeaf** pointer = varXSurfaceCollisionLeafPtr;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceCollisionLeafPtr = pointer;
		Load_XSurfaceCollisionLeafPtr(false);
		pointer++;
	}
}

void Load_XSurfaceCollisionNode(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionNode, sizeof(XSurfaceCollisionNode));

	varXSurfaceCollisionAabb = &varXSurfaceCollisionNode->aabb;
	Load_XSurfaceCollisionAabb(false);

}

void Load_XSurfaceCollisionNodeArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionNode, sizeof(XSurfaceCollisionNode) * count);
	XSurfaceCollisionNode* pointer = varXSurfaceCollisionNode;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceCollisionNode = pointer;
		Load_XSurfaceCollisionNode(false);
		pointer++;
	}
}

void Load_XSurfaceCollisionNodePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionNode, sizeof(XSurfaceCollisionNode));
	if (*varXSurfaceCollisionNodePtr != nullptr)
	{
		if (*varXSurfaceCollisionNodePtr == (XSurfaceCollisionNode*)0xFFFFFFFF)
		{
			*varXSurfaceCollisionNodePtr = AllocLoad_XSurfaceCollisionNode();
			varXSurfaceCollisionNode = *varXSurfaceCollisionNodePtr;
			Load_XSurfaceCollisionNode(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXSurfaceCollisionNodePtr);
		}
	}
}

void Load_XSurfaceCollisionNodePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionNodePtr, sizeof(XSurfaceCollisionNode*) * count);
	XSurfaceCollisionNode** pointer = varXSurfaceCollisionNodePtr;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceCollisionNodePtr = pointer;
		Load_XSurfaceCollisionNodePtr(false);
		pointer++;
	}
}

void Load_XSurfaceCollisionTree(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionTree, sizeof(XSurfaceCollisionTree));

	if (varXSurfaceCollisionTree->nodes)
	{
		if (varXSurfaceCollisionTree->nodes == (XSurfaceCollisionNode*)0xFFFFFFFF)
		{
			varXSurfaceCollisionTree->nodes = AllocLoad_XSurfaceCollisionNode();
			varXSurfaceCollisionNode = varXSurfaceCollisionTree->nodes;
			Load_XSurfaceCollisionNodeArray(true, (varXSurfaceCollisionTree->nodeCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXSurfaceCollisionTree->nodes);
		}
	}

	if (varXSurfaceCollisionTree->leafs)
	{
		if (varXSurfaceCollisionTree->leafs == (XSurfaceCollisionLeaf*)0xFFFFFFFF)
		{
			varXSurfaceCollisionTree->leafs = AllocLoad_XSurfaceCollisionLeaf();
			varXSurfaceCollisionLeaf = varXSurfaceCollisionTree->leafs;
			Load_XSurfaceCollisionLeafArray(true, (varXSurfaceCollisionTree->leafCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXSurfaceCollisionTree->leafs);
		}
	}

}

void Load_XSurfaceCollisionTreeArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionTree, sizeof(XSurfaceCollisionTree) * count);
	XSurfaceCollisionTree* pointer = varXSurfaceCollisionTree;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceCollisionTree = pointer;
		Load_XSurfaceCollisionTree(false);
		pointer++;
	}
}

void Load_XSurfaceCollisionTreePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionTree, sizeof(XSurfaceCollisionTree));
	if (*varXSurfaceCollisionTreePtr != nullptr)
	{
		if (*varXSurfaceCollisionTreePtr == (XSurfaceCollisionTree*)0xFFFFFFFF)
		{
			*varXSurfaceCollisionTreePtr = AllocLoad_XSurfaceCollisionTree();
			varXSurfaceCollisionTree = *varXSurfaceCollisionTreePtr;
			Load_XSurfaceCollisionTree(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXSurfaceCollisionTreePtr);
		}
	}
}

void Load_XSurfaceCollisionTreePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceCollisionTreePtr, sizeof(XSurfaceCollisionTree*) * count);
	XSurfaceCollisionTree** pointer = varXSurfaceCollisionTreePtr;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceCollisionTreePtr = pointer;
		Load_XSurfaceCollisionTreePtr(false);
		pointer++;
	}
}

void Load_XSurfacePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurface, sizeof(XSurface));
	if (*varXSurfacePtr != nullptr)
	{
		if (*varXSurfacePtr == (XSurface*)0xFFFFFFFF)
		{
			*varXSurfacePtr = AllocLoad_XSurface();
			varXSurface = *varXSurfacePtr;
			Load_XSurface(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXSurfacePtr);
		}
	}
}

void Load_XSurfacePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfacePtr, sizeof(XSurface*) * count);
	XSurface** pointer = varXSurfacePtr;
	for (int i = 0; i < count; i++)
	{
		varXSurfacePtr = pointer;
		Load_XSurfacePtr(false);
		pointer++;
	}
}

void Load_XSurfaceVertexInfo(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceVertexInfo, sizeof(XSurfaceVertexInfo));

	if (varXSurfaceVertexInfo->vertsBlend)
	{
		if (varXSurfaceVertexInfo->vertsBlend == (uint16*)0xFFFFFFFF)
		{
			varXSurfaceVertexInfo->vertsBlend = AllocLoad_uint16();
			varuint16 = varXSurfaceVertexInfo->vertsBlend;
			Load_uint16Array(true, (varXSurfaceVertexInfo->vertCount[0] + (varXSurfaceVertexInfo->vertCount[1] * 3) + (varXSurfaceVertexInfo->vertCount[2] * 5) + (varXSurfaceVertexInfo->vertCount[3] * 7)));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varXSurfaceVertexInfo->vertsBlend);
		}
	}

}

void Load_XSurfaceVertexInfoArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceVertexInfo, sizeof(XSurfaceVertexInfo) * count);
	XSurfaceVertexInfo* pointer = varXSurfaceVertexInfo;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceVertexInfo = pointer;
		Load_XSurfaceVertexInfo(false);
		pointer++;
	}
}

void Load_XSurfaceVertexInfoPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varXSurfaceVertexInfo, sizeof(XSurfaceVertexInfo));
	if (*varXSurfaceVertexInfoPtr != nullptr)
	{
		if (*varXSurfaceVertexInfoPtr == (XSurfaceVertexInfo*)0xFFFFFFFF)
		{
			*varXSurfaceVertexInfoPtr = AllocLoad_XSurfaceVertexInfo();
			varXSurfaceVertexInfo = *varXSurfaceVertexInfoPtr;
			Load_XSurfaceVertexInfo(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varXSurfaceVertexInfoPtr);
		}
	}
}

void Load_XSurfaceVertexInfoPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varXSurfaceVertexInfoPtr, sizeof(XSurfaceVertexInfo*) * count);
	XSurfaceVertexInfo** pointer = varXSurfaceVertexInfoPtr;
	for (int i = 0; i < count; i++)
	{
		varXSurfaceVertexInfoPtr = pointer;
		Load_XSurfaceVertexInfoPtr(false);
		pointer++;
	}
}

void Load__AILSOUNDINFO(bool atStreamStart)
{
	Load_Stream(atStreamStart, var_AILSOUNDINFO, sizeof(_AILSOUNDINFO));

}

void Load__AILSOUNDINFOArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, var_AILSOUNDINFO, sizeof(_AILSOUNDINFO) * count);
	_AILSOUNDINFO* pointer = var_AILSOUNDINFO;
	for (int i = 0; i < count; i++)
	{
		var_AILSOUNDINFO = pointer;
		Load__AILSOUNDINFO(false);
		pointer++;
	}
}

void Load__AILSOUNDINFOPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, var_AILSOUNDINFO, sizeof(_AILSOUNDINFO));
	if (*var_AILSOUNDINFOPtr != nullptr)
	{
		if (*var_AILSOUNDINFOPtr == (_AILSOUNDINFO*)0xFFFFFFFF)
		{
			*var_AILSOUNDINFOPtr = AllocLoad__AILSOUNDINFO();
			var_AILSOUNDINFO = *var_AILSOUNDINFOPtr;
			Load__AILSOUNDINFO(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)var_AILSOUNDINFOPtr);
		}
	}
}

void Load__AILSOUNDINFOPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, var_AILSOUNDINFOPtr, sizeof(_AILSOUNDINFO*) * count);
	_AILSOUNDINFO** pointer = var_AILSOUNDINFOPtr;
	for (int i = 0; i < count; i++)
	{
		var_AILSOUNDINFOPtr = pointer;
		Load__AILSOUNDINFOPtr(false);
		pointer++;
	}
}

void Load_bool(bool atStreamStart)
{
	Load_Stream(atStreamStart, varbool, sizeof(bool));

}

void Load_boolArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varbool, sizeof(bool) * count);
	bool* pointer = varbool;
	for (int i = 0; i < count; i++)
	{
		varbool = pointer;
		Load_bool(false);
		pointer++;
	}
}

void Load_boolPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varbool, sizeof(bool));
	if (*varboolPtr != nullptr)
	{
		*varboolPtr = AllocLoad_bool();
		varbool = *varboolPtr;
		Load_bool(true);
	}
}

void Load_boolPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varboolPtr, sizeof(bool*) * count);
	bool** pointer = varboolPtr;
	for (int i = 0; i < count; i++)
	{
		varboolPtr = pointer;
		Load_boolPtr(false);
		pointer++;
	}
}

void Load_cLeafBrushNodeChildren_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeChildren_t, sizeof(cLeafBrushNodeChildren_t));

}

void Load_cLeafBrushNodeChildren_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeChildren_t, sizeof(cLeafBrushNodeChildren_t) * count);
	cLeafBrushNodeChildren_t* pointer = varcLeafBrushNodeChildren_t;
	for (int i = 0; i < count; i++)
	{
		varcLeafBrushNodeChildren_t = pointer;
		Load_cLeafBrushNodeChildren_t(false);
		pointer++;
	}
}

void Load_cLeafBrushNodeChildren_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeChildren_t, sizeof(cLeafBrushNodeChildren_t));
	if (*varcLeafBrushNodeChildren_tPtr != nullptr)
	{
		if (*varcLeafBrushNodeChildren_tPtr == (cLeafBrushNodeChildren_t*)0xFFFFFFFF)
		{
			*varcLeafBrushNodeChildren_tPtr = AllocLoad_cLeafBrushNodeChildren_t();
			varcLeafBrushNodeChildren_t = *varcLeafBrushNodeChildren_tPtr;
			Load_cLeafBrushNodeChildren_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcLeafBrushNodeChildren_tPtr);
		}
	}
}

void Load_cLeafBrushNodeChildren_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeChildren_tPtr, sizeof(cLeafBrushNodeChildren_t*) * count);
	cLeafBrushNodeChildren_t** pointer = varcLeafBrushNodeChildren_tPtr;
	for (int i = 0; i < count; i++)
	{
		varcLeafBrushNodeChildren_tPtr = pointer;
		Load_cLeafBrushNodeChildren_tPtr(false);
		pointer++;
	}
}

void Load_cLeafBrushNodeData_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeData_t, sizeof(cLeafBrushNodeData_t));

}

void Load_cLeafBrushNodeData_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeData_t, sizeof(cLeafBrushNodeData_t) * count);
	cLeafBrushNodeData_t* pointer = varcLeafBrushNodeData_t;
	for (int i = 0; i < count; i++)
	{
		varcLeafBrushNodeData_t = pointer;
		Load_cLeafBrushNodeData_t(false);
		pointer++;
	}
}

void Load_cLeafBrushNodeData_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeData_t, sizeof(cLeafBrushNodeData_t));
	if (*varcLeafBrushNodeData_tPtr != nullptr)
	{
		if (*varcLeafBrushNodeData_tPtr == (cLeafBrushNodeData_t*)0xFFFFFFFF)
		{
			*varcLeafBrushNodeData_tPtr = AllocLoad_cLeafBrushNodeData_t();
			varcLeafBrushNodeData_t = *varcLeafBrushNodeData_tPtr;
			Load_cLeafBrushNodeData_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcLeafBrushNodeData_tPtr);
		}
	}
}

void Load_cLeafBrushNodeData_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeData_tPtr, sizeof(cLeafBrushNodeData_t*) * count);
	cLeafBrushNodeData_t** pointer = varcLeafBrushNodeData_tPtr;
	for (int i = 0; i < count; i++)
	{
		varcLeafBrushNodeData_tPtr = pointer;
		Load_cLeafBrushNodeData_tPtr(false);
		pointer++;
	}
}

void Load_cLeafBrushNodeLeaf_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeLeaf_t, sizeof(cLeafBrushNodeLeaf_t));

	if (varcLeafBrushNodeLeaf_t->brushes)
	{
		varuint16Ptr = &varcLeafBrushNodeLeaf_t->brushes;
		Load_uint16Ptr(false);
	}

}

void Load_cLeafBrushNodeLeaf_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeLeaf_t, sizeof(cLeafBrushNodeLeaf_t) * count);
	cLeafBrushNodeLeaf_t* pointer = varcLeafBrushNodeLeaf_t;
	for (int i = 0; i < count; i++)
	{
		varcLeafBrushNodeLeaf_t = pointer;
		Load_cLeafBrushNodeLeaf_t(false);
		pointer++;
	}
}

void Load_cLeafBrushNodeLeaf_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeLeaf_t, sizeof(cLeafBrushNodeLeaf_t));
	if (*varcLeafBrushNodeLeaf_tPtr != nullptr)
	{
		*varcLeafBrushNodeLeaf_tPtr = AllocLoad_cLeafBrushNodeLeaf_t();
		varcLeafBrushNodeLeaf_t = *varcLeafBrushNodeLeaf_tPtr;
		Load_cLeafBrushNodeLeaf_t(true);
	}
}

void Load_cLeafBrushNodeLeaf_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeafBrushNodeLeaf_tPtr, sizeof(cLeafBrushNodeLeaf_t*) * count);
	cLeafBrushNodeLeaf_t** pointer = varcLeafBrushNodeLeaf_tPtr;
	for (int i = 0; i < count; i++)
	{
		varcLeafBrushNodeLeaf_tPtr = pointer;
		Load_cLeafBrushNodeLeaf_tPtr(false);
		pointer++;
	}
}

void Load_cLeafBrushNode_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeafBrushNode_s, sizeof(cLeafBrushNode_s));

	varcLeafBrushNodeData_t = &varcLeafBrushNode_s->data;
	Load_cLeafBrushNodeData_t(false);

}

void Load_cLeafBrushNode_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeafBrushNode_s, sizeof(cLeafBrushNode_s) * count);
	cLeafBrushNode_s* pointer = varcLeafBrushNode_s;
	for (int i = 0; i < count; i++)
	{
		varcLeafBrushNode_s = pointer;
		Load_cLeafBrushNode_s(false);
		pointer++;
	}
}

void Load_cLeafBrushNode_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeafBrushNode_s, sizeof(cLeafBrushNode_s));
	if (*varcLeafBrushNode_sPtr != nullptr)
	{
		if (*varcLeafBrushNode_sPtr == (cLeafBrushNode_s*)0xFFFFFFFF)
		{
			*varcLeafBrushNode_sPtr = AllocLoad_cLeafBrushNode_s();
			varcLeafBrushNode_s = *varcLeafBrushNode_sPtr;
			Load_cLeafBrushNode_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcLeafBrushNode_sPtr);
		}
	}
}

void Load_cLeafBrushNode_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeafBrushNode_sPtr, sizeof(cLeafBrushNode_s*) * count);
	cLeafBrushNode_s** pointer = varcLeafBrushNode_sPtr;
	for (int i = 0; i < count; i++)
	{
		varcLeafBrushNode_sPtr = pointer;
		Load_cLeafBrushNode_sPtr(false);
		pointer++;
	}
}

void Load_cLeaf_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeaf_t, sizeof(cLeaf_t));

	varBounds = &varcLeaf_t->bounds;
	Load_Bounds(false);

}

void Load_cLeaf_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeaf_t, sizeof(cLeaf_t) * count);
	cLeaf_t* pointer = varcLeaf_t;
	for (int i = 0; i < count; i++)
	{
		varcLeaf_t = pointer;
		Load_cLeaf_t(false);
		pointer++;
	}
}

void Load_cLeaf_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcLeaf_t, sizeof(cLeaf_t));
	if (*varcLeaf_tPtr != nullptr)
	{
		if (*varcLeaf_tPtr == (cLeaf_t*)0xFFFFFFFF)
		{
			*varcLeaf_tPtr = AllocLoad_cLeaf_t();
			varcLeaf_t = *varcLeaf_tPtr;
			Load_cLeaf_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcLeaf_tPtr);
		}
	}
}

void Load_cLeaf_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcLeaf_tPtr, sizeof(cLeaf_t*) * count);
	cLeaf_t** pointer = varcLeaf_tPtr;
	for (int i = 0; i < count; i++)
	{
		varcLeaf_tPtr = pointer;
		Load_cLeaf_tPtr(false);
		pointer++;
	}
}

void Load_cNode_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcNode_t, sizeof(cNode_t));

	if (varcNode_t->plane)
	{
		varcplane_sPtr = &varcNode_t->plane;
		Load_cplane_sPtr(false);
	}

}

void Load_cNode_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcNode_t, sizeof(cNode_t) * count);
	cNode_t* pointer = varcNode_t;
	for (int i = 0; i < count; i++)
	{
		varcNode_t = pointer;
		Load_cNode_t(false);
		pointer++;
	}
}

void Load_cNode_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcNode_t, sizeof(cNode_t));
	if (*varcNode_tPtr != nullptr)
	{
		if (*varcNode_tPtr == (cNode_t*)0xFFFFFFFF)
		{
			*varcNode_tPtr = AllocLoad_cNode_t();
			varcNode_t = *varcNode_tPtr;
			Load_cNode_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcNode_tPtr);
		}
	}
}

void Load_cNode_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcNode_tPtr, sizeof(cNode_t*) * count);
	cNode_t** pointer = varcNode_tPtr;
	for (int i = 0; i < count; i++)
	{
		varcNode_tPtr = pointer;
		Load_cNode_tPtr(false);
		pointer++;
	}
}

void Load_cStaticModel_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcStaticModel_s, sizeof(cStaticModel_s));

	varXModelPtr = &varcStaticModel_s->xmodel;
	Load_XModelPtr(false);

	varBounds = &varcStaticModel_s->absBounds;
	Load_Bounds(false);

}

void Load_cStaticModel_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcStaticModel_s, sizeof(cStaticModel_s) * count);
	cStaticModel_s* pointer = varcStaticModel_s;
	for (int i = 0; i < count; i++)
	{
		varcStaticModel_s = pointer;
		Load_cStaticModel_s(false);
		pointer++;
	}
}

void Load_cStaticModel_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcStaticModel_s, sizeof(cStaticModel_s));
	if (*varcStaticModel_sPtr != nullptr)
	{
		if (*varcStaticModel_sPtr == (cStaticModel_s*)0xFFFFFFFF)
		{
			*varcStaticModel_sPtr = AllocLoad_cStaticModel_s();
			varcStaticModel_s = *varcStaticModel_sPtr;
			Load_cStaticModel_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcStaticModel_sPtr);
		}
	}
}

void Load_cStaticModel_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcStaticModel_sPtr, sizeof(cStaticModel_s*) * count);
	cStaticModel_s** pointer = varcStaticModel_sPtr;
	for (int i = 0; i < count; i++)
	{
		varcStaticModel_sPtr = pointer;
		Load_cStaticModel_sPtr(false);
		pointer++;
	}
}

void Load_cbrush_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcbrush_t, sizeof(cbrush_t));

	if (varcbrush_t->sides)
	{
		if (varcbrush_t->sides == (cbrushside_t*)0xFFFFFFFF)
		{
			varcbrush_t->sides = AllocLoad_cbrushside_t();
			varcbrushside_t = varcbrush_t->sides;
			Load_cbrushside_tArray(true, (varcbrush_t->numsides));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varcbrush_t->sides);
		}
	}

	if (varcbrush_t->baseAdjacentSide)
	{
		varcharPtr = &varcbrush_t->baseAdjacentSide;
		Load_charPtr(false);
	}

}

void Load_cbrush_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcbrush_t, sizeof(cbrush_t) * count);
	cbrush_t* pointer = varcbrush_t;
	for (int i = 0; i < count; i++)
	{
		varcbrush_t = pointer;
		Load_cbrush_t(false);
		pointer++;
	}
}

void Load_cbrush_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcbrush_t, sizeof(cbrush_t));
	if (*varcbrush_tPtr != nullptr)
	{
		if (*varcbrush_tPtr == (cbrush_t*)0xFFFFFFFF)
		{
			*varcbrush_tPtr = AllocLoad_cbrush_t();
			varcbrush_t = *varcbrush_tPtr;
			Load_cbrush_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcbrush_tPtr);
		}
	}
}

void Load_cbrush_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcbrush_tPtr, sizeof(cbrush_t*) * count);
	cbrush_t** pointer = varcbrush_tPtr;
	for (int i = 0; i < count; i++)
	{
		varcbrush_tPtr = pointer;
		Load_cbrush_tPtr(false);
		pointer++;
	}
}

void Load_cbrushside_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcbrushside_t, sizeof(cbrushside_t));

	if (varcbrushside_t->plane)
	{
		varcplane_sPtr = &varcbrushside_t->plane;
		Load_cplane_sPtr(false);
	}

}

void Load_cbrushside_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcbrushside_t, sizeof(cbrushside_t) * count);
	cbrushside_t* pointer = varcbrushside_t;
	for (int i = 0; i < count; i++)
	{
		varcbrushside_t = pointer;
		Load_cbrushside_t(false);
		pointer++;
	}
}

void Load_cbrushside_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcbrushside_t, sizeof(cbrushside_t));
	if (*varcbrushside_tPtr != nullptr)
	{
		if (*varcbrushside_tPtr == (cbrushside_t*)0xFFFFFFFF)
		{
			*varcbrushside_tPtr = AllocLoad_cbrushside_t();
			varcbrushside_t = *varcbrushside_tPtr;
			Load_cbrushside_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcbrushside_tPtr);
		}
	}
}

void Load_cbrushside_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcbrushside_tPtr, sizeof(cbrushside_t*) * count);
	cbrushside_t** pointer = varcbrushside_tPtr;
	for (int i = 0; i < count; i++)
	{
		varcbrushside_tPtr = pointer;
		Load_cbrushside_tPtr(false);
		pointer++;
	}
}

void Load_char(bool atStreamStart)
{
	Load_Stream(atStreamStart, varchar, sizeof(char));

}

void Load_char16(bool atStreamStart)
{
	Load_Stream(atStreamStart, varchar16, sizeof(char16));

}

void Load_char16Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varchar16, sizeof(char16) * count);
	char16* pointer = varchar16;
	for (int i = 0; i < count; i++)
	{
		varchar16 = pointer;
		Load_char16(false);
		pointer++;
	}
}

void Load_char16Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varchar16, sizeof(char16));
	if (*varchar16Ptr != nullptr)
	{
		*varchar16Ptr = AllocLoad_char16();
		varchar16 = *varchar16Ptr;
		Load_char16(true);
	}
}

void Load_char16PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varchar16Ptr, sizeof(char16*) * count);
	char16** pointer = varchar16Ptr;
	for (int i = 0; i < count; i++)
	{
		varchar16Ptr = pointer;
		Load_char16Ptr(false);
		pointer++;
	}
}

void Load_charArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varchar, sizeof(char) * count);
	char* pointer = varchar;
	for (int i = 0; i < count; i++)
	{
		varchar = pointer;
		Load_char(false);
		pointer++;
	}
}

void Load_charPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varchar, sizeof(char));
	if (*varcharPtr != nullptr)
	{
		*varcharPtr = AllocLoad_char();
		varchar = *varcharPtr;
		Load_char(true);
	}
}

void Load_charPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcharPtr, sizeof(char*) * count);
	char** pointer = varcharPtr;
	for (int i = 0; i < count; i++)
	{
		varcharPtr = pointer;
		Load_charPtr(false);
		pointer++;
	}
}

void Load_clipMap_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varclipMap_t, sizeof(clipMap_t));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varclipMap_t->name;
	Load_XString(false);

	if (varclipMap_t->planes)
	{
		if (varclipMap_t->planes == (cplane_s*)0xFFFFFFFF)
		{
			varclipMap_t->planes = AllocLoad_cplane_s();
			varcplane_s = varclipMap_t->planes;
			Load_cplane_sArray(true, (varclipMap_t->planeCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->planes);
		}
	}

	if (varclipMap_t->staticModelList)
	{
		if (varclipMap_t->staticModelList == (cStaticModel_s*)0xFFFFFFFF)
		{
			varclipMap_t->staticModelList = AllocLoad_cStaticModel_s();
			varcStaticModel_s = varclipMap_t->staticModelList;
			Load_cStaticModel_sArray(true, (varclipMap_t->numStaticModels));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->staticModelList);
		}
	}

	if (varclipMap_t->materials)
	{
		if (varclipMap_t->materials == (ClipMaterial*)0xFFFFFFFF)
		{
			varclipMap_t->materials = AllocLoad_ClipMaterial();
			varClipMaterial = varclipMap_t->materials;
			Load_ClipMaterialArray(true, (varclipMap_t->numMaterials));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->materials);
		}
	}

	if (varclipMap_t->brushsides)
	{
		if (varclipMap_t->brushsides == (cbrushside_t*)0xFFFFFFFF)
		{
			varclipMap_t->brushsides = AllocLoad_cbrushside_t();
			varcbrushside_t = varclipMap_t->brushsides;
			Load_cbrushside_tArray(true, (varclipMap_t->numBrushSides));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->brushsides);
		}
	}

	if (varclipMap_t->brushEdges)
	{
		if (varclipMap_t->brushEdges == (char*)0xFFFFFFFF)
		{
			varclipMap_t->brushEdges = AllocLoad_char();
			varchar = varclipMap_t->brushEdges;
			Load_charArray(true, (varclipMap_t->numBrushEdges));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->brushEdges);
		}
	}

	if (varclipMap_t->nodes)
	{
		if (varclipMap_t->nodes == (cNode_t*)0xFFFFFFFF)
		{
			varclipMap_t->nodes = AllocLoad_cNode_t();
			varcNode_t = varclipMap_t->nodes;
			Load_cNode_tArray(true, (varclipMap_t->numNodes));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->nodes);
		}
	}

	if (varclipMap_t->leafs)
	{
		if (varclipMap_t->leafs == (cLeaf_t*)0xFFFFFFFF)
		{
			varclipMap_t->leafs = AllocLoad_cLeaf_t();
			varcLeaf_t = varclipMap_t->leafs;
			Load_cLeaf_tArray(true, (varclipMap_t->numLeafs));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->leafs);
		}
	}

	if (varclipMap_t->leafbrushNodes)
	{
		if (varclipMap_t->leafbrushNodes == (cLeafBrushNode_s*)0xFFFFFFFF)
		{
			varclipMap_t->leafbrushNodes = AllocLoad_cLeafBrushNode_s();
			varcLeafBrushNode_s = varclipMap_t->leafbrushNodes;
			Load_cLeafBrushNode_sArray(true, (varclipMap_t->leafbrushNodesCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->leafbrushNodes);
		}
	}

	if (varclipMap_t->leafbrushes)
	{
		if (varclipMap_t->leafbrushes == (uint16*)0xFFFFFFFF)
		{
			varclipMap_t->leafbrushes = AllocLoad_uint16();
			varuint16 = varclipMap_t->leafbrushes;
			Load_uint16Array(true, (varclipMap_t->numLeafBrushes));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->leafbrushes);
		}
	}

	if (varclipMap_t->verts)
	{
		if (varclipMap_t->verts == (vec3_t*)0xFFFFFFFF)
		{
			varclipMap_t->verts = AllocLoad_vec3_t();
			varvec3_t = varclipMap_t->verts;
			Load_vec3_tArray(true, (varclipMap_t->vertCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->verts);
		}
	}

	if (varclipMap_t->triIndices)
	{
		varuint16Ptr = &varclipMap_t->triIndices;
		Load_uint16Ptr(false);
	}

	if (varclipMap_t->triEdgeIsWalkable)
	{
		varcharPtr = &varclipMap_t->triEdgeIsWalkable;
		Load_charPtr(false);
	}

	if (varclipMap_t->borders)
	{
		if (varclipMap_t->borders == (CollisionBorder*)0xFFFFFFFF)
		{
			varclipMap_t->borders = AllocLoad_CollisionBorder();
			varCollisionBorder = varclipMap_t->borders;
			Load_CollisionBorderArray(true, (varclipMap_t->borderCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->borders);
		}
	}

	if (varclipMap_t->partitions)
	{
		if (varclipMap_t->partitions == (CollisionPartition*)0xFFFFFFFF)
		{
			varclipMap_t->partitions = AllocLoad_CollisionPartition();
			varCollisionPartition = varclipMap_t->partitions;
			Load_CollisionPartitionArray(true, (varclipMap_t->partitionCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->partitions);
		}
	}

	if (varclipMap_t->aabbTrees)
	{
		if (varclipMap_t->aabbTrees == (CollisionAabbTree*)0xFFFFFFFF)
		{
			varclipMap_t->aabbTrees = AllocLoad_CollisionAabbTree();
			varCollisionAabbTree = varclipMap_t->aabbTrees;
			Load_CollisionAabbTreeArray(true, (varclipMap_t->aabbTreeCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->aabbTrees);
		}
	}

	if (varclipMap_t->cmodels)
	{
		if (varclipMap_t->cmodels == (cmodel_t*)0xFFFFFFFF)
		{
			varclipMap_t->cmodels = AllocLoad_cmodel_t();
			varcmodel_t = varclipMap_t->cmodels;
			Load_cmodel_tArray(true, (varclipMap_t->numSubModels));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->cmodels);
		}
	}

	if (varclipMap_t->brushes)
	{
		if (varclipMap_t->brushes == (cbrush_t*)0xFFFFFFFF)
		{
			varclipMap_t->brushes = AllocLoad_cbrush_t();
			varcbrush_t = varclipMap_t->brushes;
			Load_cbrush_tArray(true, (varclipMap_t->numBrushes));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->brushes);
		}
	}

	if (varclipMap_t->brushBounds)
	{
		varBoundsPtr = &varclipMap_t->brushBounds;
		Load_BoundsPtr(false);
	}

	if (varclipMap_t->smodelNodes)
	{
		if (varclipMap_t->smodelNodes == (SModelAabbNode*)0xFFFFFFFF)
		{
			varclipMap_t->smodelNodes = AllocLoad_SModelAabbNode();
			varSModelAabbNode = varclipMap_t->smodelNodes;
			Load_SModelAabbNodeArray(true, (varclipMap_t->smodelNodeCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varclipMap_t->smodelNodes);
		}
	}

	varMapEntsPtr = &varclipMap_t->mapEnts;
	Load_MapEntsPtr(false);

	if (varclipMap_t->dynEntDefList)
	{
		varDynEntityDefPtr = varclipMap_t->dynEntDefList;
		Load_DynEntityDefPtrArray(false, 2);
	}

	if (varclipMap_t->dynEntPoseList)
	{
		varDynEntityPosePtr = varclipMap_t->dynEntPoseList;
		Load_DynEntityPosePtrArray(false, 2);
	}

	if (varclipMap_t->dynEntClientList)
	{
		varDynEntityClientPtr = varclipMap_t->dynEntClientList;
		Load_DynEntityClientPtrArray(false, 2);
	}

	if (varclipMap_t->dynEntCollList)
	{
		varDynEntityCollPtr = varclipMap_t->dynEntCollList;
		Load_DynEntityCollPtrArray(false, 2);
	}

	DB_PopStreamPos();
}

void Load_clipMap_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varclipMap_t, sizeof(clipMap_t) * count);
	clipMap_t* pointer = varclipMap_t;
	for (int i = 0; i < count; i++)
	{
		varclipMap_t = pointer;
		Load_clipMap_t(false);
		pointer++;
	}
}

void Load_clipMap_tAsset(clipMap_t** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_CLIPMAP_MP, (void**)varclipMap_tPtr);
}

void Load_clipMap_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varclipMap_t, sizeof(clipMap_t*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	clipMap_t* pointer = *varclipMap_tPtr;
	if (*varclipMap_tPtr != nullptr)
	{
		if (*varclipMap_tPtr == (clipMap_t*)0xFFFFFFFF || *varclipMap_tPtr == (clipMap_t*)0xFFFFFFFE)
		{
			*varclipMap_tPtr = AllocLoad_clipMap_t();
			varclipMap_t = *varclipMap_tPtr;
			clipMap_t** insertedPointer = nullptr;
			if (pointer == (clipMap_t*)0xFFFFFFFE)
			{
				insertedPointer = (clipMap_t**)DB_InsertPointer();
			}
			Load_clipMap_t(true);
			Load_clipMap_tAsset(varclipMap_tPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varclipMap_tPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varclipMap_tPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_clipMap_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varclipMap_tPtr, sizeof(clipMap_t*) * count);
	clipMap_t** pointer = varclipMap_tPtr;
	for (int i = 0; i < count; i++)
	{
		varclipMap_tPtr = pointer;
		Load_clipMap_tPtr(false);
		pointer++;
	}
}

void Load_cmodel_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcmodel_t, sizeof(cmodel_t));

	varBounds = &varcmodel_t->bounds;
	Load_Bounds(false);

	varcLeaf_t = &varcmodel_t->leaf;
	Load_cLeaf_t(false);

}

void Load_cmodel_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcmodel_t, sizeof(cmodel_t) * count);
	cmodel_t* pointer = varcmodel_t;
	for (int i = 0; i < count; i++)
	{
		varcmodel_t = pointer;
		Load_cmodel_t(false);
		pointer++;
	}
}

void Load_cmodel_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcmodel_t, sizeof(cmodel_t));
	if (*varcmodel_tPtr != nullptr)
	{
		if (*varcmodel_tPtr == (cmodel_t*)0xFFFFFFFF)
		{
			*varcmodel_tPtr = AllocLoad_cmodel_t();
			varcmodel_t = *varcmodel_tPtr;
			Load_cmodel_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcmodel_tPtr);
		}
	}
}

void Load_cmodel_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcmodel_tPtr, sizeof(cmodel_t*) * count);
	cmodel_t** pointer = varcmodel_tPtr;
	for (int i = 0; i < count; i++)
	{
		varcmodel_tPtr = pointer;
		Load_cmodel_tPtr(false);
		pointer++;
	}
}

void Load_columnInfo_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcolumnInfo_s, sizeof(columnInfo_s));

}

void Load_columnInfo_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcolumnInfo_s, sizeof(columnInfo_s) * count);
	columnInfo_s* pointer = varcolumnInfo_s;
	for (int i = 0; i < count; i++)
	{
		varcolumnInfo_s = pointer;
		Load_columnInfo_s(false);
		pointer++;
	}
}

void Load_columnInfo_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcolumnInfo_s, sizeof(columnInfo_s));
	if (*varcolumnInfo_sPtr != nullptr)
	{
		if (*varcolumnInfo_sPtr == (columnInfo_s*)0xFFFFFFFF)
		{
			*varcolumnInfo_sPtr = AllocLoad_columnInfo_s();
			varcolumnInfo_s = *varcolumnInfo_sPtr;
			Load_columnInfo_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcolumnInfo_sPtr);
		}
	}
}

void Load_columnInfo_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcolumnInfo_sPtr, sizeof(columnInfo_s*) * count);
	columnInfo_s** pointer = varcolumnInfo_sPtr;
	for (int i = 0; i < count; i++)
	{
		varcolumnInfo_sPtr = pointer;
		Load_columnInfo_sPtr(false);
		pointer++;
	}
}

void Load_complex_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcomplex_s, sizeof(complex_s));

}

void Load_complex_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcomplex_s, sizeof(complex_s) * count);
	complex_s* pointer = varcomplex_s;
	for (int i = 0; i < count; i++)
	{
		varcomplex_s = pointer;
		Load_complex_s(false);
		pointer++;
	}
}

void Load_complex_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcomplex_s, sizeof(complex_s));
	if (*varcomplex_sPtr != nullptr)
	{
		if (*varcomplex_sPtr == (complex_s*)0xFFFFFFFF)
		{
			*varcomplex_sPtr = AllocLoad_complex_s();
			varcomplex_s = *varcomplex_sPtr;
			Load_complex_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcomplex_sPtr);
		}
	}
}

void Load_complex_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcomplex_sPtr, sizeof(complex_s*) * count);
	complex_s** pointer = varcomplex_sPtr;
	for (int i = 0; i < count; i++)
	{
		varcomplex_sPtr = pointer;
		Load_complex_sPtr(false);
		pointer++;
	}
}

void Load_cplane_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcplane_s, sizeof(cplane_s));

}

void Load_cplane_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcplane_s, sizeof(cplane_s) * count);
	cplane_s* pointer = varcplane_s;
	for (int i = 0; i < count; i++)
	{
		varcplane_s = pointer;
		Load_cplane_s(false);
		pointer++;
	}
}

void Load_cplane_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varcplane_s, sizeof(cplane_s));
	if (*varcplane_sPtr != nullptr)
	{
		if (*varcplane_sPtr == (cplane_s*)0xFFFFFFFF)
		{
			*varcplane_sPtr = AllocLoad_cplane_s();
			varcplane_s = *varcplane_sPtr;
			Load_cplane_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varcplane_sPtr);
		}
	}
}

void Load_cplane_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varcplane_sPtr, sizeof(cplane_s*) * count);
	cplane_s** pointer = varcplane_sPtr;
	for (int i = 0; i < count; i++)
	{
		varcplane_sPtr = pointer;
		Load_cplane_sPtr(false);
		pointer++;
	}
}

void Load_double(bool atStreamStart)
{
	Load_Stream(atStreamStart, vardouble, sizeof(double));

}

void Load_doubleArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, vardouble, sizeof(double) * count);
	double* pointer = vardouble;
	for (int i = 0; i < count; i++)
	{
		vardouble = pointer;
		Load_double(false);
		pointer++;
	}
}

void Load_doublePtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, vardouble, sizeof(double));
	if (*vardoublePtr != nullptr)
	{
		*vardoublePtr = AllocLoad_double();
		vardouble = *vardoublePtr;
		Load_double(true);
	}
}

void Load_doublePtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, vardoublePtr, sizeof(double*) * count);
	double** pointer = vardoublePtr;
	for (int i = 0; i < count; i++)
	{
		vardoublePtr = pointer;
		Load_doublePtr(false);
		pointer++;
	}
}

void Load_editFieldDef_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, vareditFieldDef_s, sizeof(editFieldDef_s));

}

void Load_editFieldDef_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, vareditFieldDef_s, sizeof(editFieldDef_s) * count);
	editFieldDef_s* pointer = vareditFieldDef_s;
	for (int i = 0; i < count; i++)
	{
		vareditFieldDef_s = pointer;
		Load_editFieldDef_s(false);
		pointer++;
	}
}

void Load_editFieldDef_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, vareditFieldDef_s, sizeof(editFieldDef_s));
	if (*vareditFieldDef_sPtr != nullptr)
	{
		if (*vareditFieldDef_sPtr == (editFieldDef_s*)0xFFFFFFFF)
		{
			*vareditFieldDef_sPtr = AllocLoad_editFieldDef_s();
			vareditFieldDef_s = *vareditFieldDef_sPtr;
			Load_editFieldDef_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)vareditFieldDef_sPtr);
		}
	}
}

void Load_editFieldDef_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, vareditFieldDef_sPtr, sizeof(editFieldDef_s*) * count);
	editFieldDef_s** pointer = vareditFieldDef_sPtr;
	for (int i = 0; i < count; i++)
	{
		vareditFieldDef_sPtr = pointer;
		Load_editFieldDef_sPtr(false);
		pointer++;
	}
}

void Load_entryInternalData(bool atStreamStart)
{
	Load_Stream(atStreamStart, varentryInternalData, sizeof(entryInternalData));

	switch (varexpressionEntry->type)
	{
	case 0:
		varint32 = &varentryInternalData->op;
		Load_int32(atStreamStart);
		break;
	case 1:
		varOperand = &varentryInternalData->operand;
		Load_Operand(atStreamStart);
		break;
	}
}

void Load_entryInternalDataArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varentryInternalData, sizeof(entryInternalData) * count);
	entryInternalData* pointer = varentryInternalData;
	for (int i = 0; i < count; i++)
	{
		varentryInternalData = pointer;
		Load_entryInternalData(false);
		pointer++;
	}
}

void Load_entryInternalDataPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varentryInternalData, sizeof(entryInternalData));
	if (*varentryInternalDataPtr != nullptr)
	{
		if (*varentryInternalDataPtr == (entryInternalData*)0xFFFFFFFF)
		{
			*varentryInternalDataPtr = AllocLoad_entryInternalData();
			varentryInternalData = *varentryInternalDataPtr;
			Load_entryInternalData(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varentryInternalDataPtr);
		}
	}
}

void Load_entryInternalDataPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varentryInternalDataPtr, sizeof(entryInternalData*) * count);
	entryInternalData** pointer = varentryInternalDataPtr;
	for (int i = 0; i < count; i++)
	{
		varentryInternalDataPtr = pointer;
		Load_entryInternalDataPtr(false);
		pointer++;
	}
}

void Load_expressionEntry(bool atStreamStart)
{
	Load_Stream(atStreamStart, varexpressionEntry, sizeof(expressionEntry));

	varentryInternalData = &varexpressionEntry->data;
	Load_entryInternalData(false);

}

void Load_expressionEntryArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varexpressionEntry, sizeof(expressionEntry) * count);
	expressionEntry* pointer = varexpressionEntry;
	for (int i = 0; i < count; i++)
	{
		varexpressionEntry = pointer;
		Load_expressionEntry(false);
		pointer++;
	}
}

void Load_expressionEntryPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varexpressionEntry, sizeof(expressionEntry));
	if (*varexpressionEntryPtr != nullptr)
	{
		if (*varexpressionEntryPtr == (expressionEntry*)0xFFFFFFFF)
		{
			*varexpressionEntryPtr = AllocLoad_expressionEntry();
			varexpressionEntry = *varexpressionEntryPtr;
			Load_expressionEntry(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varexpressionEntryPtr);
		}
	}
}

void Load_expressionEntryPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varexpressionEntryPtr, sizeof(expressionEntry*) * count);
	expressionEntry** pointer = varexpressionEntryPtr;
	for (int i = 0; i < count; i++)
	{
		varexpressionEntryPtr = pointer;
		Load_expressionEntryPtr(false);
		pointer++;
	}
}

void Load_float(bool atStreamStart)
{
	Load_Stream(atStreamStart, varfloat, sizeof(float));

}

void Load_float16(bool atStreamStart)
{
	Load_Stream(atStreamStart, varfloat16, sizeof(float16));

}

void Load_float16Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varfloat16, sizeof(float16) * count);
	float16* pointer = varfloat16;
	for (int i = 0; i < count; i++)
	{
		varfloat16 = pointer;
		Load_float16(false);
		pointer++;
	}
}

void Load_float16Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varfloat16, sizeof(float16));
	if (*varfloat16Ptr != nullptr)
	{
		*varfloat16Ptr = AllocLoad_float16();
		varfloat16 = *varfloat16Ptr;
		Load_float16(true);
	}
}

void Load_float16PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varfloat16Ptr, sizeof(float16*) * count);
	float16** pointer = varfloat16Ptr;
	for (int i = 0; i < count; i++)
	{
		varfloat16Ptr = pointer;
		Load_float16Ptr(false);
		pointer++;
	}
}

void Load_floatArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varfloat, sizeof(float) * count);
	float* pointer = varfloat;
	for (int i = 0; i < count; i++)
	{
		varfloat = pointer;
		Load_float(false);
		pointer++;
	}
}

void Load_floatPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varfloat, sizeof(float));
	if (*varfloatPtr != nullptr)
	{
		*varfloatPtr = AllocLoad_float();
		varfloat = *varfloatPtr;
		Load_float(true);
	}
}

void Load_floatPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varfloatPtr, sizeof(float*) * count);
	float** pointer = varfloatPtr;
	for (int i = 0; i < count; i++)
	{
		varfloatPtr = pointer;
		Load_floatPtr(false);
		pointer++;
	}
}

void Load_int16(bool atStreamStart)
{
	Load_Stream(atStreamStart, varint16, sizeof(int16));

}

void Load_int16Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varint16, sizeof(int16) * count);
	int16* pointer = varint16;
	for (int i = 0; i < count; i++)
	{
		varint16 = pointer;
		Load_int16(false);
		pointer++;
	}
}

void Load_int16Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varint16, sizeof(int16));
	if (*varint16Ptr != nullptr)
	{
		*varint16Ptr = AllocLoad_int16();
		varint16 = *varint16Ptr;
		Load_int16(true);
	}
}

void Load_int16PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varint16Ptr, sizeof(int16*) * count);
	int16** pointer = varint16Ptr;
	for (int i = 0; i < count; i++)
	{
		varint16Ptr = pointer;
		Load_int16Ptr(false);
		pointer++;
	}
}

void Load_int32(bool atStreamStart)
{
	Load_Stream(atStreamStart, varint32, sizeof(int32));

}

void Load_int32Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varint32, sizeof(int32) * count);
	int32* pointer = varint32;
	for (int i = 0; i < count; i++)
	{
		varint32 = pointer;
		Load_int32(false);
		pointer++;
	}
}

void Load_int32Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varint32, sizeof(int32));
	if (*varint32Ptr != nullptr)
	{
		*varint32Ptr = AllocLoad_int32();
		varint32 = *varint32Ptr;
		Load_int32(true);
	}
}

void Load_int32PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varint32Ptr, sizeof(int32*) * count);
	int32** pointer = varint32Ptr;
	for (int i = 0; i < count; i++)
	{
		varint32Ptr = pointer;
		Load_int32Ptr(false);
		pointer++;
	}
}

void Load_int64(bool atStreamStart)
{
	Load_Stream(atStreamStart, varint64, sizeof(int64));

}

void Load_int64Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varint64, sizeof(int64) * count);
	int64* pointer = varint64;
	for (int i = 0; i < count; i++)
	{
		varint64 = pointer;
		Load_int64(false);
		pointer++;
	}
}

void Load_int64Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varint64, sizeof(int64));
	if (*varint64Ptr != nullptr)
	{
		*varint64Ptr = AllocLoad_int64();
		varint64 = *varint64Ptr;
		Load_int64(true);
	}
}

void Load_int64PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varint64Ptr, sizeof(int64*) * count);
	int64** pointer = varint64Ptr;
	for (int i = 0; i < count; i++)
	{
		varint64Ptr = pointer;
		Load_int64Ptr(false);
		pointer++;
	}
}

void Load_int8(bool atStreamStart)
{
	Load_Stream(atStreamStart, varint8, sizeof(int8));

}

void Load_int8Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varint8, sizeof(int8) * count);
	int8* pointer = varint8;
	for (int i = 0; i < count; i++)
	{
		varint8 = pointer;
		Load_int8(false);
		pointer++;
	}
}

void Load_int8Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varint8, sizeof(int8));
	if (*varint8Ptr != nullptr)
	{
		*varint8Ptr = AllocLoad_int8();
		varint8 = *varint8Ptr;
		Load_int8(true);
	}
}

void Load_int8PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varint8Ptr, sizeof(int8*) * count);
	int8** pointer = varint8Ptr;
	for (int i = 0; i < count; i++)
	{
		varint8Ptr = pointer;
		Load_int8Ptr(false);
		pointer++;
	}
}

void Load_itemDefData_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varitemDefData_t, sizeof(itemDefData_t));

	switch (varitemDef_s->type)
	{
	case 6:
		varlistBoxDef_sPtr = &varitemDefData_t->listBox;
		Load_listBoxDef_sPtr(false);
		break;
	case 0:
	case 4:
	case 9:
	case 10:
	case 11:
	case 14:
	case 16:
	case 17:
	case 18:
	case 22:
	case 23:
		vareditFieldDef_sPtr = &varitemDefData_t->editField;
		Load_editFieldDef_sPtr(false);
		break;
	case 12:
		varmultiDef_sPtr = &varitemDefData_t->multi;
		Load_multiDef_sPtr(false);
		break;
	case 13:
		varXString = &varitemDefData_t->enumDvarName;
		Load_XString(atStreamStart);
		break;
	case 20:
		varnewsTickerDef_sPtr = &varitemDefData_t->ticker;
		Load_newsTickerDef_sPtr(false);
		break;
	case 21:
		vartextScrollDef_sPtr = &varitemDefData_t->scroll;
		Load_textScrollDef_sPtr(false);
		break;
	}
}

void Load_itemDefData_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varitemDefData_t, sizeof(itemDefData_t) * count);
	itemDefData_t* pointer = varitemDefData_t;
	for (int i = 0; i < count; i++)
	{
		varitemDefData_t = pointer;
		Load_itemDefData_t(false);
		pointer++;
	}
}

void Load_itemDefData_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varitemDefData_t, sizeof(itemDefData_t));
	if (*varitemDefData_tPtr != nullptr)
	{
		if (*varitemDefData_tPtr == (itemDefData_t*)0xFFFFFFFF)
		{
			*varitemDefData_tPtr = AllocLoad_itemDefData_t();
			varitemDefData_t = *varitemDefData_tPtr;
			Load_itemDefData_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varitemDefData_tPtr);
		}
	}
}

void Load_itemDefData_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varitemDefData_tPtr, sizeof(itemDefData_t*) * count);
	itemDefData_t** pointer = varitemDefData_tPtr;
	for (int i = 0; i < count; i++)
	{
		varitemDefData_tPtr = pointer;
		Load_itemDefData_tPtr(false);
		pointer++;
	}
}

void Load_itemDef_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varitemDef_s, sizeof(itemDef_s));

	varwindowDef_t = &varitemDef_s->window;
	Load_windowDef_t(false);

	varrectDef_s = varitemDef_s->textRect;
	Load_rectDef_sArray(false, 1);

	varXString = &varitemDef_s->text;
	Load_XString(false);

	if (varitemDef_s->mouseEnterText)
	{
		varMenuEventHandlerSetPtr = &varitemDef_s->mouseEnterText;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varitemDef_s->mouseExitText)
	{
		varMenuEventHandlerSetPtr = &varitemDef_s->mouseExitText;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varitemDef_s->mouseEnter)
	{
		varMenuEventHandlerSetPtr = &varitemDef_s->mouseEnter;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varitemDef_s->mouseExit)
	{
		varMenuEventHandlerSetPtr = &varitemDef_s->mouseExit;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varitemDef_s->action)
	{
		varMenuEventHandlerSetPtr = &varitemDef_s->action;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varitemDef_s->accept)
	{
		varMenuEventHandlerSetPtr = &varitemDef_s->accept;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varitemDef_s->onFocus)
	{
		varMenuEventHandlerSetPtr = &varitemDef_s->onFocus;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varitemDef_s->leaveFocus)
	{
		varMenuEventHandlerSetPtr = &varitemDef_s->leaveFocus;
		Load_MenuEventHandlerSetPtr(false);
	}

	varXString = &varitemDef_s->dvar;
	Load_XString(false);

	varXString = &varitemDef_s->dvarTest;
	Load_XString(false);

	if (varitemDef_s->onKey)
	{
		varItemKeyHandlerPtr = &varitemDef_s->onKey;
		Load_ItemKeyHandlerPtr(false);
	}

	varXString = &varitemDef_s->enableDvar;
	Load_XString(false);

	varXString = &varitemDef_s->localVar;
	Load_XString(false);

	varsnd_alias_list_tPtr = &varitemDef_s->focusSound;
	Load_snd_alias_list_tPtr(false);

	varitemDefData_t = &varitemDef_s->typeData;
	Load_itemDefData_t(false);

	if (varitemDef_s->floatExpressions)
	{
		if (varitemDef_s->floatExpressions == (ItemFloatExpression*)0xFFFFFFFF)
		{
			varitemDef_s->floatExpressions = AllocLoad_ItemFloatExpression();
			varItemFloatExpression = varitemDef_s->floatExpressions;
			Load_ItemFloatExpressionArray(true, (varitemDef_s->floatExpressionCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varitemDef_s->floatExpressions);
		}
	}

	if (varitemDef_s->visibleExp)
	{
		varStatement_sPtr = &varitemDef_s->visibleExp;
		Load_Statement_sPtr(false);
	}

	if (varitemDef_s->disabledExp)
	{
		varStatement_sPtr = &varitemDef_s->disabledExp;
		Load_Statement_sPtr(false);
	}

	if (varitemDef_s->textExp)
	{
		varStatement_sPtr = &varitemDef_s->textExp;
		Load_Statement_sPtr(false);
	}

	if (varitemDef_s->materialExp)
	{
		varStatement_sPtr = &varitemDef_s->materialExp;
		Load_Statement_sPtr(false);
	}

}

void Load_itemDef_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varitemDef_s, sizeof(itemDef_s) * count);
	itemDef_s* pointer = varitemDef_s;
	for (int i = 0; i < count; i++)
	{
		varitemDef_s = pointer;
		Load_itemDef_s(false);
		pointer++;
	}
}

void Load_itemDef_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varitemDef_s, sizeof(itemDef_s));
	if (*varitemDef_sPtr != nullptr)
	{
		if (*varitemDef_sPtr == (itemDef_s*)0xFFFFFFFF)
		{
			*varitemDef_sPtr = AllocLoad_itemDef_s();
			varitemDef_s = *varitemDef_sPtr;
			Load_itemDef_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varitemDef_sPtr);
		}
	}
}

void Load_itemDef_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varitemDef_sPtr, sizeof(itemDef_s*) * count);
	itemDef_s** pointer = varitemDef_sPtr;
	for (int i = 0; i < count; i++)
	{
		varitemDef_sPtr = pointer;
		Load_itemDef_sPtr(false);
		pointer++;
	}
}

void Load_listBoxDef_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varlistBoxDef_s, sizeof(listBoxDef_s));

	varcolumnInfo_s = varlistBoxDef_s->columnInfo;
	Load_columnInfo_sArray(false, 16);

	if (varlistBoxDef_s->onDoubleClick)
	{
		varMenuEventHandlerSetPtr = &varlistBoxDef_s->onDoubleClick;
		Load_MenuEventHandlerSetPtr(false);
	}

	varMaterialPtr = &varlistBoxDef_s->selectIcon;
	Load_MaterialPtr(false);

}

void Load_listBoxDef_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varlistBoxDef_s, sizeof(listBoxDef_s) * count);
	listBoxDef_s* pointer = varlistBoxDef_s;
	for (int i = 0; i < count; i++)
	{
		varlistBoxDef_s = pointer;
		Load_listBoxDef_s(false);
		pointer++;
	}
}

void Load_listBoxDef_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varlistBoxDef_s, sizeof(listBoxDef_s));
	if (*varlistBoxDef_sPtr != nullptr)
	{
		if (*varlistBoxDef_sPtr == (listBoxDef_s*)0xFFFFFFFF)
		{
			*varlistBoxDef_sPtr = AllocLoad_listBoxDef_s();
			varlistBoxDef_s = *varlistBoxDef_sPtr;
			Load_listBoxDef_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varlistBoxDef_sPtr);
		}
	}
}

void Load_listBoxDef_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varlistBoxDef_sPtr, sizeof(listBoxDef_s*) * count);
	listBoxDef_s** pointer = varlistBoxDef_sPtr;
	for (int i = 0; i < count; i++)
	{
		varlistBoxDef_sPtr = pointer;
		Load_listBoxDef_sPtr(false);
		pointer++;
	}
}

void Load_menuDef_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varmenuDef_t, sizeof(menuDef_t));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	if (varmenuDef_t->expressionData)
	{
		varExpressionSupportingDataPtr = &varmenuDef_t->expressionData;
		Load_ExpressionSupportingDataPtr(false);
	}

	varwindowDef_t = &varmenuDef_t->window;
	Load_windowDef_t(false);

	varXString = &varmenuDef_t->font;
	Load_XString(false);

	if (varmenuDef_t->onOpen)
	{
		varMenuEventHandlerSetPtr = &varmenuDef_t->onOpen;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varmenuDef_t->onClose)
	{
		varMenuEventHandlerSetPtr = &varmenuDef_t->onClose;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varmenuDef_t->onCloseRequest)
	{
		varMenuEventHandlerSetPtr = &varmenuDef_t->onCloseRequest;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varmenuDef_t->onESC)
	{
		varMenuEventHandlerSetPtr = &varmenuDef_t->onESC;
		Load_MenuEventHandlerSetPtr(false);
	}

	if (varmenuDef_t->onKey)
	{
		varItemKeyHandlerPtr = &varmenuDef_t->onKey;
		Load_ItemKeyHandlerPtr(false);
	}

	if (varmenuDef_t->visibleExp)
	{
		varStatement_sPtr = &varmenuDef_t->visibleExp;
		Load_Statement_sPtr(false);
	}

	varXString = &varmenuDef_t->allowedBinding;
	Load_XString(false);

	varXString = &varmenuDef_t->soundName;
	Load_XString(false);

	if (varmenuDef_t->rectXExp)
	{
		varStatement_sPtr = &varmenuDef_t->rectXExp;
		Load_Statement_sPtr(false);
	}

	if (varmenuDef_t->rectYExp)
	{
		varStatement_sPtr = &varmenuDef_t->rectYExp;
		Load_Statement_sPtr(false);
	}

	if (varmenuDef_t->rectWExp)
	{
		varStatement_sPtr = &varmenuDef_t->rectWExp;
		Load_Statement_sPtr(false);
	}

	if (varmenuDef_t->rectHExp)
	{
		varStatement_sPtr = &varmenuDef_t->rectHExp;
		Load_Statement_sPtr(false);
	}

	if (varmenuDef_t->openSoundExp)
	{
		varStatement_sPtr = &varmenuDef_t->openSoundExp;
		Load_Statement_sPtr(false);
	}

	if (varmenuDef_t->closeSoundExp)
	{
		varStatement_sPtr = &varmenuDef_t->closeSoundExp;
		Load_Statement_sPtr(false);
	}

	if (varmenuDef_t->items)
	{
		if (varmenuDef_t->items == (itemDef_s**)0xFFFFFFFF)
		{
			varmenuDef_t->items = AllocLoad_itemDef_sPtr();
			varitemDef_sPtr = varmenuDef_t->items;
			Load_itemDef_sPtrArray(true, (varmenuDef_t->itemCount));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varmenuDef_t->items);
		}
	}

	varmenuTransition = varmenuDef_t->scaleTransition;
	Load_menuTransitionArray(false, 1);

	varmenuTransition = varmenuDef_t->alphaTransition;
	Load_menuTransitionArray(false, 1);

	varmenuTransition = varmenuDef_t->xTransition;
	Load_menuTransitionArray(false, 1);

	varmenuTransition = varmenuDef_t->yTransition;
	Load_menuTransitionArray(false, 1);

	DB_PopStreamPos();
}

void Load_menuDef_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varmenuDef_t, sizeof(menuDef_t) * count);
	menuDef_t* pointer = varmenuDef_t;
	for (int i = 0; i < count; i++)
	{
		varmenuDef_t = pointer;
		Load_menuDef_t(false);
		pointer++;
	}
}

void Load_menuDef_tAsset(menuDef_t** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_MENU, (void**)varmenuDef_tPtr);
}

void Load_menuDef_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varmenuDef_t, sizeof(menuDef_t*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	menuDef_t* pointer = *varmenuDef_tPtr;
	if (*varmenuDef_tPtr != nullptr)
	{
		if (*varmenuDef_tPtr == (menuDef_t*)0xFFFFFFFF || *varmenuDef_tPtr == (menuDef_t*)0xFFFFFFFE)
		{
			*varmenuDef_tPtr = AllocLoad_menuDef_t();
			varmenuDef_t = *varmenuDef_tPtr;
			menuDef_t** insertedPointer = nullptr;
			if (pointer == (menuDef_t*)0xFFFFFFFE)
			{
				insertedPointer = (menuDef_t**)DB_InsertPointer();
			}
			Load_menuDef_t(true);
			Load_menuDef_tAsset(varmenuDef_tPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varmenuDef_tPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varmenuDef_tPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_menuDef_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varmenuDef_tPtr, sizeof(menuDef_t*) * count);
	menuDef_t** pointer = varmenuDef_tPtr;
	for (int i = 0; i < count; i++)
	{
		varmenuDef_tPtr = pointer;
		Load_menuDef_tPtr(false);
		pointer++;
	}
}

void Load_menuTransition(bool atStreamStart)
{
	Load_Stream(atStreamStart, varmenuTransition, sizeof(menuTransition));

}

void Load_menuTransitionArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varmenuTransition, sizeof(menuTransition) * count);
	menuTransition* pointer = varmenuTransition;
	for (int i = 0; i < count; i++)
	{
		varmenuTransition = pointer;
		Load_menuTransition(false);
		pointer++;
	}
}

void Load_menuTransitionPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varmenuTransition, sizeof(menuTransition));
	if (*varmenuTransitionPtr != nullptr)
	{
		if (*varmenuTransitionPtr == (menuTransition*)0xFFFFFFFF)
		{
			*varmenuTransitionPtr = AllocLoad_menuTransition();
			varmenuTransition = *varmenuTransitionPtr;
			Load_menuTransition(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varmenuTransitionPtr);
		}
	}
}

void Load_menuTransitionPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varmenuTransitionPtr, sizeof(menuTransition*) * count);
	menuTransition** pointer = varmenuTransitionPtr;
	for (int i = 0; i < count; i++)
	{
		varmenuTransitionPtr = pointer;
		Load_menuTransitionPtr(false);
		pointer++;
	}
}

void Load_multiDef_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varmultiDef_s, sizeof(multiDef_s));

	varXString = varmultiDef_s->dvarList;
	Load_XStringArray(false, 32);

	varXString = varmultiDef_s->dvarStr;
	Load_XStringArray(false, 32);

}

void Load_multiDef_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varmultiDef_s, sizeof(multiDef_s) * count);
	multiDef_s* pointer = varmultiDef_s;
	for (int i = 0; i < count; i++)
	{
		varmultiDef_s = pointer;
		Load_multiDef_s(false);
		pointer++;
	}
}

void Load_multiDef_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varmultiDef_s, sizeof(multiDef_s));
	if (*varmultiDef_sPtr != nullptr)
	{
		if (*varmultiDef_sPtr == (multiDef_s*)0xFFFFFFFF)
		{
			*varmultiDef_sPtr = AllocLoad_multiDef_s();
			varmultiDef_s = *varmultiDef_sPtr;
			Load_multiDef_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varmultiDef_sPtr);
		}
	}
}

void Load_multiDef_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varmultiDef_sPtr, sizeof(multiDef_s*) * count);
	multiDef_s** pointer = varmultiDef_sPtr;
	for (int i = 0; i < count; i++)
	{
		varmultiDef_sPtr = pointer;
		Load_multiDef_sPtr(false);
		pointer++;
	}
}

void Load_newsTickerDef_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varnewsTickerDef_s, sizeof(newsTickerDef_s));

}

void Load_newsTickerDef_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varnewsTickerDef_s, sizeof(newsTickerDef_s) * count);
	newsTickerDef_s* pointer = varnewsTickerDef_s;
	for (int i = 0; i < count; i++)
	{
		varnewsTickerDef_s = pointer;
		Load_newsTickerDef_s(false);
		pointer++;
	}
}

void Load_newsTickerDef_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varnewsTickerDef_s, sizeof(newsTickerDef_s));
	if (*varnewsTickerDef_sPtr != nullptr)
	{
		if (*varnewsTickerDef_sPtr == (newsTickerDef_s*)0xFFFFFFFF)
		{
			*varnewsTickerDef_sPtr = AllocLoad_newsTickerDef_s();
			varnewsTickerDef_s = *varnewsTickerDef_sPtr;
			Load_newsTickerDef_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varnewsTickerDef_sPtr);
		}
	}
}

void Load_newsTickerDef_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varnewsTickerDef_sPtr, sizeof(newsTickerDef_s*) * count);
	newsTickerDef_s** pointer = varnewsTickerDef_sPtr;
	for (int i = 0; i < count; i++)
	{
		varnewsTickerDef_sPtr = pointer;
		Load_newsTickerDef_sPtr(false);
		pointer++;
	}
}

void Load_operandInternalDataUnion(bool atStreamStart)
{
	Load_Stream(atStreamStart, varoperandInternalDataUnion, sizeof(operandInternalDataUnion));

	switch (varOperand->dataType)
	{
	case 0:
		varint32 = &varoperandInternalDataUnion->intVal;
		Load_int32(atStreamStart);
		break;
	case 1:
		varfloat = &varoperandInternalDataUnion->floatVal;
		Load_float(atStreamStart);
		break;
	case 2:
		varExpressionString = &varoperandInternalDataUnion->stringVal;
		Load_ExpressionString(atStreamStart);
		break;
	case 3:
		varStatement_sPtr = &varoperandInternalDataUnion->function;
		Load_Statement_sPtr(false);
		break;
	}
}

void Load_operandInternalDataUnionArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varoperandInternalDataUnion, sizeof(operandInternalDataUnion) * count);
	operandInternalDataUnion* pointer = varoperandInternalDataUnion;
	for (int i = 0; i < count; i++)
	{
		varoperandInternalDataUnion = pointer;
		Load_operandInternalDataUnion(false);
		pointer++;
	}
}

void Load_operandInternalDataUnionPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varoperandInternalDataUnion, sizeof(operandInternalDataUnion));
	if (*varoperandInternalDataUnionPtr != nullptr)
	{
		if (*varoperandInternalDataUnionPtr == (operandInternalDataUnion*)0xFFFFFFFF)
		{
			*varoperandInternalDataUnionPtr = AllocLoad_operandInternalDataUnion();
			varoperandInternalDataUnion = *varoperandInternalDataUnionPtr;
			Load_operandInternalDataUnion(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varoperandInternalDataUnionPtr);
		}
	}
}

void Load_operandInternalDataUnionPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varoperandInternalDataUnionPtr, sizeof(operandInternalDataUnion*) * count);
	operandInternalDataUnion** pointer = varoperandInternalDataUnionPtr;
	for (int i = 0; i < count; i++)
	{
		varoperandInternalDataUnionPtr = pointer;
		Load_operandInternalDataUnionPtr(false);
		pointer++;
	}
}

void Load_rectDef_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, varrectDef_s, sizeof(rectDef_s));

}

void Load_rectDef_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varrectDef_s, sizeof(rectDef_s) * count);
	rectDef_s* pointer = varrectDef_s;
	for (int i = 0; i < count; i++)
	{
		varrectDef_s = pointer;
		Load_rectDef_s(false);
		pointer++;
	}
}

void Load_rectDef_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varrectDef_s, sizeof(rectDef_s));
	if (*varrectDef_sPtr != nullptr)
	{
		if (*varrectDef_sPtr == (rectDef_s*)0xFFFFFFFF)
		{
			*varrectDef_sPtr = AllocLoad_rectDef_s();
			varrectDef_s = *varrectDef_sPtr;
			Load_rectDef_s(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varrectDef_sPtr);
		}
	}
}

void Load_rectDef_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varrectDef_sPtr, sizeof(rectDef_s*) * count);
	rectDef_s** pointer = varrectDef_sPtr;
	for (int i = 0; i < count; i++)
	{
		varrectDef_sPtr = pointer;
		Load_rectDef_sPtr(false);
		pointer++;
	}
}

void Load_snd_alias_list_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varsnd_alias_list_t, sizeof(snd_alias_list_t));
	DB_PushStreamPos(XFILE_BLOCK_VIRTUAL);

	varXString = &varsnd_alias_list_t->aliasName;
	Load_XString(false);

	if (varsnd_alias_list_t->head)
	{
		if (varsnd_alias_list_t->head == (snd_alias_t*)0xFFFFFFFF)
		{
			varsnd_alias_list_t->head = AllocLoad_snd_alias_t();
			varsnd_alias_t = varsnd_alias_list_t->head;
			Load_snd_alias_tArray(true, (varsnd_alias_list_t->count));
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)&varsnd_alias_list_t->head);
		}
	}

	DB_PopStreamPos();
}

void Load_snd_alias_list_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varsnd_alias_list_t, sizeof(snd_alias_list_t) * count);
	snd_alias_list_t* pointer = varsnd_alias_list_t;
	for (int i = 0; i < count; i++)
	{
		varsnd_alias_list_t = pointer;
		Load_snd_alias_list_t(false);
		pointer++;
	}
}

void Load_snd_alias_list_tAsset(snd_alias_list_t** asset)
{
	DB_AddXAsset(XAssetType::ASSET_TYPE_SOUND, (void**)varsnd_alias_list_tPtr);
}

void Load_snd_alias_list_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varsnd_alias_list_t, sizeof(snd_alias_list_t*));
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	snd_alias_list_t* pointer = *varsnd_alias_list_tPtr;
	if (*varsnd_alias_list_tPtr != nullptr)
	{
		if (*varsnd_alias_list_tPtr == (snd_alias_list_t*)0xFFFFFFFF || *varsnd_alias_list_tPtr == (snd_alias_list_t*)0xFFFFFFFE)
		{
			*varsnd_alias_list_tPtr = AllocLoad_snd_alias_list_t();
			varsnd_alias_list_t = *varsnd_alias_list_tPtr;
			snd_alias_list_t** insertedPointer = nullptr;
			if (pointer == (snd_alias_list_t*)0xFFFFFFFE)
			{
				insertedPointer = (snd_alias_list_t**)DB_InsertPointer();
			}
			Load_snd_alias_list_t(true);
			Load_snd_alias_list_tAsset(varsnd_alias_list_tPtr);
			if (insertedPointer != nullptr)
			{
				*insertedPointer = *varsnd_alias_list_tPtr;
			}
		}
		else
		{
			DB_ConvertOffsetToAlias((void**)varsnd_alias_list_tPtr);
		}
	}
	DB_PopStreamPos();
}

void Load_snd_alias_list_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varsnd_alias_list_tPtr, sizeof(snd_alias_list_t*) * count);
	snd_alias_list_t** pointer = varsnd_alias_list_tPtr;
	for (int i = 0; i < count; i++)
	{
		varsnd_alias_list_tPtr = pointer;
		Load_snd_alias_list_tPtr(false);
		pointer++;
	}
}

void Load_snd_alias_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varsnd_alias_t, sizeof(snd_alias_t));

	varXString = &varsnd_alias_t->aliasName;
	Load_XString(false);

	varXString = &varsnd_alias_t->subtitle;
	Load_XString(false);

	varXString = &varsnd_alias_t->secondaryAliasName;
	Load_XString(false);

	varXString = &varsnd_alias_t->chainAliasName;
	Load_XString(false);

	varXString = &varsnd_alias_t->mixerGroup;
	Load_XString(false);

	if (varsnd_alias_t->soundFile)
	{
		varSoundFilePtr = &varsnd_alias_t->soundFile;
		Load_SoundFilePtr(false);
	}

	var$C8D87EB0090687D323381DFB7A82089C = &varsnd_alias_t->___u15;
	Load_$C8D87EB0090687D323381DFB7A82089C(false);

	varSndCurvePtr = &varsnd_alias_t->volumeFalloffCurve;
	Load_SndCurvePtr(false);

	if (varsnd_alias_t->speakerMap)
	{
		varSpeakerMapPtr = &varsnd_alias_t->speakerMap;
		Load_SpeakerMapPtr(false);
	}

}

void Load_snd_alias_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varsnd_alias_t, sizeof(snd_alias_t) * count);
	snd_alias_t* pointer = varsnd_alias_t;
	for (int i = 0; i < count; i++)
	{
		varsnd_alias_t = pointer;
		Load_snd_alias_t(false);
		pointer++;
	}
}

void Load_snd_alias_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varsnd_alias_t, sizeof(snd_alias_t));
	if (*varsnd_alias_tPtr != nullptr)
	{
		if (*varsnd_alias_tPtr == (snd_alias_t*)0xFFFFFFFF)
		{
			*varsnd_alias_tPtr = AllocLoad_snd_alias_t();
			varsnd_alias_t = *varsnd_alias_tPtr;
			Load_snd_alias_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varsnd_alias_tPtr);
		}
	}
}

void Load_snd_alias_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varsnd_alias_tPtr, sizeof(snd_alias_t*) * count);
	snd_alias_t** pointer = varsnd_alias_tPtr;
	for (int i = 0; i < count; i++)
	{
		varsnd_alias_tPtr = pointer;
		Load_snd_alias_tPtr(false);
		pointer++;
	}
}

void Load_textScrollDef_s(bool atStreamStart)
{
	Load_Stream(atStreamStart, vartextScrollDef_s, sizeof(textScrollDef_s));

}

void Load_textScrollDef_sArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, vartextScrollDef_s, sizeof(textScrollDef_s) * count);
	textScrollDef_s* pointer = vartextScrollDef_s;
	for (int i = 0; i < count; i++)
	{
		vartextScrollDef_s = pointer;
		Load_textScrollDef_s(false);
		pointer++;
	}
}

void Load_textScrollDef_sPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, vartextScrollDef_s, sizeof(textScrollDef_s));
	if (*vartextScrollDef_sPtr != nullptr)
	{
		*vartextScrollDef_sPtr = AllocLoad_textScrollDef_s();
		vartextScrollDef_s = *vartextScrollDef_sPtr;
		Load_textScrollDef_s(true);
	}
}

void Load_textScrollDef_sPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, vartextScrollDef_sPtr, sizeof(textScrollDef_s*) * count);
	textScrollDef_s** pointer = vartextScrollDef_sPtr;
	for (int i = 0; i < count; i++)
	{
		vartextScrollDef_sPtr = pointer;
		Load_textScrollDef_sPtr(false);
		pointer++;
	}
}

void Load_uint16(bool atStreamStart)
{
	Load_Stream(atStreamStart, varuint16, sizeof(uint16));

}

void Load_uint16Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varuint16, sizeof(uint16) * count);
	uint16* pointer = varuint16;
	for (int i = 0; i < count; i++)
	{
		varuint16 = pointer;
		Load_uint16(false);
		pointer++;
	}
}

void Load_uint16Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varuint16, sizeof(uint16));
	if (*varuint16Ptr != nullptr)
	{
		*varuint16Ptr = AllocLoad_uint16();
		varuint16 = *varuint16Ptr;
		Load_uint16(true);
	}
}

void Load_uint16PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varuint16Ptr, sizeof(uint16*) * count);
	uint16** pointer = varuint16Ptr;
	for (int i = 0; i < count; i++)
	{
		varuint16Ptr = pointer;
		Load_uint16Ptr(false);
		pointer++;
	}
}

void Load_uint32(bool atStreamStart)
{
	Load_Stream(atStreamStart, varuint32, sizeof(uint32));

}

void Load_uint32Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varuint32, sizeof(uint32) * count);
	uint32* pointer = varuint32;
	for (int i = 0; i < count; i++)
	{
		varuint32 = pointer;
		Load_uint32(false);
		pointer++;
	}
}

void Load_uint32Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varuint32, sizeof(uint32));
	if (*varuint32Ptr != nullptr)
	{
		*varuint32Ptr = AllocLoad_uint32();
		varuint32 = *varuint32Ptr;
		Load_uint32(true);
	}
}

void Load_uint32PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varuint32Ptr, sizeof(uint32*) * count);
	uint32** pointer = varuint32Ptr;
	for (int i = 0; i < count; i++)
	{
		varuint32Ptr = pointer;
		Load_uint32Ptr(false);
		pointer++;
	}
}

void Load_uint64(bool atStreamStart)
{
	Load_Stream(atStreamStart, varuint64, sizeof(uint64));

}

void Load_uint64Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varuint64, sizeof(uint64) * count);
	uint64* pointer = varuint64;
	for (int i = 0; i < count; i++)
	{
		varuint64 = pointer;
		Load_uint64(false);
		pointer++;
	}
}

void Load_uint64Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varuint64, sizeof(uint64));
	if (*varuint64Ptr != nullptr)
	{
		*varuint64Ptr = AllocLoad_uint64();
		varuint64 = *varuint64Ptr;
		Load_uint64(true);
	}
}

void Load_uint64PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varuint64Ptr, sizeof(uint64*) * count);
	uint64** pointer = varuint64Ptr;
	for (int i = 0; i < count; i++)
	{
		varuint64Ptr = pointer;
		Load_uint64Ptr(false);
		pointer++;
	}
}

void Load_uint8(bool atStreamStart)
{
	Load_Stream(atStreamStart, varuint8, sizeof(uint8));

}

void Load_uint8Array(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varuint8, sizeof(uint8) * count);
	uint8* pointer = varuint8;
	for (int i = 0; i < count; i++)
	{
		varuint8 = pointer;
		Load_uint8(false);
		pointer++;
	}
}

void Load_uint8Ptr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varuint8, sizeof(uint8));
	if (*varuint8Ptr != nullptr)
	{
		*varuint8Ptr = AllocLoad_uint8();
		varuint8 = *varuint8Ptr;
		Load_uint8(true);
	}
}

void Load_uint8PtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varuint8Ptr, sizeof(uint8*) * count);
	uint8** pointer = varuint8Ptr;
	for (int i = 0; i < count; i++)
	{
		varuint8Ptr = pointer;
		Load_uint8Ptr(false);
		pointer++;
	}
}

void Load_vec1_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varvec1_t, sizeof(vec1_t));

}

void Load_vec1_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varvec1_t, sizeof(vec1_t) * count);
	vec1_t* pointer = varvec1_t;
	for (int i = 0; i < count; i++)
	{
		varvec1_t = pointer;
		Load_vec1_t(false);
		pointer++;
	}
}

void Load_vec1_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varvec1_t, sizeof(vec1_t));
	if (*varvec1_tPtr != nullptr)
	{
		*varvec1_tPtr = AllocLoad_vec1_t();
		varvec1_t = *varvec1_tPtr;
		Load_vec1_t(true);
	}
}

void Load_vec1_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varvec1_tPtr, sizeof(vec1_t*) * count);
	vec1_t** pointer = varvec1_tPtr;
	for (int i = 0; i < count; i++)
	{
		varvec1_tPtr = pointer;
		Load_vec1_tPtr(false);
		pointer++;
	}
}

void Load_vec2_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varvec2_t, sizeof(vec2_t));

}

void Load_vec2_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varvec2_t, sizeof(vec2_t) * count);
	vec2_t* pointer = varvec2_t;
	for (int i = 0; i < count; i++)
	{
		varvec2_t = pointer;
		Load_vec2_t(false);
		pointer++;
	}
}

void Load_vec2_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varvec2_t, sizeof(vec2_t));
	if (*varvec2_tPtr != nullptr)
	{
		*varvec2_tPtr = AllocLoad_vec2_t();
		varvec2_t = *varvec2_tPtr;
		Load_vec2_t(true);
	}
}

void Load_vec2_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varvec2_tPtr, sizeof(vec2_t*) * count);
	vec2_t** pointer = varvec2_tPtr;
	for (int i = 0; i < count; i++)
	{
		varvec2_tPtr = pointer;
		Load_vec2_tPtr(false);
		pointer++;
	}
}

void Load_vec3_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varvec3_t, sizeof(vec3_t));

}

void Load_vec3_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varvec3_t, sizeof(vec3_t) * count);
	vec3_t* pointer = varvec3_t;
	for (int i = 0; i < count; i++)
	{
		varvec3_t = pointer;
		Load_vec3_t(false);
		pointer++;
	}
}

void Load_vec3_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varvec3_t, sizeof(vec3_t));
	if (*varvec3_tPtr != nullptr)
	{
		*varvec3_tPtr = AllocLoad_vec3_t();
		varvec3_t = *varvec3_tPtr;
		Load_vec3_t(true);
	}
}

void Load_vec3_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varvec3_tPtr, sizeof(vec3_t*) * count);
	vec3_t** pointer = varvec3_tPtr;
	for (int i = 0; i < count; i++)
	{
		varvec3_tPtr = pointer;
		Load_vec3_tPtr(false);
		pointer++;
	}
}

void Load_vec4_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varvec4_t, sizeof(vec4_t));

}

void Load_vec4_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varvec4_t, sizeof(vec4_t) * count);
	vec4_t* pointer = varvec4_t;
	for (int i = 0; i < count; i++)
	{
		varvec4_t = pointer;
		Load_vec4_t(false);
		pointer++;
	}
}

void Load_vec4_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varvec4_t, sizeof(vec4_t));
	if (*varvec4_tPtr != nullptr)
	{
		*varvec4_tPtr = AllocLoad_vec4_t();
		varvec4_t = *varvec4_tPtr;
		Load_vec4_t(true);
	}
}

void Load_vec4_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varvec4_tPtr, sizeof(vec4_t*) * count);
	vec4_t** pointer = varvec4_tPtr;
	for (int i = 0; i < count; i++)
	{
		varvec4_tPtr = pointer;
		Load_vec4_tPtr(false);
		pointer++;
	}
}

void Load_water_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varwater_t, sizeof(water_t));

	varWaterWritable = &varwater_t->writable;
	Load_WaterWritable(false);

	if (varwater_t->H0)
	{
		varcomplex_sPtr = &varwater_t->H0;
		Load_complex_sPtr(false);
	}

	if (varwater_t->wTerm)
	{
		varfloatPtr = &varwater_t->wTerm;
		Load_floatPtr(false);
	}

	varGfxImagePtr = &varwater_t->image;
	Load_GfxImagePtr(false);

}

void Load_water_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varwater_t, sizeof(water_t) * count);
	water_t* pointer = varwater_t;
	for (int i = 0; i < count; i++)
	{
		varwater_t = pointer;
		Load_water_t(false);
		pointer++;
	}
}

void Load_water_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varwater_t, sizeof(water_t));
	if (*varwater_tPtr != nullptr)
	{
		if (*varwater_tPtr == (water_t*)0xFFFFFFFF)
		{
			*varwater_tPtr = AllocLoad_water_t();
			varwater_t = *varwater_tPtr;
			Load_water_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varwater_tPtr);
		}
	}
}

void Load_water_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varwater_tPtr, sizeof(water_t*) * count);
	water_t** pointer = varwater_tPtr;
	for (int i = 0; i < count; i++)
	{
		varwater_tPtr = pointer;
		Load_water_tPtr(false);
		pointer++;
	}
}

void Load_windowDef_t(bool atStreamStart)
{
	Load_Stream(atStreamStart, varwindowDef_t, sizeof(windowDef_t));

	varXString = &varwindowDef_t->name;
	Load_XString(false);

	varrectDef_s = &varwindowDef_t->rect;
	Load_rectDef_s(false);

	varrectDef_s = &varwindowDef_t->rectClient;
	Load_rectDef_s(false);

	varXString = &varwindowDef_t->group;
	Load_XString(false);

	varMaterialPtr = &varwindowDef_t->background;
	Load_MaterialPtr(false);

}

void Load_windowDef_tArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varwindowDef_t, sizeof(windowDef_t) * count);
	windowDef_t* pointer = varwindowDef_t;
	for (int i = 0; i < count; i++)
	{
		varwindowDef_t = pointer;
		Load_windowDef_t(false);
		pointer++;
	}
}

void Load_windowDef_tPtr(bool atStreamStart)
{
	Load_Stream(atStreamStart, varwindowDef_t, sizeof(windowDef_t));
	if (*varwindowDef_tPtr != nullptr)
	{
		if (*varwindowDef_tPtr == (windowDef_t*)0xFFFFFFFF)
		{
			*varwindowDef_tPtr = AllocLoad_windowDef_t();
			varwindowDef_t = *varwindowDef_tPtr;
			Load_windowDef_t(true);
		}
		else
		{
			DB_ConvertOffsetToPointer((void**)varwindowDef_tPtr);
		}
	}
}

void Load_windowDef_tPtrArray(bool atStreamStart, int count)
{
	Load_Stream(atStreamStart, varwindowDef_tPtr, sizeof(windowDef_t*) * count);
	windowDef_t** pointer = varwindowDef_tPtr;
	for (int i = 0; i < count; i++)
	{
		varwindowDef_tPtr = pointer;
		Load_windowDef_tPtr(false);
		pointer++;
	}
}

void Save_$C8D87EB0090687D323381DFB7A82089C(bool atStreamStart)
{
	// todo!
}

void Save_$C8D87EB0090687D323381DFB7A82089CArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, var$C8D87EB0090687D323381DFB7A82089C, sizeof($C8D87EB0090687D323381DFB7A82089C) * count, (void**)&out$C8D87EB0090687D323381DFB7A82089C);
	for (int i = 0; i < count; i++)
	{
		Save_$C8D87EB0090687D323381DFB7A82089C(false);
		var$C8D87EB0090687D323381DFB7A82089C++;
		out$C8D87EB0090687D323381DFB7A82089C++;
		stream$C8D87EB0090687D323381DFB7A82089C++;
	}
}

void Save_$C8D87EB0090687D323381DFB7A82089CPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, var$C8D87EB0090687D323381DFB7A82089CPtr, sizeof($C8D87EB0090687D323381DFB7A82089C*), (void**)&out$C8D87EB0090687D323381DFB7A82089CPtr);
	if (*var$C8D87EB0090687D323381DFB7A82089CPtr)
	{
		*out$C8D87EB0090687D323381DFB7A82089CPtr = ($C8D87EB0090687D323381DFB7A82089C*)DB_FindStreamData(*var$C8D87EB0090687D323381DFB7A82089CPtr);
		assert(*out$C8D87EB0090687D323381DFB7A82089CPtr != ($C8D87EB0090687D323381DFB7A82089C*)0xFFFFFFFF);
		if (!*out$C8D87EB0090687D323381DFB7A82089CPtr)
		{
			*out$C8D87EB0090687D323381DFB7A82089CPtr = AllocSave_$C8D87EB0090687D323381DFB7A82089C();
			var$C8D87EB0090687D323381DFB7A82089C = *var$C8D87EB0090687D323381DFB7A82089CPtr;
			stream$C8D87EB0090687D323381DFB7A82089C = *out$C8D87EB0090687D323381DFB7A82089CPtr;
			auto v1 = sub_44AF80((void**)stream$C8D87EB0090687D323381DFB7A82089CPtr, (void**)out$C8D87EB0090687D323381DFB7A82089CPtr);
			DB_FindStreamDataOrInsert((void*)*var$C8D87EB0090687D323381DFB7A82089CPtr, v1);
			Save_$C8D87EB0090687D323381DFB7A82089C(true);
		}
	}
}

void Save_$C8D87EB0090687D323381DFB7A82089CPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, var$C8D87EB0090687D323381DFB7A82089CPtr, sizeof($C8D87EB0090687D323381DFB7A82089C*) * count, (void**)&out$C8D87EB0090687D323381DFB7A82089CPtr);
	for (int i = 0; i < count; i++)
	{
		Save_$C8D87EB0090687D323381DFB7A82089CPtr(false);
		var$C8D87EB0090687D323381DFB7A82089CPtr++;
		out$C8D87EB0090687D323381DFB7A82089CPtr++;
		stream$C8D87EB0090687D323381DFB7A82089CPtr++;
	}
}

void Save_$E43DBA5037697D705289B74D87E76C70(bool atStreamStart)
{
	// todo!
}

void Save_$E43DBA5037697D705289B74D87E76C70Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, var$E43DBA5037697D705289B74D87E76C70, sizeof($E43DBA5037697D705289B74D87E76C70) * count, (void**)&out$E43DBA5037697D705289B74D87E76C70);
	for (int i = 0; i < count; i++)
	{
		Save_$E43DBA5037697D705289B74D87E76C70(false);
		var$E43DBA5037697D705289B74D87E76C70++;
		out$E43DBA5037697D705289B74D87E76C70++;
		stream$E43DBA5037697D705289B74D87E76C70++;
	}
}

void Save_$E43DBA5037697D705289B74D87E76C70Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, var$E43DBA5037697D705289B74D87E76C70Ptr, sizeof($E43DBA5037697D705289B74D87E76C70*), (void**)&out$E43DBA5037697D705289B74D87E76C70Ptr);
	if (*var$E43DBA5037697D705289B74D87E76C70Ptr)
	{
		*out$E43DBA5037697D705289B74D87E76C70Ptr = ($E43DBA5037697D705289B74D87E76C70*)DB_FindStreamData(*var$E43DBA5037697D705289B74D87E76C70Ptr);
		assert(*out$E43DBA5037697D705289B74D87E76C70Ptr != ($E43DBA5037697D705289B74D87E76C70*)0xFFFFFFFF);
		if (!*out$E43DBA5037697D705289B74D87E76C70Ptr)
		{
			*out$E43DBA5037697D705289B74D87E76C70Ptr = AllocSave_$E43DBA5037697D705289B74D87E76C70();
			var$E43DBA5037697D705289B74D87E76C70 = *var$E43DBA5037697D705289B74D87E76C70Ptr;
			stream$E43DBA5037697D705289B74D87E76C70 = *out$E43DBA5037697D705289B74D87E76C70Ptr;
			auto v1 = sub_44AF80((void**)stream$E43DBA5037697D705289B74D87E76C70Ptr, (void**)out$E43DBA5037697D705289B74D87E76C70Ptr);
			DB_FindStreamDataOrInsert((void*)*var$E43DBA5037697D705289B74D87E76C70Ptr, v1);
			Save_$E43DBA5037697D705289B74D87E76C70(true);
		}
	}
}

void Save_$E43DBA5037697D705289B74D87E76C70PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, var$E43DBA5037697D705289B74D87E76C70Ptr, sizeof($E43DBA5037697D705289B74D87E76C70*) * count, (void**)&out$E43DBA5037697D705289B74D87E76C70Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_$E43DBA5037697D705289B74D87E76C70Ptr(false);
		var$E43DBA5037697D705289B74D87E76C70Ptr++;
		out$E43DBA5037697D705289B74D87E76C70Ptr++;
		stream$E43DBA5037697D705289B74D87E76C70Ptr++;
	}
}

void Save_Bounds(bool atStreamStart)
{
	// todo!
}

void Save_BoundsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varBounds, sizeof(Bounds) * count, (void**)&outBounds);
	for (int i = 0; i < count; i++)
	{
		Save_Bounds(false);
		varBounds++;
		outBounds++;
		streamBounds++;
	}
}

void Save_BoundsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varBoundsPtr, sizeof(Bounds*), (void**)&outBoundsPtr);
	if (*varBoundsPtr)
	{
		*outBoundsPtr = (Bounds*)DB_FindStreamData(*varBoundsPtr);
		assert(*outBoundsPtr != (Bounds*)0xFFFFFFFF);
		if (!*outBoundsPtr)
		{
			*outBoundsPtr = AllocSave_Bounds();
			varBounds = *varBoundsPtr;
			streamBounds = *outBoundsPtr;
			auto v1 = sub_44AF80((void**)streamBoundsPtr, (void**)outBoundsPtr);
			DB_FindStreamDataOrInsert((void*)*varBoundsPtr, v1);
			Save_Bounds(true);
		}
	}
}

void Save_BoundsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varBoundsPtr, sizeof(Bounds*) * count, (void**)&outBoundsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_BoundsPtr(false);
		varBoundsPtr++;
		outBoundsPtr++;
		streamBoundsPtr++;
	}
}

void Save_BrushWrapper(bool atStreamStart)
{
	// todo!
}

void Save_BrushWrapperArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varBrushWrapper, sizeof(BrushWrapper) * count, (void**)&outBrushWrapper);
	for (int i = 0; i < count; i++)
	{
		Save_BrushWrapper(false);
		varBrushWrapper++;
		outBrushWrapper++;
		streamBrushWrapper++;
	}
}

void Save_BrushWrapperPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varBrushWrapperPtr, sizeof(BrushWrapper*), (void**)&outBrushWrapperPtr);
	if (*varBrushWrapperPtr)
	{
		*outBrushWrapperPtr = (BrushWrapper*)DB_FindStreamData(*varBrushWrapperPtr);
		assert(*outBrushWrapperPtr != (BrushWrapper*)0xFFFFFFFF);
		if (!*outBrushWrapperPtr)
		{
			*outBrushWrapperPtr = AllocSave_BrushWrapper();
			varBrushWrapper = *varBrushWrapperPtr;
			streamBrushWrapper = *outBrushWrapperPtr;
			auto v1 = sub_44AF80((void**)streamBrushWrapperPtr, (void**)outBrushWrapperPtr);
			DB_FindStreamDataOrInsert((void*)*varBrushWrapperPtr, v1);
			Save_BrushWrapper(true);
		}
	}
}

void Save_BrushWrapperPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varBrushWrapperPtr, sizeof(BrushWrapper*) * count, (void**)&outBrushWrapperPtr);
	for (int i = 0; i < count; i++)
	{
		Save_BrushWrapperPtr(false);
		varBrushWrapperPtr++;
		outBrushWrapperPtr++;
		streamBrushWrapperPtr++;
	}
}

void Save_CardMemory(bool atStreamStart)
{
	// todo!
}

void Save_CardMemoryArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCardMemory, sizeof(CardMemory) * count, (void**)&outCardMemory);
	for (int i = 0; i < count; i++)
	{
		Save_CardMemory(false);
		varCardMemory++;
		outCardMemory++;
		streamCardMemory++;
	}
}

void Save_CardMemoryPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varCardMemoryPtr, sizeof(CardMemory*), (void**)&outCardMemoryPtr);
	if (*varCardMemoryPtr)
	{
		*outCardMemoryPtr = (CardMemory*)DB_FindStreamData(*varCardMemoryPtr);
		assert(*outCardMemoryPtr != (CardMemory*)0xFFFFFFFF);
		if (!*outCardMemoryPtr)
		{
			*outCardMemoryPtr = AllocSave_CardMemory();
			varCardMemory = *varCardMemoryPtr;
			streamCardMemory = *outCardMemoryPtr;
			auto v1 = sub_44AF80((void**)streamCardMemoryPtr, (void**)outCardMemoryPtr);
			DB_FindStreamDataOrInsert((void*)*varCardMemoryPtr, v1);
			Save_CardMemory(true);
		}
	}
}

void Save_CardMemoryPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCardMemoryPtr, sizeof(CardMemory*) * count, (void**)&outCardMemoryPtr);
	for (int i = 0; i < count; i++)
	{
		Save_CardMemoryPtr(false);
		varCardMemoryPtr++;
		outCardMemoryPtr++;
		streamCardMemoryPtr++;
	}
}

void Save_ClipMaterial(bool atStreamStart)
{
	// todo!
}

void Save_ClipMaterialArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varClipMaterial, sizeof(ClipMaterial) * count, (void**)&outClipMaterial);
	for (int i = 0; i < count; i++)
	{
		Save_ClipMaterial(false);
		varClipMaterial++;
		outClipMaterial++;
		streamClipMaterial++;
	}
}

void Save_ClipMaterialPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varClipMaterialPtr, sizeof(ClipMaterial*), (void**)&outClipMaterialPtr);
	if (*varClipMaterialPtr)
	{
		*outClipMaterialPtr = (ClipMaterial*)DB_FindStreamData(*varClipMaterialPtr);
		assert(*outClipMaterialPtr != (ClipMaterial*)0xFFFFFFFF);
		if (!*outClipMaterialPtr)
		{
			*outClipMaterialPtr = AllocSave_ClipMaterial();
			varClipMaterial = *varClipMaterialPtr;
			streamClipMaterial = *outClipMaterialPtr;
			auto v1 = sub_44AF80((void**)streamClipMaterialPtr, (void**)outClipMaterialPtr);
			DB_FindStreamDataOrInsert((void*)*varClipMaterialPtr, v1);
			Save_ClipMaterial(true);
		}
	}
}

void Save_ClipMaterialPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varClipMaterialPtr, sizeof(ClipMaterial*) * count, (void**)&outClipMaterialPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ClipMaterialPtr(false);
		varClipMaterialPtr++;
		outClipMaterialPtr++;
		streamClipMaterialPtr++;
	}
}

void Save_CollisionAabbTree(bool atStreamStart)
{
	// todo!
}

void Save_CollisionAabbTreeArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCollisionAabbTree, sizeof(CollisionAabbTree) * count, (void**)&outCollisionAabbTree);
	for (int i = 0; i < count; i++)
	{
		Save_CollisionAabbTree(false);
		varCollisionAabbTree++;
		outCollisionAabbTree++;
		streamCollisionAabbTree++;
	}
}

void Save_CollisionAabbTreeIndex(bool atStreamStart)
{
	// todo!
}

void Save_CollisionAabbTreeIndexArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCollisionAabbTreeIndex, sizeof(CollisionAabbTreeIndex) * count, (void**)&outCollisionAabbTreeIndex);
	for (int i = 0; i < count; i++)
	{
		Save_CollisionAabbTreeIndex(false);
		varCollisionAabbTreeIndex++;
		outCollisionAabbTreeIndex++;
		streamCollisionAabbTreeIndex++;
	}
}

void Save_CollisionAabbTreeIndexPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varCollisionAabbTreeIndexPtr, sizeof(CollisionAabbTreeIndex*), (void**)&outCollisionAabbTreeIndexPtr);
	if (*varCollisionAabbTreeIndexPtr)
	{
		*outCollisionAabbTreeIndexPtr = (CollisionAabbTreeIndex*)DB_FindStreamData(*varCollisionAabbTreeIndexPtr);
		assert(*outCollisionAabbTreeIndexPtr != (CollisionAabbTreeIndex*)0xFFFFFFFF);
		if (!*outCollisionAabbTreeIndexPtr)
		{
			*outCollisionAabbTreeIndexPtr = AllocSave_CollisionAabbTreeIndex();
			varCollisionAabbTreeIndex = *varCollisionAabbTreeIndexPtr;
			streamCollisionAabbTreeIndex = *outCollisionAabbTreeIndexPtr;
			auto v1 = sub_44AF80((void**)streamCollisionAabbTreeIndexPtr, (void**)outCollisionAabbTreeIndexPtr);
			DB_FindStreamDataOrInsert((void*)*varCollisionAabbTreeIndexPtr, v1);
			Save_CollisionAabbTreeIndex(true);
		}
	}
}

void Save_CollisionAabbTreeIndexPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCollisionAabbTreeIndexPtr, sizeof(CollisionAabbTreeIndex*) * count, (void**)&outCollisionAabbTreeIndexPtr);
	for (int i = 0; i < count; i++)
	{
		Save_CollisionAabbTreeIndexPtr(false);
		varCollisionAabbTreeIndexPtr++;
		outCollisionAabbTreeIndexPtr++;
		streamCollisionAabbTreeIndexPtr++;
	}
}

void Save_CollisionAabbTreePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varCollisionAabbTreePtr, sizeof(CollisionAabbTree*), (void**)&outCollisionAabbTreePtr);
	if (*varCollisionAabbTreePtr)
	{
		*outCollisionAabbTreePtr = (CollisionAabbTree*)DB_FindStreamData(*varCollisionAabbTreePtr);
		assert(*outCollisionAabbTreePtr != (CollisionAabbTree*)0xFFFFFFFF);
		if (!*outCollisionAabbTreePtr)
		{
			*outCollisionAabbTreePtr = AllocSave_CollisionAabbTree();
			varCollisionAabbTree = *varCollisionAabbTreePtr;
			streamCollisionAabbTree = *outCollisionAabbTreePtr;
			auto v1 = sub_44AF80((void**)streamCollisionAabbTreePtr, (void**)outCollisionAabbTreePtr);
			DB_FindStreamDataOrInsert((void*)*varCollisionAabbTreePtr, v1);
			Save_CollisionAabbTree(true);
		}
	}
}

void Save_CollisionAabbTreePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCollisionAabbTreePtr, sizeof(CollisionAabbTree*) * count, (void**)&outCollisionAabbTreePtr);
	for (int i = 0; i < count; i++)
	{
		Save_CollisionAabbTreePtr(false);
		varCollisionAabbTreePtr++;
		outCollisionAabbTreePtr++;
		streamCollisionAabbTreePtr++;
	}
}

void Save_CollisionBorder(bool atStreamStart)
{
	// todo!
}

void Save_CollisionBorderArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCollisionBorder, sizeof(CollisionBorder) * count, (void**)&outCollisionBorder);
	for (int i = 0; i < count; i++)
	{
		Save_CollisionBorder(false);
		varCollisionBorder++;
		outCollisionBorder++;
		streamCollisionBorder++;
	}
}

void Save_CollisionBorderPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varCollisionBorderPtr, sizeof(CollisionBorder*), (void**)&outCollisionBorderPtr);
	if (*varCollisionBorderPtr)
	{
		*outCollisionBorderPtr = (CollisionBorder*)DB_FindStreamData(*varCollisionBorderPtr);
		assert(*outCollisionBorderPtr != (CollisionBorder*)0xFFFFFFFF);
		if (!*outCollisionBorderPtr)
		{
			*outCollisionBorderPtr = AllocSave_CollisionBorder();
			varCollisionBorder = *varCollisionBorderPtr;
			streamCollisionBorder = *outCollisionBorderPtr;
			auto v1 = sub_44AF80((void**)streamCollisionBorderPtr, (void**)outCollisionBorderPtr);
			DB_FindStreamDataOrInsert((void*)*varCollisionBorderPtr, v1);
			Save_CollisionBorder(true);
		}
	}
}

void Save_CollisionBorderPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCollisionBorderPtr, sizeof(CollisionBorder*) * count, (void**)&outCollisionBorderPtr);
	for (int i = 0; i < count; i++)
	{
		Save_CollisionBorderPtr(false);
		varCollisionBorderPtr++;
		outCollisionBorderPtr++;
		streamCollisionBorderPtr++;
	}
}

void Save_CollisionPartition(bool atStreamStart)
{
	// todo!
}

void Save_CollisionPartitionArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCollisionPartition, sizeof(CollisionPartition) * count, (void**)&outCollisionPartition);
	for (int i = 0; i < count; i++)
	{
		Save_CollisionPartition(false);
		varCollisionPartition++;
		outCollisionPartition++;
		streamCollisionPartition++;
	}
}

void Save_CollisionPartitionPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varCollisionPartitionPtr, sizeof(CollisionPartition*), (void**)&outCollisionPartitionPtr);
	if (*varCollisionPartitionPtr)
	{
		*outCollisionPartitionPtr = (CollisionPartition*)DB_FindStreamData(*varCollisionPartitionPtr);
		assert(*outCollisionPartitionPtr != (CollisionPartition*)0xFFFFFFFF);
		if (!*outCollisionPartitionPtr)
		{
			*outCollisionPartitionPtr = AllocSave_CollisionPartition();
			varCollisionPartition = *varCollisionPartitionPtr;
			streamCollisionPartition = *outCollisionPartitionPtr;
			auto v1 = sub_44AF80((void**)streamCollisionPartitionPtr, (void**)outCollisionPartitionPtr);
			DB_FindStreamDataOrInsert((void*)*varCollisionPartitionPtr, v1);
			Save_CollisionPartition(true);
		}
	}
}

void Save_CollisionPartitionPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varCollisionPartitionPtr, sizeof(CollisionPartition*) * count, (void**)&outCollisionPartitionPtr);
	for (int i = 0; i < count; i++)
	{
		Save_CollisionPartitionPtr(false);
		varCollisionPartitionPtr++;
		outCollisionPartitionPtr++;
		streamCollisionPartitionPtr++;
	}
}

void Save_ComPrimaryLight(bool atStreamStart)
{
	// todo!
}

void Save_ComPrimaryLightArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varComPrimaryLight, sizeof(ComPrimaryLight) * count, (void**)&outComPrimaryLight);
	for (int i = 0; i < count; i++)
	{
		Save_ComPrimaryLight(false);
		varComPrimaryLight++;
		outComPrimaryLight++;
		streamComPrimaryLight++;
	}
}

void Save_ComPrimaryLightPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varComPrimaryLightPtr, sizeof(ComPrimaryLight*), (void**)&outComPrimaryLightPtr);
	if (*varComPrimaryLightPtr)
	{
		*outComPrimaryLightPtr = (ComPrimaryLight*)DB_FindStreamData(*varComPrimaryLightPtr);
		assert(*outComPrimaryLightPtr != (ComPrimaryLight*)0xFFFFFFFF);
		if (!*outComPrimaryLightPtr)
		{
			*outComPrimaryLightPtr = AllocSave_ComPrimaryLight();
			varComPrimaryLight = *varComPrimaryLightPtr;
			streamComPrimaryLight = *outComPrimaryLightPtr;
			auto v1 = sub_44AF80((void**)streamComPrimaryLightPtr, (void**)outComPrimaryLightPtr);
			DB_FindStreamDataOrInsert((void*)*varComPrimaryLightPtr, v1);
			Save_ComPrimaryLight(true);
		}
	}
}

void Save_ComPrimaryLightPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varComPrimaryLightPtr, sizeof(ComPrimaryLight*) * count, (void**)&outComPrimaryLightPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ComPrimaryLightPtr(false);
		varComPrimaryLightPtr++;
		outComPrimaryLightPtr++;
		streamComPrimaryLightPtr++;
	}
}

void Save_ComWorld(bool atStreamStart)
{
	// todo!
}

void Save_ComWorldArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varComWorld, sizeof(ComWorld) * count, (void**)&outComWorld);
	for (int i = 0; i < count; i++)
	{
		Save_ComWorld(false);
		varComWorld++;
		outComWorld++;
		streamComWorld++;
	}
}

void Save_ComWorldAsset(ComWorld** asset)
{
	// todo!
}

void Save_ComWorldPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varComWorldPtr, sizeof(ComWorld*), (void**)&outComWorldPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varComWorldPtr)
	{
		*outComWorldPtr = (ComWorld*)DB_FindStreamData(*varComWorldPtr);
		assert(*outComWorldPtr != (ComWorld*)0xFFFFFFFF);
		if (!*outComWorldPtr)
		{
			*outComWorldPtr = AllocSave_ComWorld();
			varComWorld = *varComWorldPtr;
			streamComWorld = *outComWorldPtr;
			auto v1 = sub_44AF80((void**)streamComWorldPtr, (void**)outComWorldPtr);
			DB_FindStreamDataOrInsert((void*)*varComWorldPtr, v1);
			Save_ComWorld(true);
		}
	}
	DB_PopStreamPos();
}

void Save_ComWorldPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varComWorldPtr, sizeof(ComWorld*) * count, (void**)&outComWorldPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ComWorldPtr(false);
		varComWorldPtr++;
		outComWorldPtr++;
		streamComWorldPtr++;
	}
}

void Save_ConditionalScript(bool atStreamStart)
{
	// todo!
}

void Save_ConditionalScriptArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varConditionalScript, sizeof(ConditionalScript) * count, (void**)&outConditionalScript);
	for (int i = 0; i < count; i++)
	{
		Save_ConditionalScript(false);
		varConditionalScript++;
		outConditionalScript++;
		streamConditionalScript++;
	}
}

void Save_ConditionalScriptPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varConditionalScriptPtr, sizeof(ConditionalScript*), (void**)&outConditionalScriptPtr);
	if (*varConditionalScriptPtr)
	{
		*outConditionalScriptPtr = (ConditionalScript*)DB_FindStreamData(*varConditionalScriptPtr);
		assert(*outConditionalScriptPtr != (ConditionalScript*)0xFFFFFFFF);
		if (!*outConditionalScriptPtr)
		{
			*outConditionalScriptPtr = AllocSave_ConditionalScript();
			varConditionalScript = *varConditionalScriptPtr;
			streamConditionalScript = *outConditionalScriptPtr;
			auto v1 = sub_44AF80((void**)streamConditionalScriptPtr, (void**)outConditionalScriptPtr);
			DB_FindStreamDataOrInsert((void*)*varConditionalScriptPtr, v1);
			Save_ConditionalScript(true);
		}
	}
}

void Save_ConditionalScriptPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varConditionalScriptPtr, sizeof(ConditionalScript*) * count, (void**)&outConditionalScriptPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ConditionalScriptPtr(false);
		varConditionalScriptPtr++;
		outConditionalScriptPtr++;
		streamConditionalScriptPtr++;
	}
}

void Save_DObjAnimMat(bool atStreamStart)
{
	// todo!
}

void Save_DObjAnimMatArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDObjAnimMat, sizeof(DObjAnimMat) * count, (void**)&outDObjAnimMat);
	for (int i = 0; i < count; i++)
	{
		Save_DObjAnimMat(false);
		varDObjAnimMat++;
		outDObjAnimMat++;
		streamDObjAnimMat++;
	}
}

void Save_DObjAnimMatPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varDObjAnimMatPtr, sizeof(DObjAnimMat*), (void**)&outDObjAnimMatPtr);
	if (*varDObjAnimMatPtr)
	{
		*outDObjAnimMatPtr = (DObjAnimMat*)DB_FindStreamData(*varDObjAnimMatPtr);
		assert(*outDObjAnimMatPtr != (DObjAnimMat*)0xFFFFFFFF);
		if (!*outDObjAnimMatPtr)
		{
			*outDObjAnimMatPtr = AllocSave_DObjAnimMat();
			varDObjAnimMat = *varDObjAnimMatPtr;
			streamDObjAnimMat = *outDObjAnimMatPtr;
			auto v1 = sub_44AF80((void**)streamDObjAnimMatPtr, (void**)outDObjAnimMatPtr);
			DB_FindStreamDataOrInsert((void*)*varDObjAnimMatPtr, v1);
			Save_DObjAnimMat(true);
		}
	}
}

void Save_DObjAnimMatPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDObjAnimMatPtr, sizeof(DObjAnimMat*) * count, (void**)&outDObjAnimMatPtr);
	for (int i = 0; i < count; i++)
	{
		Save_DObjAnimMatPtr(false);
		varDObjAnimMatPtr++;
		outDObjAnimMatPtr++;
		streamDObjAnimMatPtr++;
	}
}

void Save_DynEntityClient(bool atStreamStart)
{
	// todo!
}

void Save_DynEntityClientArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDynEntityClient, sizeof(DynEntityClient) * count, (void**)&outDynEntityClient);
	for (int i = 0; i < count; i++)
	{
		Save_DynEntityClient(false);
		varDynEntityClient++;
		outDynEntityClient++;
		streamDynEntityClient++;
	}
}

void Save_DynEntityClientPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varDynEntityClientPtr, sizeof(DynEntityClient*), (void**)&outDynEntityClientPtr);
	if (*varDynEntityClientPtr)
	{
		*outDynEntityClientPtr = (DynEntityClient*)DB_FindStreamData(*varDynEntityClientPtr);
		assert(*outDynEntityClientPtr != (DynEntityClient*)0xFFFFFFFF);
		if (!*outDynEntityClientPtr)
		{
			*outDynEntityClientPtr = AllocSave_DynEntityClient();
			varDynEntityClient = *varDynEntityClientPtr;
			streamDynEntityClient = *outDynEntityClientPtr;
			auto v1 = sub_44AF80((void**)streamDynEntityClientPtr, (void**)outDynEntityClientPtr);
			DB_FindStreamDataOrInsert((void*)*varDynEntityClientPtr, v1);
			Save_DynEntityClient(true);
		}
	}
}

void Save_DynEntityClientPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDynEntityClientPtr, sizeof(DynEntityClient*) * count, (void**)&outDynEntityClientPtr);
	for (int i = 0; i < count; i++)
	{
		Save_DynEntityClientPtr(false);
		varDynEntityClientPtr++;
		outDynEntityClientPtr++;
		streamDynEntityClientPtr++;
	}
}

void Save_DynEntityColl(bool atStreamStart)
{
	// todo!
}

void Save_DynEntityCollArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDynEntityColl, sizeof(DynEntityColl) * count, (void**)&outDynEntityColl);
	for (int i = 0; i < count; i++)
	{
		Save_DynEntityColl(false);
		varDynEntityColl++;
		outDynEntityColl++;
		streamDynEntityColl++;
	}
}

void Save_DynEntityCollPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varDynEntityCollPtr, sizeof(DynEntityColl*), (void**)&outDynEntityCollPtr);
	if (*varDynEntityCollPtr)
	{
		*outDynEntityCollPtr = (DynEntityColl*)DB_FindStreamData(*varDynEntityCollPtr);
		assert(*outDynEntityCollPtr != (DynEntityColl*)0xFFFFFFFF);
		if (!*outDynEntityCollPtr)
		{
			*outDynEntityCollPtr = AllocSave_DynEntityColl();
			varDynEntityColl = *varDynEntityCollPtr;
			streamDynEntityColl = *outDynEntityCollPtr;
			auto v1 = sub_44AF80((void**)streamDynEntityCollPtr, (void**)outDynEntityCollPtr);
			DB_FindStreamDataOrInsert((void*)*varDynEntityCollPtr, v1);
			Save_DynEntityColl(true);
		}
	}
}

void Save_DynEntityCollPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDynEntityCollPtr, sizeof(DynEntityColl*) * count, (void**)&outDynEntityCollPtr);
	for (int i = 0; i < count; i++)
	{
		Save_DynEntityCollPtr(false);
		varDynEntityCollPtr++;
		outDynEntityCollPtr++;
		streamDynEntityCollPtr++;
	}
}

void Save_DynEntityDef(bool atStreamStart)
{
	// todo!
}

void Save_DynEntityDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDynEntityDef, sizeof(DynEntityDef) * count, (void**)&outDynEntityDef);
	for (int i = 0; i < count; i++)
	{
		Save_DynEntityDef(false);
		varDynEntityDef++;
		outDynEntityDef++;
		streamDynEntityDef++;
	}
}

void Save_DynEntityDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varDynEntityDefPtr, sizeof(DynEntityDef*), (void**)&outDynEntityDefPtr);
	if (*varDynEntityDefPtr)
	{
		*outDynEntityDefPtr = (DynEntityDef*)DB_FindStreamData(*varDynEntityDefPtr);
		assert(*outDynEntityDefPtr != (DynEntityDef*)0xFFFFFFFF);
		if (!*outDynEntityDefPtr)
		{
			*outDynEntityDefPtr = AllocSave_DynEntityDef();
			varDynEntityDef = *varDynEntityDefPtr;
			streamDynEntityDef = *outDynEntityDefPtr;
			auto v1 = sub_44AF80((void**)streamDynEntityDefPtr, (void**)outDynEntityDefPtr);
			DB_FindStreamDataOrInsert((void*)*varDynEntityDefPtr, v1);
			Save_DynEntityDef(true);
		}
	}
}

void Save_DynEntityDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDynEntityDefPtr, sizeof(DynEntityDef*) * count, (void**)&outDynEntityDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_DynEntityDefPtr(false);
		varDynEntityDefPtr++;
		outDynEntityDefPtr++;
		streamDynEntityDefPtr++;
	}
}

void Save_DynEntityPose(bool atStreamStart)
{
	// todo!
}

void Save_DynEntityPoseArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDynEntityPose, sizeof(DynEntityPose) * count, (void**)&outDynEntityPose);
	for (int i = 0; i < count; i++)
	{
		Save_DynEntityPose(false);
		varDynEntityPose++;
		outDynEntityPose++;
		streamDynEntityPose++;
	}
}

void Save_DynEntityPosePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varDynEntityPosePtr, sizeof(DynEntityPose*), (void**)&outDynEntityPosePtr);
	if (*varDynEntityPosePtr)
	{
		*outDynEntityPosePtr = (DynEntityPose*)DB_FindStreamData(*varDynEntityPosePtr);
		assert(*outDynEntityPosePtr != (DynEntityPose*)0xFFFFFFFF);
		if (!*outDynEntityPosePtr)
		{
			*outDynEntityPosePtr = AllocSave_DynEntityPose();
			varDynEntityPose = *varDynEntityPosePtr;
			streamDynEntityPose = *outDynEntityPosePtr;
			auto v1 = sub_44AF80((void**)streamDynEntityPosePtr, (void**)outDynEntityPosePtr);
			DB_FindStreamDataOrInsert((void*)*varDynEntityPosePtr, v1);
			Save_DynEntityPose(true);
		}
	}
}

void Save_DynEntityPosePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varDynEntityPosePtr, sizeof(DynEntityPose*) * count, (void**)&outDynEntityPosePtr);
	for (int i = 0; i < count; i++)
	{
		Save_DynEntityPosePtr(false);
		varDynEntityPosePtr++;
		outDynEntityPosePtr++;
		streamDynEntityPosePtr++;
	}
}

void Save_EventData(bool atStreamStart)
{
	// todo!
}

void Save_EventDataArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varEventData, sizeof(EventData) * count, (void**)&outEventData);
	for (int i = 0; i < count; i++)
	{
		Save_EventData(false);
		varEventData++;
		outEventData++;
		streamEventData++;
	}
}

void Save_EventDataPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varEventDataPtr, sizeof(EventData*), (void**)&outEventDataPtr);
	if (*varEventDataPtr)
	{
		*outEventDataPtr = (EventData*)DB_FindStreamData(*varEventDataPtr);
		assert(*outEventDataPtr != (EventData*)0xFFFFFFFF);
		if (!*outEventDataPtr)
		{
			*outEventDataPtr = AllocSave_EventData();
			varEventData = *varEventDataPtr;
			streamEventData = *outEventDataPtr;
			auto v1 = sub_44AF80((void**)streamEventDataPtr, (void**)outEventDataPtr);
			DB_FindStreamDataOrInsert((void*)*varEventDataPtr, v1);
			Save_EventData(true);
		}
	}
}

void Save_EventDataPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varEventDataPtr, sizeof(EventData*) * count, (void**)&outEventDataPtr);
	for (int i = 0; i < count; i++)
	{
		Save_EventDataPtr(false);
		varEventDataPtr++;
		outEventDataPtr++;
		streamEventDataPtr++;
	}
}

void Save_ExpressionString(bool atStreamStart)
{
	// todo!
}

void Save_ExpressionStringArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varExpressionString, sizeof(ExpressionString) * count, (void**)&outExpressionString);
	for (int i = 0; i < count; i++)
	{
		Save_ExpressionString(false);
		varExpressionString++;
		outExpressionString++;
		streamExpressionString++;
	}
}

void Save_ExpressionStringPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varExpressionStringPtr, sizeof(ExpressionString*), (void**)&outExpressionStringPtr);
	if (*varExpressionStringPtr)
	{
		*outExpressionStringPtr = (ExpressionString*)DB_FindStreamData(*varExpressionStringPtr);
		assert(*outExpressionStringPtr != (ExpressionString*)0xFFFFFFFF);
		if (!*outExpressionStringPtr)
		{
			*outExpressionStringPtr = AllocSave_ExpressionString();
			varExpressionString = *varExpressionStringPtr;
			streamExpressionString = *outExpressionStringPtr;
			auto v1 = sub_44AF80((void**)streamExpressionStringPtr, (void**)outExpressionStringPtr);
			DB_FindStreamDataOrInsert((void*)*varExpressionStringPtr, v1);
			Save_ExpressionString(true);
		}
	}
}

void Save_ExpressionStringPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varExpressionStringPtr, sizeof(ExpressionString*) * count, (void**)&outExpressionStringPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ExpressionStringPtr(false);
		varExpressionStringPtr++;
		outExpressionStringPtr++;
		streamExpressionStringPtr++;
	}
}

void Save_ExpressionSupportingData(bool atStreamStart)
{
	// todo!
}

void Save_ExpressionSupportingDataArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varExpressionSupportingData, sizeof(ExpressionSupportingData) * count, (void**)&outExpressionSupportingData);
	for (int i = 0; i < count; i++)
	{
		Save_ExpressionSupportingData(false);
		varExpressionSupportingData++;
		outExpressionSupportingData++;
		streamExpressionSupportingData++;
	}
}

void Save_ExpressionSupportingDataPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varExpressionSupportingDataPtr, sizeof(ExpressionSupportingData*), (void**)&outExpressionSupportingDataPtr);
	if (*varExpressionSupportingDataPtr)
	{
		*outExpressionSupportingDataPtr = (ExpressionSupportingData*)DB_FindStreamData(*varExpressionSupportingDataPtr);
		assert(*outExpressionSupportingDataPtr != (ExpressionSupportingData*)0xFFFFFFFF);
		if (!*outExpressionSupportingDataPtr)
		{
			*outExpressionSupportingDataPtr = AllocSave_ExpressionSupportingData();
			varExpressionSupportingData = *varExpressionSupportingDataPtr;
			streamExpressionSupportingData = *outExpressionSupportingDataPtr;
			auto v1 = sub_44AF80((void**)streamExpressionSupportingDataPtr, (void**)outExpressionSupportingDataPtr);
			DB_FindStreamDataOrInsert((void*)*varExpressionSupportingDataPtr, v1);
			Save_ExpressionSupportingData(true);
		}
	}
}

void Save_ExpressionSupportingDataPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varExpressionSupportingDataPtr, sizeof(ExpressionSupportingData*) * count, (void**)&outExpressionSupportingDataPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ExpressionSupportingDataPtr(false);
		varExpressionSupportingDataPtr++;
		outExpressionSupportingDataPtr++;
		streamExpressionSupportingDataPtr++;
	}
}

void Save_Font_s(bool atStreamStart)
{
	// todo!
}

void Save_Font_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFont_s, sizeof(Font_s) * count, (void**)&outFont_s);
	for (int i = 0; i < count; i++)
	{
		Save_Font_s(false);
		varFont_s++;
		outFont_s++;
		streamFont_s++;
	}
}

void Save_Font_sAsset(Font_s** asset)
{
	// todo!
}

void Save_Font_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFont_sPtr, sizeof(Font_s*), (void**)&outFont_sPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varFont_sPtr)
	{
		*outFont_sPtr = (Font_s*)DB_FindStreamData(*varFont_sPtr);
		assert(*outFont_sPtr != (Font_s*)0xFFFFFFFF);
		if (!*outFont_sPtr)
		{
			*outFont_sPtr = AllocSave_Font_s();
			varFont_s = *varFont_sPtr;
			streamFont_s = *outFont_sPtr;
			auto v1 = sub_44AF80((void**)streamFont_sPtr, (void**)outFont_sPtr);
			DB_FindStreamDataOrInsert((void*)*varFont_sPtr, v1);
			Save_Font_s(true);
		}
	}
	DB_PopStreamPos();
}

void Save_Font_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFont_sPtr, sizeof(Font_s*) * count, (void**)&outFont_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_Font_sPtr(false);
		varFont_sPtr++;
		outFont_sPtr++;
		streamFont_sPtr++;
	}
}

void Save_FxEffectDef(bool atStreamStart)
{
	// todo!
}

void Save_FxEffectDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxEffectDef, sizeof(FxEffectDef) * count, (void**)&outFxEffectDef);
	for (int i = 0; i < count; i++)
	{
		Save_FxEffectDef(false);
		varFxEffectDef++;
		outFxEffectDef++;
		streamFxEffectDef++;
	}
}

void Save_FxEffectDefAsset(FxEffectDef** asset)
{
	// todo!
}

void Save_FxEffectDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxEffectDefPtr, sizeof(FxEffectDef*), (void**)&outFxEffectDefPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varFxEffectDefPtr)
	{
		*outFxEffectDefPtr = (FxEffectDef*)DB_FindStreamData(*varFxEffectDefPtr);
		assert(*outFxEffectDefPtr != (FxEffectDef*)0xFFFFFFFF);
		if (!*outFxEffectDefPtr)
		{
			*outFxEffectDefPtr = AllocSave_FxEffectDef();
			varFxEffectDef = *varFxEffectDefPtr;
			streamFxEffectDef = *outFxEffectDefPtr;
			auto v1 = sub_44AF80((void**)streamFxEffectDefPtr, (void**)outFxEffectDefPtr);
			DB_FindStreamDataOrInsert((void*)*varFxEffectDefPtr, v1);
			Save_FxEffectDef(true);
		}
	}
	DB_PopStreamPos();
}

void Save_FxEffectDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxEffectDefPtr, sizeof(FxEffectDef*) * count, (void**)&outFxEffectDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxEffectDefPtr(false);
		varFxEffectDefPtr++;
		outFxEffectDefPtr++;
		streamFxEffectDefPtr++;
	}
}

void Save_FxEffectDefRef(bool atStreamStart)
{
	// todo!
}

void Save_FxEffectDefRefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxEffectDefRef, sizeof(FxEffectDefRef) * count, (void**)&outFxEffectDefRef);
	for (int i = 0; i < count; i++)
	{
		Save_FxEffectDefRef(false);
		varFxEffectDefRef++;
		outFxEffectDefRef++;
		streamFxEffectDefRef++;
	}
}

void Save_FxEffectDefRefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxEffectDefRefPtr, sizeof(FxEffectDefRef*), (void**)&outFxEffectDefRefPtr);
	if (*varFxEffectDefRefPtr)
	{
		*outFxEffectDefRefPtr = (FxEffectDefRef*)DB_FindStreamData(*varFxEffectDefRefPtr);
		assert(*outFxEffectDefRefPtr != (FxEffectDefRef*)0xFFFFFFFF);
		if (!*outFxEffectDefRefPtr)
		{
			*outFxEffectDefRefPtr = AllocSave_FxEffectDefRef();
			varFxEffectDefRef = *varFxEffectDefRefPtr;
			streamFxEffectDefRef = *outFxEffectDefRefPtr;
			auto v1 = sub_44AF80((void**)streamFxEffectDefRefPtr, (void**)outFxEffectDefRefPtr);
			DB_FindStreamDataOrInsert((void*)*varFxEffectDefRefPtr, v1);
			Save_FxEffectDefRef(true);
		}
	}
}

void Save_FxEffectDefRefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxEffectDefRefPtr, sizeof(FxEffectDefRef*) * count, (void**)&outFxEffectDefRefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxEffectDefRefPtr(false);
		varFxEffectDefRefPtr++;
		outFxEffectDefRefPtr++;
		streamFxEffectDefRefPtr++;
	}
}

void Save_FxElemAtlas(bool atStreamStart)
{
	// todo!
}

void Save_FxElemAtlasArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemAtlas, sizeof(FxElemAtlas) * count, (void**)&outFxElemAtlas);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemAtlas(false);
		varFxElemAtlas++;
		outFxElemAtlas++;
		streamFxElemAtlas++;
	}
}

void Save_FxElemAtlasPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemAtlasPtr, sizeof(FxElemAtlas*), (void**)&outFxElemAtlasPtr);
	if (*varFxElemAtlasPtr)
	{
		*outFxElemAtlasPtr = (FxElemAtlas*)DB_FindStreamData(*varFxElemAtlasPtr);
		assert(*outFxElemAtlasPtr != (FxElemAtlas*)0xFFFFFFFF);
		if (!*outFxElemAtlasPtr)
		{
			*outFxElemAtlasPtr = AllocSave_FxElemAtlas();
			varFxElemAtlas = *varFxElemAtlasPtr;
			streamFxElemAtlas = *outFxElemAtlasPtr;
			auto v1 = sub_44AF80((void**)streamFxElemAtlasPtr, (void**)outFxElemAtlasPtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemAtlasPtr, v1);
			Save_FxElemAtlas(true);
		}
	}
}

void Save_FxElemAtlasPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemAtlasPtr, sizeof(FxElemAtlas*) * count, (void**)&outFxElemAtlasPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemAtlasPtr(false);
		varFxElemAtlasPtr++;
		outFxElemAtlasPtr++;
		streamFxElemAtlasPtr++;
	}
}

void Save_FxElemDef(bool atStreamStart)
{
	// todo!
}

void Save_FxElemDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemDef, sizeof(FxElemDef) * count, (void**)&outFxElemDef);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemDef(false);
		varFxElemDef++;
		outFxElemDef++;
		streamFxElemDef++;
	}
}

void Save_FxElemDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemDefPtr, sizeof(FxElemDef*), (void**)&outFxElemDefPtr);
	if (*varFxElemDefPtr)
	{
		*outFxElemDefPtr = (FxElemDef*)DB_FindStreamData(*varFxElemDefPtr);
		assert(*outFxElemDefPtr != (FxElemDef*)0xFFFFFFFF);
		if (!*outFxElemDefPtr)
		{
			*outFxElemDefPtr = AllocSave_FxElemDef();
			varFxElemDef = *varFxElemDefPtr;
			streamFxElemDef = *outFxElemDefPtr;
			auto v1 = sub_44AF80((void**)streamFxElemDefPtr, (void**)outFxElemDefPtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemDefPtr, v1);
			Save_FxElemDef(true);
		}
	}
}

void Save_FxElemDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemDefPtr, sizeof(FxElemDef*) * count, (void**)&outFxElemDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemDefPtr(false);
		varFxElemDefPtr++;
		outFxElemDefPtr++;
		streamFxElemDefPtr++;
	}
}

void Save_FxElemDefVisuals(bool atStreamStart)
{
	// todo!
}

void Save_FxElemDefVisualsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemDefVisuals, sizeof(FxElemDefVisuals) * count, (void**)&outFxElemDefVisuals);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemDefVisuals(false);
		varFxElemDefVisuals++;
		outFxElemDefVisuals++;
		streamFxElemDefVisuals++;
	}
}

void Save_FxElemDefVisualsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemDefVisualsPtr, sizeof(FxElemDefVisuals*), (void**)&outFxElemDefVisualsPtr);
	if (*varFxElemDefVisualsPtr)
	{
		*outFxElemDefVisualsPtr = (FxElemDefVisuals*)DB_FindStreamData(*varFxElemDefVisualsPtr);
		assert(*outFxElemDefVisualsPtr != (FxElemDefVisuals*)0xFFFFFFFF);
		if (!*outFxElemDefVisualsPtr)
		{
			*outFxElemDefVisualsPtr = AllocSave_FxElemDefVisuals();
			varFxElemDefVisuals = *varFxElemDefVisualsPtr;
			streamFxElemDefVisuals = *outFxElemDefVisualsPtr;
			auto v1 = sub_44AF80((void**)streamFxElemDefVisualsPtr, (void**)outFxElemDefVisualsPtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemDefVisualsPtr, v1);
			Save_FxElemDefVisuals(true);
		}
	}
}

void Save_FxElemDefVisualsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemDefVisualsPtr, sizeof(FxElemDefVisuals*) * count, (void**)&outFxElemDefVisualsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemDefVisualsPtr(false);
		varFxElemDefVisualsPtr++;
		outFxElemDefVisualsPtr++;
		streamFxElemDefVisualsPtr++;
	}
}

void Save_FxElemExtendedDefPtr(bool atStreamStart)
{
	// todo!
}

void Save_FxElemExtendedDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemExtendedDefPtr, sizeof(FxElemExtendedDefPtr) * count, (void**)&outFxElemExtendedDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemExtendedDefPtr(false);
		varFxElemExtendedDefPtr++;
		outFxElemExtendedDefPtr++;
		streamFxElemExtendedDefPtr++;
	}
}

void Save_FxElemExtendedDefPtrPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemExtendedDefPtrPtr, sizeof(FxElemExtendedDefPtr*), (void**)&outFxElemExtendedDefPtrPtr);
	if (*varFxElemExtendedDefPtrPtr)
	{
		*outFxElemExtendedDefPtrPtr = (FxElemExtendedDefPtr*)DB_FindStreamData(*varFxElemExtendedDefPtrPtr);
		assert(*outFxElemExtendedDefPtrPtr != (FxElemExtendedDefPtr*)0xFFFFFFFF);
		if (!*outFxElemExtendedDefPtrPtr)
		{
			*outFxElemExtendedDefPtrPtr = AllocSave_FxElemExtendedDefPtr();
			varFxElemExtendedDefPtr = *varFxElemExtendedDefPtrPtr;
			streamFxElemExtendedDefPtr = *outFxElemExtendedDefPtrPtr;
			auto v1 = sub_44AF80((void**)streamFxElemExtendedDefPtrPtr, (void**)outFxElemExtendedDefPtrPtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemExtendedDefPtrPtr, v1);
			Save_FxElemExtendedDefPtr(true);
		}
	}
}

void Save_FxElemExtendedDefPtrPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemExtendedDefPtrPtr, sizeof(FxElemExtendedDefPtr*) * count, (void**)&outFxElemExtendedDefPtrPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemExtendedDefPtrPtr(false);
		varFxElemExtendedDefPtrPtr++;
		outFxElemExtendedDefPtrPtr++;
		streamFxElemExtendedDefPtrPtr++;
	}
}

void Save_FxElemMarkVisuals(bool atStreamStart)
{
	// todo!
}

void Save_FxElemMarkVisualsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemMarkVisuals, sizeof(FxElemMarkVisuals) * count, (void**)&outFxElemMarkVisuals);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemMarkVisuals(false);
		varFxElemMarkVisuals++;
		outFxElemMarkVisuals++;
		streamFxElemMarkVisuals++;
	}
}

void Save_FxElemMarkVisualsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemMarkVisualsPtr, sizeof(FxElemMarkVisuals*), (void**)&outFxElemMarkVisualsPtr);
	if (*varFxElemMarkVisualsPtr)
	{
		*outFxElemMarkVisualsPtr = (FxElemMarkVisuals*)DB_FindStreamData(*varFxElemMarkVisualsPtr);
		assert(*outFxElemMarkVisualsPtr != (FxElemMarkVisuals*)0xFFFFFFFF);
		if (!*outFxElemMarkVisualsPtr)
		{
			*outFxElemMarkVisualsPtr = AllocSave_FxElemMarkVisuals();
			varFxElemMarkVisuals = *varFxElemMarkVisualsPtr;
			streamFxElemMarkVisuals = *outFxElemMarkVisualsPtr;
			auto v1 = sub_44AF80((void**)streamFxElemMarkVisualsPtr, (void**)outFxElemMarkVisualsPtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemMarkVisualsPtr, v1);
			Save_FxElemMarkVisuals(true);
		}
	}
}

void Save_FxElemMarkVisualsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemMarkVisualsPtr, sizeof(FxElemMarkVisuals*) * count, (void**)&outFxElemMarkVisualsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemMarkVisualsPtr(false);
		varFxElemMarkVisualsPtr++;
		outFxElemMarkVisualsPtr++;
		streamFxElemMarkVisualsPtr++;
	}
}

void Save_FxElemVec3Range(bool atStreamStart)
{
	// todo!
}

void Save_FxElemVec3RangeArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVec3Range, sizeof(FxElemVec3Range) * count, (void**)&outFxElemVec3Range);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVec3Range(false);
		varFxElemVec3Range++;
		outFxElemVec3Range++;
		streamFxElemVec3Range++;
	}
}

void Save_FxElemVec3RangePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemVec3RangePtr, sizeof(FxElemVec3Range*), (void**)&outFxElemVec3RangePtr);
	if (*varFxElemVec3RangePtr)
	{
		*outFxElemVec3RangePtr = (FxElemVec3Range*)DB_FindStreamData(*varFxElemVec3RangePtr);
		assert(*outFxElemVec3RangePtr != (FxElemVec3Range*)0xFFFFFFFF);
		if (!*outFxElemVec3RangePtr)
		{
			*outFxElemVec3RangePtr = AllocSave_FxElemVec3Range();
			varFxElemVec3Range = *varFxElemVec3RangePtr;
			streamFxElemVec3Range = *outFxElemVec3RangePtr;
			auto v1 = sub_44AF80((void**)streamFxElemVec3RangePtr, (void**)outFxElemVec3RangePtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemVec3RangePtr, v1);
			Save_FxElemVec3Range(true);
		}
	}
}

void Save_FxElemVec3RangePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVec3RangePtr, sizeof(FxElemVec3Range*) * count, (void**)&outFxElemVec3RangePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVec3RangePtr(false);
		varFxElemVec3RangePtr++;
		outFxElemVec3RangePtr++;
		streamFxElemVec3RangePtr++;
	}
}

void Save_FxElemVelStateInFrame(bool atStreamStart)
{
	// todo!
}

void Save_FxElemVelStateInFrameArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVelStateInFrame, sizeof(FxElemVelStateInFrame) * count, (void**)&outFxElemVelStateInFrame);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVelStateInFrame(false);
		varFxElemVelStateInFrame++;
		outFxElemVelStateInFrame++;
		streamFxElemVelStateInFrame++;
	}
}

void Save_FxElemVelStateInFramePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemVelStateInFramePtr, sizeof(FxElemVelStateInFrame*), (void**)&outFxElemVelStateInFramePtr);
	if (*varFxElemVelStateInFramePtr)
	{
		*outFxElemVelStateInFramePtr = (FxElemVelStateInFrame*)DB_FindStreamData(*varFxElemVelStateInFramePtr);
		assert(*outFxElemVelStateInFramePtr != (FxElemVelStateInFrame*)0xFFFFFFFF);
		if (!*outFxElemVelStateInFramePtr)
		{
			*outFxElemVelStateInFramePtr = AllocSave_FxElemVelStateInFrame();
			varFxElemVelStateInFrame = *varFxElemVelStateInFramePtr;
			streamFxElemVelStateInFrame = *outFxElemVelStateInFramePtr;
			auto v1 = sub_44AF80((void**)streamFxElemVelStateInFramePtr, (void**)outFxElemVelStateInFramePtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemVelStateInFramePtr, v1);
			Save_FxElemVelStateInFrame(true);
		}
	}
}

void Save_FxElemVelStateInFramePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVelStateInFramePtr, sizeof(FxElemVelStateInFrame*) * count, (void**)&outFxElemVelStateInFramePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVelStateInFramePtr(false);
		varFxElemVelStateInFramePtr++;
		outFxElemVelStateInFramePtr++;
		streamFxElemVelStateInFramePtr++;
	}
}

void Save_FxElemVelStateSample(bool atStreamStart)
{
	// todo!
}

void Save_FxElemVelStateSampleArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVelStateSample, sizeof(FxElemVelStateSample) * count, (void**)&outFxElemVelStateSample);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVelStateSample(false);
		varFxElemVelStateSample++;
		outFxElemVelStateSample++;
		streamFxElemVelStateSample++;
	}
}

void Save_FxElemVelStateSamplePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemVelStateSamplePtr, sizeof(FxElemVelStateSample*), (void**)&outFxElemVelStateSamplePtr);
	if (*varFxElemVelStateSamplePtr)
	{
		*outFxElemVelStateSamplePtr = (FxElemVelStateSample*)DB_FindStreamData(*varFxElemVelStateSamplePtr);
		assert(*outFxElemVelStateSamplePtr != (FxElemVelStateSample*)0xFFFFFFFF);
		if (!*outFxElemVelStateSamplePtr)
		{
			*outFxElemVelStateSamplePtr = AllocSave_FxElemVelStateSample();
			varFxElemVelStateSample = *varFxElemVelStateSamplePtr;
			streamFxElemVelStateSample = *outFxElemVelStateSamplePtr;
			auto v1 = sub_44AF80((void**)streamFxElemVelStateSamplePtr, (void**)outFxElemVelStateSamplePtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemVelStateSamplePtr, v1);
			Save_FxElemVelStateSample(true);
		}
	}
}

void Save_FxElemVelStateSamplePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVelStateSamplePtr, sizeof(FxElemVelStateSample*) * count, (void**)&outFxElemVelStateSamplePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVelStateSamplePtr(false);
		varFxElemVelStateSamplePtr++;
		outFxElemVelStateSamplePtr++;
		streamFxElemVelStateSamplePtr++;
	}
}

void Save_FxElemVisStateSample(bool atStreamStart)
{
	// todo!
}

void Save_FxElemVisStateSampleArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVisStateSample, sizeof(FxElemVisStateSample) * count, (void**)&outFxElemVisStateSample);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVisStateSample(false);
		varFxElemVisStateSample++;
		outFxElemVisStateSample++;
		streamFxElemVisStateSample++;
	}
}

void Save_FxElemVisStateSamplePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemVisStateSamplePtr, sizeof(FxElemVisStateSample*), (void**)&outFxElemVisStateSamplePtr);
	if (*varFxElemVisStateSamplePtr)
	{
		*outFxElemVisStateSamplePtr = (FxElemVisStateSample*)DB_FindStreamData(*varFxElemVisStateSamplePtr);
		assert(*outFxElemVisStateSamplePtr != (FxElemVisStateSample*)0xFFFFFFFF);
		if (!*outFxElemVisStateSamplePtr)
		{
			*outFxElemVisStateSamplePtr = AllocSave_FxElemVisStateSample();
			varFxElemVisStateSample = *varFxElemVisStateSamplePtr;
			streamFxElemVisStateSample = *outFxElemVisStateSamplePtr;
			auto v1 = sub_44AF80((void**)streamFxElemVisStateSamplePtr, (void**)outFxElemVisStateSamplePtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemVisStateSamplePtr, v1);
			Save_FxElemVisStateSample(true);
		}
	}
}

void Save_FxElemVisStateSamplePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVisStateSamplePtr, sizeof(FxElemVisStateSample*) * count, (void**)&outFxElemVisStateSamplePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVisStateSamplePtr(false);
		varFxElemVisStateSamplePtr++;
		outFxElemVisStateSamplePtr++;
		streamFxElemVisStateSamplePtr++;
	}
}

void Save_FxElemVisualState(bool atStreamStart)
{
	// todo!
}

void Save_FxElemVisualStateArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVisualState, sizeof(FxElemVisualState) * count, (void**)&outFxElemVisualState);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVisualState(false);
		varFxElemVisualState++;
		outFxElemVisualState++;
		streamFxElemVisualState++;
	}
}

void Save_FxElemVisualStatePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemVisualStatePtr, sizeof(FxElemVisualState*), (void**)&outFxElemVisualStatePtr);
	if (*varFxElemVisualStatePtr)
	{
		*outFxElemVisualStatePtr = (FxElemVisualState*)DB_FindStreamData(*varFxElemVisualStatePtr);
		assert(*outFxElemVisualStatePtr != (FxElemVisualState*)0xFFFFFFFF);
		if (!*outFxElemVisualStatePtr)
		{
			*outFxElemVisualStatePtr = AllocSave_FxElemVisualState();
			varFxElemVisualState = *varFxElemVisualStatePtr;
			streamFxElemVisualState = *outFxElemVisualStatePtr;
			auto v1 = sub_44AF80((void**)streamFxElemVisualStatePtr, (void**)outFxElemVisualStatePtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemVisualStatePtr, v1);
			Save_FxElemVisualState(true);
		}
	}
}

void Save_FxElemVisualStatePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVisualStatePtr, sizeof(FxElemVisualState*) * count, (void**)&outFxElemVisualStatePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVisualStatePtr(false);
		varFxElemVisualStatePtr++;
		outFxElemVisualStatePtr++;
		streamFxElemVisualStatePtr++;
	}
}

void Save_FxElemVisuals(bool atStreamStart)
{
	// todo!
}

void Save_FxElemVisualsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVisuals, sizeof(FxElemVisuals) * count, (void**)&outFxElemVisuals);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVisuals(false);
		varFxElemVisuals++;
		outFxElemVisuals++;
		streamFxElemVisuals++;
	}
}

void Save_FxElemVisualsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxElemVisualsPtr, sizeof(FxElemVisuals*), (void**)&outFxElemVisualsPtr);
	if (*varFxElemVisualsPtr)
	{
		*outFxElemVisualsPtr = (FxElemVisuals*)DB_FindStreamData(*varFxElemVisualsPtr);
		assert(*outFxElemVisualsPtr != (FxElemVisuals*)0xFFFFFFFF);
		if (!*outFxElemVisualsPtr)
		{
			*outFxElemVisualsPtr = AllocSave_FxElemVisuals();
			varFxElemVisuals = *varFxElemVisualsPtr;
			streamFxElemVisuals = *outFxElemVisualsPtr;
			auto v1 = sub_44AF80((void**)streamFxElemVisualsPtr, (void**)outFxElemVisualsPtr);
			DB_FindStreamDataOrInsert((void*)*varFxElemVisualsPtr, v1);
			Save_FxElemVisuals(true);
		}
	}
}

void Save_FxElemVisualsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxElemVisualsPtr, sizeof(FxElemVisuals*) * count, (void**)&outFxElemVisualsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxElemVisualsPtr(false);
		varFxElemVisualsPtr++;
		outFxElemVisualsPtr++;
		streamFxElemVisualsPtr++;
	}
}

void Save_FxFloatRange(bool atStreamStart)
{
	// todo!
}

void Save_FxFloatRangeArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxFloatRange, sizeof(FxFloatRange) * count, (void**)&outFxFloatRange);
	for (int i = 0; i < count; i++)
	{
		Save_FxFloatRange(false);
		varFxFloatRange++;
		outFxFloatRange++;
		streamFxFloatRange++;
	}
}

void Save_FxFloatRangePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxFloatRangePtr, sizeof(FxFloatRange*), (void**)&outFxFloatRangePtr);
	if (*varFxFloatRangePtr)
	{
		*outFxFloatRangePtr = (FxFloatRange*)DB_FindStreamData(*varFxFloatRangePtr);
		assert(*outFxFloatRangePtr != (FxFloatRange*)0xFFFFFFFF);
		if (!*outFxFloatRangePtr)
		{
			*outFxFloatRangePtr = AllocSave_FxFloatRange();
			varFxFloatRange = *varFxFloatRangePtr;
			streamFxFloatRange = *outFxFloatRangePtr;
			auto v1 = sub_44AF80((void**)streamFxFloatRangePtr, (void**)outFxFloatRangePtr);
			DB_FindStreamDataOrInsert((void*)*varFxFloatRangePtr, v1);
			Save_FxFloatRange(true);
		}
	}
}

void Save_FxFloatRangePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxFloatRangePtr, sizeof(FxFloatRange*) * count, (void**)&outFxFloatRangePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxFloatRangePtr(false);
		varFxFloatRangePtr++;
		outFxFloatRangePtr++;
		streamFxFloatRangePtr++;
	}
}

void Save_FxGlassCrackHeader(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassCrackHeaderArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassCrackHeader, sizeof(FxGlassCrackHeader) * count, (void**)&outFxGlassCrackHeader);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassCrackHeader(false);
		varFxGlassCrackHeader++;
		outFxGlassCrackHeader++;
		streamFxGlassCrackHeader++;
	}
}

void Save_FxGlassCrackHeaderPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassCrackHeaderPtr, sizeof(FxGlassCrackHeader*), (void**)&outFxGlassCrackHeaderPtr);
	if (*varFxGlassCrackHeaderPtr)
	{
		*outFxGlassCrackHeaderPtr = (FxGlassCrackHeader*)DB_FindStreamData(*varFxGlassCrackHeaderPtr);
		assert(*outFxGlassCrackHeaderPtr != (FxGlassCrackHeader*)0xFFFFFFFF);
		if (!*outFxGlassCrackHeaderPtr)
		{
			*outFxGlassCrackHeaderPtr = AllocSave_FxGlassCrackHeader();
			varFxGlassCrackHeader = *varFxGlassCrackHeaderPtr;
			streamFxGlassCrackHeader = *outFxGlassCrackHeaderPtr;
			auto v1 = sub_44AF80((void**)streamFxGlassCrackHeaderPtr, (void**)outFxGlassCrackHeaderPtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassCrackHeaderPtr, v1);
			Save_FxGlassCrackHeader(true);
		}
	}
}

void Save_FxGlassCrackHeaderPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassCrackHeaderPtr, sizeof(FxGlassCrackHeader*) * count, (void**)&outFxGlassCrackHeaderPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassCrackHeaderPtr(false);
		varFxGlassCrackHeaderPtr++;
		outFxGlassCrackHeaderPtr++;
		streamFxGlassCrackHeaderPtr++;
	}
}

void Save_FxGlassDef(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassDef, sizeof(FxGlassDef) * count, (void**)&outFxGlassDef);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassDef(false);
		varFxGlassDef++;
		outFxGlassDef++;
		streamFxGlassDef++;
	}
}

void Save_FxGlassDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassDefPtr, sizeof(FxGlassDef*), (void**)&outFxGlassDefPtr);
	if (*varFxGlassDefPtr)
	{
		*outFxGlassDefPtr = (FxGlassDef*)DB_FindStreamData(*varFxGlassDefPtr);
		assert(*outFxGlassDefPtr != (FxGlassDef*)0xFFFFFFFF);
		if (!*outFxGlassDefPtr)
		{
			*outFxGlassDefPtr = AllocSave_FxGlassDef();
			varFxGlassDef = *varFxGlassDefPtr;
			streamFxGlassDef = *outFxGlassDefPtr;
			auto v1 = sub_44AF80((void**)streamFxGlassDefPtr, (void**)outFxGlassDefPtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassDefPtr, v1);
			Save_FxGlassDef(true);
		}
	}
}

void Save_FxGlassDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassDefPtr, sizeof(FxGlassDef*) * count, (void**)&outFxGlassDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassDefPtr(false);
		varFxGlassDefPtr++;
		outFxGlassDefPtr++;
		streamFxGlassDefPtr++;
	}
}

void Save_FxGlassGeometryData(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassGeometryDataArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassGeometryData, sizeof(FxGlassGeometryData) * count, (void**)&outFxGlassGeometryData);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassGeometryData(false);
		varFxGlassGeometryData++;
		outFxGlassGeometryData++;
		streamFxGlassGeometryData++;
	}
}

void Save_FxGlassGeometryDataPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassGeometryDataPtr, sizeof(FxGlassGeometryData*), (void**)&outFxGlassGeometryDataPtr);
	if (*varFxGlassGeometryDataPtr)
	{
		*outFxGlassGeometryDataPtr = (FxGlassGeometryData*)DB_FindStreamData(*varFxGlassGeometryDataPtr);
		assert(*outFxGlassGeometryDataPtr != (FxGlassGeometryData*)0xFFFFFFFF);
		if (!*outFxGlassGeometryDataPtr)
		{
			*outFxGlassGeometryDataPtr = AllocSave_FxGlassGeometryData();
			varFxGlassGeometryData = *varFxGlassGeometryDataPtr;
			streamFxGlassGeometryData = *outFxGlassGeometryDataPtr;
			auto v1 = sub_44AF80((void**)streamFxGlassGeometryDataPtr, (void**)outFxGlassGeometryDataPtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassGeometryDataPtr, v1);
			Save_FxGlassGeometryData(true);
		}
	}
}

void Save_FxGlassGeometryDataPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassGeometryDataPtr, sizeof(FxGlassGeometryData*) * count, (void**)&outFxGlassGeometryDataPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassGeometryDataPtr(false);
		varFxGlassGeometryDataPtr++;
		outFxGlassGeometryDataPtr++;
		streamFxGlassGeometryDataPtr++;
	}
}

void Save_FxGlassHoleHeader(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassHoleHeaderArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassHoleHeader, sizeof(FxGlassHoleHeader) * count, (void**)&outFxGlassHoleHeader);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassHoleHeader(false);
		varFxGlassHoleHeader++;
		outFxGlassHoleHeader++;
		streamFxGlassHoleHeader++;
	}
}

void Save_FxGlassHoleHeaderPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassHoleHeaderPtr, sizeof(FxGlassHoleHeader*), (void**)&outFxGlassHoleHeaderPtr);
	if (*varFxGlassHoleHeaderPtr)
	{
		*outFxGlassHoleHeaderPtr = (FxGlassHoleHeader*)DB_FindStreamData(*varFxGlassHoleHeaderPtr);
		assert(*outFxGlassHoleHeaderPtr != (FxGlassHoleHeader*)0xFFFFFFFF);
		if (!*outFxGlassHoleHeaderPtr)
		{
			*outFxGlassHoleHeaderPtr = AllocSave_FxGlassHoleHeader();
			varFxGlassHoleHeader = *varFxGlassHoleHeaderPtr;
			streamFxGlassHoleHeader = *outFxGlassHoleHeaderPtr;
			auto v1 = sub_44AF80((void**)streamFxGlassHoleHeaderPtr, (void**)outFxGlassHoleHeaderPtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassHoleHeaderPtr, v1);
			Save_FxGlassHoleHeader(true);
		}
	}
}

void Save_FxGlassHoleHeaderPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassHoleHeaderPtr, sizeof(FxGlassHoleHeader*) * count, (void**)&outFxGlassHoleHeaderPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassHoleHeaderPtr(false);
		varFxGlassHoleHeaderPtr++;
		outFxGlassHoleHeaderPtr++;
		streamFxGlassHoleHeaderPtr++;
	}
}

void Save_FxGlassInitPieceState(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassInitPieceStateArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassInitPieceState, sizeof(FxGlassInitPieceState) * count, (void**)&outFxGlassInitPieceState);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassInitPieceState(false);
		varFxGlassInitPieceState++;
		outFxGlassInitPieceState++;
		streamFxGlassInitPieceState++;
	}
}

void Save_FxGlassInitPieceStatePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassInitPieceStatePtr, sizeof(FxGlassInitPieceState*), (void**)&outFxGlassInitPieceStatePtr);
	if (*varFxGlassInitPieceStatePtr)
	{
		*outFxGlassInitPieceStatePtr = (FxGlassInitPieceState*)DB_FindStreamData(*varFxGlassInitPieceStatePtr);
		assert(*outFxGlassInitPieceStatePtr != (FxGlassInitPieceState*)0xFFFFFFFF);
		if (!*outFxGlassInitPieceStatePtr)
		{
			*outFxGlassInitPieceStatePtr = AllocSave_FxGlassInitPieceState();
			varFxGlassInitPieceState = *varFxGlassInitPieceStatePtr;
			streamFxGlassInitPieceState = *outFxGlassInitPieceStatePtr;
			auto v1 = sub_44AF80((void**)streamFxGlassInitPieceStatePtr, (void**)outFxGlassInitPieceStatePtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassInitPieceStatePtr, v1);
			Save_FxGlassInitPieceState(true);
		}
	}
}

void Save_FxGlassInitPieceStatePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassInitPieceStatePtr, sizeof(FxGlassInitPieceState*) * count, (void**)&outFxGlassInitPieceStatePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassInitPieceStatePtr(false);
		varFxGlassInitPieceStatePtr++;
		outFxGlassInitPieceStatePtr++;
		streamFxGlassInitPieceStatePtr++;
	}
}

void Save_FxGlassPieceDynamics(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassPieceDynamicsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassPieceDynamics, sizeof(FxGlassPieceDynamics) * count, (void**)&outFxGlassPieceDynamics);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassPieceDynamics(false);
		varFxGlassPieceDynamics++;
		outFxGlassPieceDynamics++;
		streamFxGlassPieceDynamics++;
	}
}

void Save_FxGlassPieceDynamicsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassPieceDynamicsPtr, sizeof(FxGlassPieceDynamics*), (void**)&outFxGlassPieceDynamicsPtr);
	if (*varFxGlassPieceDynamicsPtr)
	{
		*outFxGlassPieceDynamicsPtr = (FxGlassPieceDynamics*)DB_FindStreamData(*varFxGlassPieceDynamicsPtr);
		assert(*outFxGlassPieceDynamicsPtr != (FxGlassPieceDynamics*)0xFFFFFFFF);
		if (!*outFxGlassPieceDynamicsPtr)
		{
			*outFxGlassPieceDynamicsPtr = AllocSave_FxGlassPieceDynamics();
			varFxGlassPieceDynamics = *varFxGlassPieceDynamicsPtr;
			streamFxGlassPieceDynamics = *outFxGlassPieceDynamicsPtr;
			auto v1 = sub_44AF80((void**)streamFxGlassPieceDynamicsPtr, (void**)outFxGlassPieceDynamicsPtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassPieceDynamicsPtr, v1);
			Save_FxGlassPieceDynamics(true);
		}
	}
}

void Save_FxGlassPieceDynamicsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassPieceDynamicsPtr, sizeof(FxGlassPieceDynamics*) * count, (void**)&outFxGlassPieceDynamicsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassPieceDynamicsPtr(false);
		varFxGlassPieceDynamicsPtr++;
		outFxGlassPieceDynamicsPtr++;
		streamFxGlassPieceDynamicsPtr++;
	}
}

void Save_FxGlassPiecePlace(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassPiecePlaceArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassPiecePlace, sizeof(FxGlassPiecePlace) * count, (void**)&outFxGlassPiecePlace);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassPiecePlace(false);
		varFxGlassPiecePlace++;
		outFxGlassPiecePlace++;
		streamFxGlassPiecePlace++;
	}
}

void Save_FxGlassPiecePlacePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassPiecePlacePtr, sizeof(FxGlassPiecePlace*), (void**)&outFxGlassPiecePlacePtr);
	if (*varFxGlassPiecePlacePtr)
	{
		*outFxGlassPiecePlacePtr = (FxGlassPiecePlace*)DB_FindStreamData(*varFxGlassPiecePlacePtr);
		assert(*outFxGlassPiecePlacePtr != (FxGlassPiecePlace*)0xFFFFFFFF);
		if (!*outFxGlassPiecePlacePtr)
		{
			*outFxGlassPiecePlacePtr = AllocSave_FxGlassPiecePlace();
			varFxGlassPiecePlace = *varFxGlassPiecePlacePtr;
			streamFxGlassPiecePlace = *outFxGlassPiecePlacePtr;
			auto v1 = sub_44AF80((void**)streamFxGlassPiecePlacePtr, (void**)outFxGlassPiecePlacePtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassPiecePlacePtr, v1);
			Save_FxGlassPiecePlace(true);
		}
	}
}

void Save_FxGlassPiecePlacePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassPiecePlacePtr, sizeof(FxGlassPiecePlace*) * count, (void**)&outFxGlassPiecePlacePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassPiecePlacePtr(false);
		varFxGlassPiecePlacePtr++;
		outFxGlassPiecePlacePtr++;
		streamFxGlassPiecePlacePtr++;
	}
}

void Save_FxGlassPieceState(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassPieceStateArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassPieceState, sizeof(FxGlassPieceState) * count, (void**)&outFxGlassPieceState);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassPieceState(false);
		varFxGlassPieceState++;
		outFxGlassPieceState++;
		streamFxGlassPieceState++;
	}
}

void Save_FxGlassPieceStatePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassPieceStatePtr, sizeof(FxGlassPieceState*), (void**)&outFxGlassPieceStatePtr);
	if (*varFxGlassPieceStatePtr)
	{
		*outFxGlassPieceStatePtr = (FxGlassPieceState*)DB_FindStreamData(*varFxGlassPieceStatePtr);
		assert(*outFxGlassPieceStatePtr != (FxGlassPieceState*)0xFFFFFFFF);
		if (!*outFxGlassPieceStatePtr)
		{
			*outFxGlassPieceStatePtr = AllocSave_FxGlassPieceState();
			varFxGlassPieceState = *varFxGlassPieceStatePtr;
			streamFxGlassPieceState = *outFxGlassPieceStatePtr;
			auto v1 = sub_44AF80((void**)streamFxGlassPieceStatePtr, (void**)outFxGlassPieceStatePtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassPieceStatePtr, v1);
			Save_FxGlassPieceState(true);
		}
	}
}

void Save_FxGlassPieceStatePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassPieceStatePtr, sizeof(FxGlassPieceState*) * count, (void**)&outFxGlassPieceStatePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassPieceStatePtr(false);
		varFxGlassPieceStatePtr++;
		outFxGlassPieceStatePtr++;
		streamFxGlassPieceStatePtr++;
	}
}

void Save_FxGlassSystem(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassSystemArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassSystem, sizeof(FxGlassSystem) * count, (void**)&outFxGlassSystem);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassSystem(false);
		varFxGlassSystem++;
		outFxGlassSystem++;
		streamFxGlassSystem++;
	}
}

void Save_FxGlassSystemPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassSystemPtr, sizeof(FxGlassSystem*), (void**)&outFxGlassSystemPtr);
	if (*varFxGlassSystemPtr)
	{
		*outFxGlassSystemPtr = (FxGlassSystem*)DB_FindStreamData(*varFxGlassSystemPtr);
		assert(*outFxGlassSystemPtr != (FxGlassSystem*)0xFFFFFFFF);
		if (!*outFxGlassSystemPtr)
		{
			*outFxGlassSystemPtr = AllocSave_FxGlassSystem();
			varFxGlassSystem = *varFxGlassSystemPtr;
			streamFxGlassSystem = *outFxGlassSystemPtr;
			auto v1 = sub_44AF80((void**)streamFxGlassSystemPtr, (void**)outFxGlassSystemPtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassSystemPtr, v1);
			Save_FxGlassSystem(true);
		}
	}
}

void Save_FxGlassSystemPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassSystemPtr, sizeof(FxGlassSystem*) * count, (void**)&outFxGlassSystemPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassSystemPtr(false);
		varFxGlassSystemPtr++;
		outFxGlassSystemPtr++;
		streamFxGlassSystemPtr++;
	}
}

void Save_FxGlassVertex(bool atStreamStart)
{
	// todo!
}

void Save_FxGlassVertexArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassVertex, sizeof(FxGlassVertex) * count, (void**)&outFxGlassVertex);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassVertex(false);
		varFxGlassVertex++;
		outFxGlassVertex++;
		streamFxGlassVertex++;
	}
}

void Save_FxGlassVertexPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxGlassVertexPtr, sizeof(FxGlassVertex*), (void**)&outFxGlassVertexPtr);
	if (*varFxGlassVertexPtr)
	{
		*outFxGlassVertexPtr = (FxGlassVertex*)DB_FindStreamData(*varFxGlassVertexPtr);
		assert(*outFxGlassVertexPtr != (FxGlassVertex*)0xFFFFFFFF);
		if (!*outFxGlassVertexPtr)
		{
			*outFxGlassVertexPtr = AllocSave_FxGlassVertex();
			varFxGlassVertex = *varFxGlassVertexPtr;
			streamFxGlassVertex = *outFxGlassVertexPtr;
			auto v1 = sub_44AF80((void**)streamFxGlassVertexPtr, (void**)outFxGlassVertexPtr);
			DB_FindStreamDataOrInsert((void*)*varFxGlassVertexPtr, v1);
			Save_FxGlassVertex(true);
		}
	}
}

void Save_FxGlassVertexPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxGlassVertexPtr, sizeof(FxGlassVertex*) * count, (void**)&outFxGlassVertexPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxGlassVertexPtr(false);
		varFxGlassVertexPtr++;
		outFxGlassVertexPtr++;
		streamFxGlassVertexPtr++;
	}
}

void Save_FxIntRange(bool atStreamStart)
{
	// todo!
}

void Save_FxIntRangeArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxIntRange, sizeof(FxIntRange) * count, (void**)&outFxIntRange);
	for (int i = 0; i < count; i++)
	{
		Save_FxIntRange(false);
		varFxIntRange++;
		outFxIntRange++;
		streamFxIntRange++;
	}
}

void Save_FxIntRangePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxIntRangePtr, sizeof(FxIntRange*), (void**)&outFxIntRangePtr);
	if (*varFxIntRangePtr)
	{
		*outFxIntRangePtr = (FxIntRange*)DB_FindStreamData(*varFxIntRangePtr);
		assert(*outFxIntRangePtr != (FxIntRange*)0xFFFFFFFF);
		if (!*outFxIntRangePtr)
		{
			*outFxIntRangePtr = AllocSave_FxIntRange();
			varFxIntRange = *varFxIntRangePtr;
			streamFxIntRange = *outFxIntRangePtr;
			auto v1 = sub_44AF80((void**)streamFxIntRangePtr, (void**)outFxIntRangePtr);
			DB_FindStreamDataOrInsert((void*)*varFxIntRangePtr, v1);
			Save_FxIntRange(true);
		}
	}
}

void Save_FxIntRangePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxIntRangePtr, sizeof(FxIntRange*) * count, (void**)&outFxIntRangePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxIntRangePtr(false);
		varFxIntRangePtr++;
		outFxIntRangePtr++;
		streamFxIntRangePtr++;
	}
}

void Save_FxSparkFountainDef(bool atStreamStart)
{
	// todo!
}

void Save_FxSparkFountainDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSparkFountainDef, sizeof(FxSparkFountainDef) * count, (void**)&outFxSparkFountainDef);
	for (int i = 0; i < count; i++)
	{
		Save_FxSparkFountainDef(false);
		varFxSparkFountainDef++;
		outFxSparkFountainDef++;
		streamFxSparkFountainDef++;
	}
}

void Save_FxSparkFountainDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxSparkFountainDefPtr, sizeof(FxSparkFountainDef*), (void**)&outFxSparkFountainDefPtr);
	if (*varFxSparkFountainDefPtr)
	{
		*outFxSparkFountainDefPtr = (FxSparkFountainDef*)DB_FindStreamData(*varFxSparkFountainDefPtr);
		assert(*outFxSparkFountainDefPtr != (FxSparkFountainDef*)0xFFFFFFFF);
		if (!*outFxSparkFountainDefPtr)
		{
			*outFxSparkFountainDefPtr = AllocSave_FxSparkFountainDef();
			varFxSparkFountainDef = *varFxSparkFountainDefPtr;
			streamFxSparkFountainDef = *outFxSparkFountainDefPtr;
			auto v1 = sub_44AF80((void**)streamFxSparkFountainDefPtr, (void**)outFxSparkFountainDefPtr);
			DB_FindStreamDataOrInsert((void*)*varFxSparkFountainDefPtr, v1);
			Save_FxSparkFountainDef(true);
		}
	}
}

void Save_FxSparkFountainDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSparkFountainDefPtr, sizeof(FxSparkFountainDef*) * count, (void**)&outFxSparkFountainDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxSparkFountainDefPtr(false);
		varFxSparkFountainDefPtr++;
		outFxSparkFountainDefPtr++;
		streamFxSparkFountainDefPtr++;
	}
}

void Save_FxSpatialFrame(bool atStreamStart)
{
	// todo!
}

void Save_FxSpatialFrameArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSpatialFrame, sizeof(FxSpatialFrame) * count, (void**)&outFxSpatialFrame);
	for (int i = 0; i < count; i++)
	{
		Save_FxSpatialFrame(false);
		varFxSpatialFrame++;
		outFxSpatialFrame++;
		streamFxSpatialFrame++;
	}
}

void Save_FxSpatialFramePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxSpatialFramePtr, sizeof(FxSpatialFrame*), (void**)&outFxSpatialFramePtr);
	if (*varFxSpatialFramePtr)
	{
		*outFxSpatialFramePtr = (FxSpatialFrame*)DB_FindStreamData(*varFxSpatialFramePtr);
		assert(*outFxSpatialFramePtr != (FxSpatialFrame*)0xFFFFFFFF);
		if (!*outFxSpatialFramePtr)
		{
			*outFxSpatialFramePtr = AllocSave_FxSpatialFrame();
			varFxSpatialFrame = *varFxSpatialFramePtr;
			streamFxSpatialFrame = *outFxSpatialFramePtr;
			auto v1 = sub_44AF80((void**)streamFxSpatialFramePtr, (void**)outFxSpatialFramePtr);
			DB_FindStreamDataOrInsert((void*)*varFxSpatialFramePtr, v1);
			Save_FxSpatialFrame(true);
		}
	}
}

void Save_FxSpatialFramePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSpatialFramePtr, sizeof(FxSpatialFrame*) * count, (void**)&outFxSpatialFramePtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxSpatialFramePtr(false);
		varFxSpatialFramePtr++;
		outFxSpatialFramePtr++;
		streamFxSpatialFramePtr++;
	}
}

void Save_FxSpawnDef(bool atStreamStart)
{
	// todo!
}

void Save_FxSpawnDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSpawnDef, sizeof(FxSpawnDef) * count, (void**)&outFxSpawnDef);
	for (int i = 0; i < count; i++)
	{
		Save_FxSpawnDef(false);
		varFxSpawnDef++;
		outFxSpawnDef++;
		streamFxSpawnDef++;
	}
}

void Save_FxSpawnDefLooping(bool atStreamStart)
{
	// todo!
}

void Save_FxSpawnDefLoopingArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSpawnDefLooping, sizeof(FxSpawnDefLooping) * count, (void**)&outFxSpawnDefLooping);
	for (int i = 0; i < count; i++)
	{
		Save_FxSpawnDefLooping(false);
		varFxSpawnDefLooping++;
		outFxSpawnDefLooping++;
		streamFxSpawnDefLooping++;
	}
}

void Save_FxSpawnDefLoopingPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxSpawnDefLoopingPtr, sizeof(FxSpawnDefLooping*), (void**)&outFxSpawnDefLoopingPtr);
	if (*varFxSpawnDefLoopingPtr)
	{
		*outFxSpawnDefLoopingPtr = (FxSpawnDefLooping*)DB_FindStreamData(*varFxSpawnDefLoopingPtr);
		assert(*outFxSpawnDefLoopingPtr != (FxSpawnDefLooping*)0xFFFFFFFF);
		if (!*outFxSpawnDefLoopingPtr)
		{
			*outFxSpawnDefLoopingPtr = AllocSave_FxSpawnDefLooping();
			varFxSpawnDefLooping = *varFxSpawnDefLoopingPtr;
			streamFxSpawnDefLooping = *outFxSpawnDefLoopingPtr;
			auto v1 = sub_44AF80((void**)streamFxSpawnDefLoopingPtr, (void**)outFxSpawnDefLoopingPtr);
			DB_FindStreamDataOrInsert((void*)*varFxSpawnDefLoopingPtr, v1);
			Save_FxSpawnDefLooping(true);
		}
	}
}

void Save_FxSpawnDefLoopingPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSpawnDefLoopingPtr, sizeof(FxSpawnDefLooping*) * count, (void**)&outFxSpawnDefLoopingPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxSpawnDefLoopingPtr(false);
		varFxSpawnDefLoopingPtr++;
		outFxSpawnDefLoopingPtr++;
		streamFxSpawnDefLoopingPtr++;
	}
}

void Save_FxSpawnDefOneShot(bool atStreamStart)
{
	// todo!
}

void Save_FxSpawnDefOneShotArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSpawnDefOneShot, sizeof(FxSpawnDefOneShot) * count, (void**)&outFxSpawnDefOneShot);
	for (int i = 0; i < count; i++)
	{
		Save_FxSpawnDefOneShot(false);
		varFxSpawnDefOneShot++;
		outFxSpawnDefOneShot++;
		streamFxSpawnDefOneShot++;
	}
}

void Save_FxSpawnDefOneShotPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxSpawnDefOneShotPtr, sizeof(FxSpawnDefOneShot*), (void**)&outFxSpawnDefOneShotPtr);
	if (*varFxSpawnDefOneShotPtr)
	{
		*outFxSpawnDefOneShotPtr = (FxSpawnDefOneShot*)DB_FindStreamData(*varFxSpawnDefOneShotPtr);
		assert(*outFxSpawnDefOneShotPtr != (FxSpawnDefOneShot*)0xFFFFFFFF);
		if (!*outFxSpawnDefOneShotPtr)
		{
			*outFxSpawnDefOneShotPtr = AllocSave_FxSpawnDefOneShot();
			varFxSpawnDefOneShot = *varFxSpawnDefOneShotPtr;
			streamFxSpawnDefOneShot = *outFxSpawnDefOneShotPtr;
			auto v1 = sub_44AF80((void**)streamFxSpawnDefOneShotPtr, (void**)outFxSpawnDefOneShotPtr);
			DB_FindStreamDataOrInsert((void*)*varFxSpawnDefOneShotPtr, v1);
			Save_FxSpawnDefOneShot(true);
		}
	}
}

void Save_FxSpawnDefOneShotPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSpawnDefOneShotPtr, sizeof(FxSpawnDefOneShot*) * count, (void**)&outFxSpawnDefOneShotPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxSpawnDefOneShotPtr(false);
		varFxSpawnDefOneShotPtr++;
		outFxSpawnDefOneShotPtr++;
		streamFxSpawnDefOneShotPtr++;
	}
}

void Save_FxSpawnDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxSpawnDefPtr, sizeof(FxSpawnDef*), (void**)&outFxSpawnDefPtr);
	if (*varFxSpawnDefPtr)
	{
		*outFxSpawnDefPtr = (FxSpawnDef*)DB_FindStreamData(*varFxSpawnDefPtr);
		assert(*outFxSpawnDefPtr != (FxSpawnDef*)0xFFFFFFFF);
		if (!*outFxSpawnDefPtr)
		{
			*outFxSpawnDefPtr = AllocSave_FxSpawnDef();
			varFxSpawnDef = *varFxSpawnDefPtr;
			streamFxSpawnDef = *outFxSpawnDefPtr;
			auto v1 = sub_44AF80((void**)streamFxSpawnDefPtr, (void**)outFxSpawnDefPtr);
			DB_FindStreamDataOrInsert((void*)*varFxSpawnDefPtr, v1);
			Save_FxSpawnDef(true);
		}
	}
}

void Save_FxSpawnDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxSpawnDefPtr, sizeof(FxSpawnDef*) * count, (void**)&outFxSpawnDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxSpawnDefPtr(false);
		varFxSpawnDefPtr++;
		outFxSpawnDefPtr++;
		streamFxSpawnDefPtr++;
	}
}

void Save_FxTrailDef(bool atStreamStart)
{
	// todo!
}

void Save_FxTrailDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxTrailDef, sizeof(FxTrailDef) * count, (void**)&outFxTrailDef);
	for (int i = 0; i < count; i++)
	{
		Save_FxTrailDef(false);
		varFxTrailDef++;
		outFxTrailDef++;
		streamFxTrailDef++;
	}
}

void Save_FxTrailDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxTrailDefPtr, sizeof(FxTrailDef*), (void**)&outFxTrailDefPtr);
	if (*varFxTrailDefPtr)
	{
		*outFxTrailDefPtr = (FxTrailDef*)DB_FindStreamData(*varFxTrailDefPtr);
		assert(*outFxTrailDefPtr != (FxTrailDef*)0xFFFFFFFF);
		if (!*outFxTrailDefPtr)
		{
			*outFxTrailDefPtr = AllocSave_FxTrailDef();
			varFxTrailDef = *varFxTrailDefPtr;
			streamFxTrailDef = *outFxTrailDefPtr;
			auto v1 = sub_44AF80((void**)streamFxTrailDefPtr, (void**)outFxTrailDefPtr);
			DB_FindStreamDataOrInsert((void*)*varFxTrailDefPtr, v1);
			Save_FxTrailDef(true);
		}
	}
}

void Save_FxTrailDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxTrailDefPtr, sizeof(FxTrailDef*) * count, (void**)&outFxTrailDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxTrailDefPtr(false);
		varFxTrailDefPtr++;
		outFxTrailDefPtr++;
		streamFxTrailDefPtr++;
	}
}

void Save_FxTrailVertex(bool atStreamStart)
{
	// todo!
}

void Save_FxTrailVertexArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxTrailVertex, sizeof(FxTrailVertex) * count, (void**)&outFxTrailVertex);
	for (int i = 0; i < count; i++)
	{
		Save_FxTrailVertex(false);
		varFxTrailVertex++;
		outFxTrailVertex++;
		streamFxTrailVertex++;
	}
}

void Save_FxTrailVertexPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxTrailVertexPtr, sizeof(FxTrailVertex*), (void**)&outFxTrailVertexPtr);
	if (*varFxTrailVertexPtr)
	{
		*outFxTrailVertexPtr = (FxTrailVertex*)DB_FindStreamData(*varFxTrailVertexPtr);
		assert(*outFxTrailVertexPtr != (FxTrailVertex*)0xFFFFFFFF);
		if (!*outFxTrailVertexPtr)
		{
			*outFxTrailVertexPtr = AllocSave_FxTrailVertex();
			varFxTrailVertex = *varFxTrailVertexPtr;
			streamFxTrailVertex = *outFxTrailVertexPtr;
			auto v1 = sub_44AF80((void**)streamFxTrailVertexPtr, (void**)outFxTrailVertexPtr);
			DB_FindStreamDataOrInsert((void*)*varFxTrailVertexPtr, v1);
			Save_FxTrailVertex(true);
		}
	}
}

void Save_FxTrailVertexPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxTrailVertexPtr, sizeof(FxTrailVertex*) * count, (void**)&outFxTrailVertexPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxTrailVertexPtr(false);
		varFxTrailVertexPtr++;
		outFxTrailVertexPtr++;
		streamFxTrailVertexPtr++;
	}
}

void Save_FxWorld(bool atStreamStart)
{
	// todo!
}

void Save_FxWorldArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxWorld, sizeof(FxWorld) * count, (void**)&outFxWorld);
	for (int i = 0; i < count; i++)
	{
		Save_FxWorld(false);
		varFxWorld++;
		outFxWorld++;
		streamFxWorld++;
	}
}

void Save_FxWorldAsset(FxWorld** asset)
{
	// todo!
}

void Save_FxWorldPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varFxWorldPtr, sizeof(FxWorld*), (void**)&outFxWorldPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varFxWorldPtr)
	{
		*outFxWorldPtr = (FxWorld*)DB_FindStreamData(*varFxWorldPtr);
		assert(*outFxWorldPtr != (FxWorld*)0xFFFFFFFF);
		if (!*outFxWorldPtr)
		{
			*outFxWorldPtr = AllocSave_FxWorld();
			varFxWorld = *varFxWorldPtr;
			streamFxWorld = *outFxWorldPtr;
			auto v1 = sub_44AF80((void**)streamFxWorldPtr, (void**)outFxWorldPtr);
			DB_FindStreamDataOrInsert((void*)*varFxWorldPtr, v1);
			Save_FxWorld(true);
		}
	}
	DB_PopStreamPos();
}

void Save_FxWorldPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varFxWorldPtr, sizeof(FxWorld*) * count, (void**)&outFxWorldPtr);
	for (int i = 0; i < count; i++)
	{
		Save_FxWorldPtr(false);
		varFxWorldPtr++;
		outFxWorldPtr++;
		streamFxWorldPtr++;
	}
}

void Save_G_GlassData(bool atStreamStart)
{
	// todo!
}

void Save_G_GlassDataArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varG_GlassData, sizeof(G_GlassData) * count, (void**)&outG_GlassData);
	for (int i = 0; i < count; i++)
	{
		Save_G_GlassData(false);
		varG_GlassData++;
		outG_GlassData++;
		streamG_GlassData++;
	}
}

void Save_G_GlassDataPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varG_GlassDataPtr, sizeof(G_GlassData*), (void**)&outG_GlassDataPtr);
	if (*varG_GlassDataPtr)
	{
		*outG_GlassDataPtr = (G_GlassData*)DB_FindStreamData(*varG_GlassDataPtr);
		assert(*outG_GlassDataPtr != (G_GlassData*)0xFFFFFFFF);
		if (!*outG_GlassDataPtr)
		{
			*outG_GlassDataPtr = AllocSave_G_GlassData();
			varG_GlassData = *varG_GlassDataPtr;
			streamG_GlassData = *outG_GlassDataPtr;
			auto v1 = sub_44AF80((void**)streamG_GlassDataPtr, (void**)outG_GlassDataPtr);
			DB_FindStreamDataOrInsert((void*)*varG_GlassDataPtr, v1);
			Save_G_GlassData(true);
		}
	}
}

void Save_G_GlassDataPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varG_GlassDataPtr, sizeof(G_GlassData*) * count, (void**)&outG_GlassDataPtr);
	for (int i = 0; i < count; i++)
	{
		Save_G_GlassDataPtr(false);
		varG_GlassDataPtr++;
		outG_GlassDataPtr++;
		streamG_GlassDataPtr++;
	}
}

void Save_G_GlassName(bool atStreamStart)
{
	// todo!
}

void Save_G_GlassNameArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varG_GlassName, sizeof(G_GlassName) * count, (void**)&outG_GlassName);
	for (int i = 0; i < count; i++)
	{
		Save_G_GlassName(false);
		varG_GlassName++;
		outG_GlassName++;
		streamG_GlassName++;
	}
}

void Save_G_GlassNamePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varG_GlassNamePtr, sizeof(G_GlassName*), (void**)&outG_GlassNamePtr);
	if (*varG_GlassNamePtr)
	{
		*outG_GlassNamePtr = (G_GlassName*)DB_FindStreamData(*varG_GlassNamePtr);
		assert(*outG_GlassNamePtr != (G_GlassName*)0xFFFFFFFF);
		if (!*outG_GlassNamePtr)
		{
			*outG_GlassNamePtr = AllocSave_G_GlassName();
			varG_GlassName = *varG_GlassNamePtr;
			streamG_GlassName = *outG_GlassNamePtr;
			auto v1 = sub_44AF80((void**)streamG_GlassNamePtr, (void**)outG_GlassNamePtr);
			DB_FindStreamDataOrInsert((void*)*varG_GlassNamePtr, v1);
			Save_G_GlassName(true);
		}
	}
}

void Save_G_GlassNamePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varG_GlassNamePtr, sizeof(G_GlassName*) * count, (void**)&outG_GlassNamePtr);
	for (int i = 0; i < count; i++)
	{
		Save_G_GlassNamePtr(false);
		varG_GlassNamePtr++;
		outG_GlassNamePtr++;
		streamG_GlassNamePtr++;
	}
}

void Save_G_GlassPiece(bool atStreamStart)
{
	// todo!
}

void Save_G_GlassPieceArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varG_GlassPiece, sizeof(G_GlassPiece) * count, (void**)&outG_GlassPiece);
	for (int i = 0; i < count; i++)
	{
		Save_G_GlassPiece(false);
		varG_GlassPiece++;
		outG_GlassPiece++;
		streamG_GlassPiece++;
	}
}

void Save_G_GlassPiecePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varG_GlassPiecePtr, sizeof(G_GlassPiece*), (void**)&outG_GlassPiecePtr);
	if (*varG_GlassPiecePtr)
	{
		*outG_GlassPiecePtr = (G_GlassPiece*)DB_FindStreamData(*varG_GlassPiecePtr);
		assert(*outG_GlassPiecePtr != (G_GlassPiece*)0xFFFFFFFF);
		if (!*outG_GlassPiecePtr)
		{
			*outG_GlassPiecePtr = AllocSave_G_GlassPiece();
			varG_GlassPiece = *varG_GlassPiecePtr;
			streamG_GlassPiece = *outG_GlassPiecePtr;
			auto v1 = sub_44AF80((void**)streamG_GlassPiecePtr, (void**)outG_GlassPiecePtr);
			DB_FindStreamDataOrInsert((void*)*varG_GlassPiecePtr, v1);
			Save_G_GlassPiece(true);
		}
	}
}

void Save_G_GlassPiecePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varG_GlassPiecePtr, sizeof(G_GlassPiece*) * count, (void**)&outG_GlassPiecePtr);
	for (int i = 0; i < count; i++)
	{
		Save_G_GlassPiecePtr(false);
		varG_GlassPiecePtr++;
		outG_GlassPiecePtr++;
		streamG_GlassPiecePtr++;
	}
}

void Save_GameWorldMp(bool atStreamStart)
{
	// todo!
}

void Save_GameWorldMpArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGameWorldMp, sizeof(GameWorldMp) * count, (void**)&outGameWorldMp);
	for (int i = 0; i < count; i++)
	{
		Save_GameWorldMp(false);
		varGameWorldMp++;
		outGameWorldMp++;
		streamGameWorldMp++;
	}
}

void Save_GameWorldMpAsset(GameWorldMp** asset)
{
	// todo!
}

void Save_GameWorldMpPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGameWorldMpPtr, sizeof(GameWorldMp*), (void**)&outGameWorldMpPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varGameWorldMpPtr)
	{
		*outGameWorldMpPtr = (GameWorldMp*)DB_FindStreamData(*varGameWorldMpPtr);
		assert(*outGameWorldMpPtr != (GameWorldMp*)0xFFFFFFFF);
		if (!*outGameWorldMpPtr)
		{
			*outGameWorldMpPtr = AllocSave_GameWorldMp();
			varGameWorldMp = *varGameWorldMpPtr;
			streamGameWorldMp = *outGameWorldMpPtr;
			auto v1 = sub_44AF80((void**)streamGameWorldMpPtr, (void**)outGameWorldMpPtr);
			DB_FindStreamDataOrInsert((void*)*varGameWorldMpPtr, v1);
			Save_GameWorldMp(true);
		}
	}
	DB_PopStreamPos();
}

void Save_GameWorldMpPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGameWorldMpPtr, sizeof(GameWorldMp*) * count, (void**)&outGameWorldMpPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GameWorldMpPtr(false);
		varGameWorldMpPtr++;
		outGameWorldMpPtr++;
		streamGameWorldMpPtr++;
	}
}

void Save_GfxColor(bool atStreamStart)
{
	// todo!
}

void Save_GfxColorArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxColor, sizeof(GfxColor) * count, (void**)&outGfxColor);
	for (int i = 0; i < count; i++)
	{
		Save_GfxColor(false);
		varGfxColor++;
		outGfxColor++;
		streamGfxColor++;
	}
}

void Save_GfxColorPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxColorPtr, sizeof(GfxColor*), (void**)&outGfxColorPtr);
	if (*varGfxColorPtr)
	{
		*outGfxColorPtr = (GfxColor*)DB_FindStreamData(*varGfxColorPtr);
		assert(*outGfxColorPtr != (GfxColor*)0xFFFFFFFF);
		if (!*outGfxColorPtr)
		{
			*outGfxColorPtr = AllocSave_GfxColor();
			varGfxColor = *varGfxColorPtr;
			streamGfxColor = *outGfxColorPtr;
			auto v1 = sub_44AF80((void**)streamGfxColorPtr, (void**)outGfxColorPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxColorPtr, v1);
			Save_GfxColor(true);
		}
	}
}

void Save_GfxColorPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxColorPtr, sizeof(GfxColor*) * count, (void**)&outGfxColorPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxColorPtr(false);
		varGfxColorPtr++;
		outGfxColorPtr++;
		streamGfxColorPtr++;
	}
}

void Save_GfxDrawSurf(bool atStreamStart)
{
	// todo!
}

void Save_GfxDrawSurfArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxDrawSurf, sizeof(GfxDrawSurf) * count, (void**)&outGfxDrawSurf);
	for (int i = 0; i < count; i++)
	{
		Save_GfxDrawSurf(false);
		varGfxDrawSurf++;
		outGfxDrawSurf++;
		streamGfxDrawSurf++;
	}
}

void Save_GfxDrawSurfPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxDrawSurfPtr, sizeof(GfxDrawSurf*), (void**)&outGfxDrawSurfPtr);
	if (*varGfxDrawSurfPtr)
	{
		*outGfxDrawSurfPtr = (GfxDrawSurf*)DB_FindStreamData(*varGfxDrawSurfPtr);
		assert(*outGfxDrawSurfPtr != (GfxDrawSurf*)0xFFFFFFFF);
		if (!*outGfxDrawSurfPtr)
		{
			*outGfxDrawSurfPtr = AllocSave_GfxDrawSurf();
			varGfxDrawSurf = *varGfxDrawSurfPtr;
			streamGfxDrawSurf = *outGfxDrawSurfPtr;
			auto v1 = sub_44AF80((void**)streamGfxDrawSurfPtr, (void**)outGfxDrawSurfPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxDrawSurfPtr, v1);
			Save_GfxDrawSurf(true);
		}
	}
}

void Save_GfxDrawSurfPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxDrawSurfPtr, sizeof(GfxDrawSurf*) * count, (void**)&outGfxDrawSurfPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxDrawSurfPtr(false);
		varGfxDrawSurfPtr++;
		outGfxDrawSurfPtr++;
		streamGfxDrawSurfPtr++;
	}
}

void Save_GfxImage(bool atStreamStart)
{
	// todo!
}

void Save_GfxImageArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxImage, sizeof(GfxImage) * count, (void**)&outGfxImage);
	for (int i = 0; i < count; i++)
	{
		Save_GfxImage(false);
		varGfxImage++;
		outGfxImage++;
		streamGfxImage++;
	}
}

void Save_GfxImageAsset(GfxImage** asset)
{
	// todo!
}

void Save_GfxImageLoadDef(bool atStreamStart)
{
	// todo!
}

void Save_GfxImageLoadDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxImageLoadDef, sizeof(GfxImageLoadDef) * count, (void**)&outGfxImageLoadDef);
	for (int i = 0; i < count; i++)
	{
		Save_GfxImageLoadDef(false);
		varGfxImageLoadDef++;
		outGfxImageLoadDef++;
		streamGfxImageLoadDef++;
	}
}

void Save_GfxImageLoadDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxImageLoadDefPtr, sizeof(GfxImageLoadDef*), (void**)&outGfxImageLoadDefPtr);
	if (*varGfxImageLoadDefPtr)
	{
		*outGfxImageLoadDefPtr = (GfxImageLoadDef*)DB_FindStreamData(*varGfxImageLoadDefPtr);
		assert(*outGfxImageLoadDefPtr != (GfxImageLoadDef*)0xFFFFFFFF);
		if (!*outGfxImageLoadDefPtr)
		{
			*outGfxImageLoadDefPtr = AllocSave_GfxImageLoadDef();
			varGfxImageLoadDef = *varGfxImageLoadDefPtr;
			streamGfxImageLoadDef = *outGfxImageLoadDefPtr;
			auto v1 = sub_44AF80((void**)streamGfxImageLoadDefPtr, (void**)outGfxImageLoadDefPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxImageLoadDefPtr, v1);
			Save_GfxImageLoadDef(true);
		}
	}
}

void Save_GfxImageLoadDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxImageLoadDefPtr, sizeof(GfxImageLoadDef*) * count, (void**)&outGfxImageLoadDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxImageLoadDefPtr(false);
		varGfxImageLoadDefPtr++;
		outGfxImageLoadDefPtr++;
		streamGfxImageLoadDefPtr++;
	}
}

void Save_GfxImagePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxImagePtr, sizeof(GfxImage*), (void**)&outGfxImagePtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varGfxImagePtr)
	{
		*outGfxImagePtr = (GfxImage*)DB_FindStreamData(*varGfxImagePtr);
		assert(*outGfxImagePtr != (GfxImage*)0xFFFFFFFF);
		if (!*outGfxImagePtr)
		{
			*outGfxImagePtr = AllocSave_GfxImage();
			varGfxImage = *varGfxImagePtr;
			streamGfxImage = *outGfxImagePtr;
			auto v1 = sub_44AF80((void**)streamGfxImagePtr, (void**)outGfxImagePtr);
			DB_FindStreamDataOrInsert((void*)*varGfxImagePtr, v1);
			Save_GfxImage(true);
		}
	}
	DB_PopStreamPos();
}

void Save_GfxImagePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxImagePtr, sizeof(GfxImage*) * count, (void**)&outGfxImagePtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxImagePtr(false);
		varGfxImagePtr++;
		outGfxImagePtr++;
		streamGfxImagePtr++;
	}
}

void Save_GfxLightDef(bool atStreamStart)
{
	// todo!
}

void Save_GfxLightDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxLightDef, sizeof(GfxLightDef) * count, (void**)&outGfxLightDef);
	for (int i = 0; i < count; i++)
	{
		Save_GfxLightDef(false);
		varGfxLightDef++;
		outGfxLightDef++;
		streamGfxLightDef++;
	}
}

void Save_GfxLightDefAsset(GfxLightDef** asset)
{
	// todo!
}

void Save_GfxLightDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxLightDefPtr, sizeof(GfxLightDef*), (void**)&outGfxLightDefPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varGfxLightDefPtr)
	{
		*outGfxLightDefPtr = (GfxLightDef*)DB_FindStreamData(*varGfxLightDefPtr);
		assert(*outGfxLightDefPtr != (GfxLightDef*)0xFFFFFFFF);
		if (!*outGfxLightDefPtr)
		{
			*outGfxLightDefPtr = AllocSave_GfxLightDef();
			varGfxLightDef = *varGfxLightDefPtr;
			streamGfxLightDef = *outGfxLightDefPtr;
			auto v1 = sub_44AF80((void**)streamGfxLightDefPtr, (void**)outGfxLightDefPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxLightDefPtr, v1);
			Save_GfxLightDef(true);
		}
	}
	DB_PopStreamPos();
}

void Save_GfxLightDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxLightDefPtr, sizeof(GfxLightDef*) * count, (void**)&outGfxLightDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxLightDefPtr(false);
		varGfxLightDefPtr++;
		outGfxLightDefPtr++;
		streamGfxLightDefPtr++;
	}
}

void Save_GfxLightImage(bool atStreamStart)
{
	// todo!
}

void Save_GfxLightImageArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxLightImage, sizeof(GfxLightImage) * count, (void**)&outGfxLightImage);
	for (int i = 0; i < count; i++)
	{
		Save_GfxLightImage(false);
		varGfxLightImage++;
		outGfxLightImage++;
		streamGfxLightImage++;
	}
}

void Save_GfxLightImagePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxLightImagePtr, sizeof(GfxLightImage*), (void**)&outGfxLightImagePtr);
	if (*varGfxLightImagePtr)
	{
		*outGfxLightImagePtr = (GfxLightImage*)DB_FindStreamData(*varGfxLightImagePtr);
		assert(*outGfxLightImagePtr != (GfxLightImage*)0xFFFFFFFF);
		if (!*outGfxLightImagePtr)
		{
			*outGfxLightImagePtr = AllocSave_GfxLightImage();
			varGfxLightImage = *varGfxLightImagePtr;
			streamGfxLightImage = *outGfxLightImagePtr;
			auto v1 = sub_44AF80((void**)streamGfxLightImagePtr, (void**)outGfxLightImagePtr);
			DB_FindStreamDataOrInsert((void*)*varGfxLightImagePtr, v1);
			Save_GfxLightImage(true);
		}
	}
}

void Save_GfxLightImagePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxLightImagePtr, sizeof(GfxLightImage*) * count, (void**)&outGfxLightImagePtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxLightImagePtr(false);
		varGfxLightImagePtr++;
		outGfxLightImagePtr++;
		streamGfxLightImagePtr++;
	}
}

void Save_GfxPackedVertex(bool atStreamStart)
{
	// todo!
}

void Save_GfxPackedVertexArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxPackedVertex, sizeof(GfxPackedVertex) * count, (void**)&outGfxPackedVertex);
	for (int i = 0; i < count; i++)
	{
		Save_GfxPackedVertex(false);
		varGfxPackedVertex++;
		outGfxPackedVertex++;
		streamGfxPackedVertex++;
	}
}

void Save_GfxPackedVertexPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxPackedVertexPtr, sizeof(GfxPackedVertex*), (void**)&outGfxPackedVertexPtr);
	if (*varGfxPackedVertexPtr)
	{
		*outGfxPackedVertexPtr = (GfxPackedVertex*)DB_FindStreamData(*varGfxPackedVertexPtr);
		assert(*outGfxPackedVertexPtr != (GfxPackedVertex*)0xFFFFFFFF);
		if (!*outGfxPackedVertexPtr)
		{
			*outGfxPackedVertexPtr = AllocSave_GfxPackedVertex();
			varGfxPackedVertex = *varGfxPackedVertexPtr;
			streamGfxPackedVertex = *outGfxPackedVertexPtr;
			auto v1 = sub_44AF80((void**)streamGfxPackedVertexPtr, (void**)outGfxPackedVertexPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxPackedVertexPtr, v1);
			Save_GfxPackedVertex(true);
		}
	}
}

void Save_GfxPackedVertexPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxPackedVertexPtr, sizeof(GfxPackedVertex*) * count, (void**)&outGfxPackedVertexPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxPackedVertexPtr(false);
		varGfxPackedVertexPtr++;
		outGfxPackedVertexPtr++;
		streamGfxPackedVertexPtr++;
	}
}

void Save_GfxPixelShaderLoadDef(bool atStreamStart)
{
	// todo!
}

void Save_GfxPixelShaderLoadDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxPixelShaderLoadDef, sizeof(GfxPixelShaderLoadDef) * count, (void**)&outGfxPixelShaderLoadDef);
	for (int i = 0; i < count; i++)
	{
		Save_GfxPixelShaderLoadDef(false);
		varGfxPixelShaderLoadDef++;
		outGfxPixelShaderLoadDef++;
		streamGfxPixelShaderLoadDef++;
	}
}

void Save_GfxPixelShaderLoadDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxPixelShaderLoadDefPtr, sizeof(GfxPixelShaderLoadDef*), (void**)&outGfxPixelShaderLoadDefPtr);
	if (*varGfxPixelShaderLoadDefPtr)
	{
		*outGfxPixelShaderLoadDefPtr = (GfxPixelShaderLoadDef*)DB_FindStreamData(*varGfxPixelShaderLoadDefPtr);
		assert(*outGfxPixelShaderLoadDefPtr != (GfxPixelShaderLoadDef*)0xFFFFFFFF);
		if (!*outGfxPixelShaderLoadDefPtr)
		{
			*outGfxPixelShaderLoadDefPtr = AllocSave_GfxPixelShaderLoadDef();
			varGfxPixelShaderLoadDef = *varGfxPixelShaderLoadDefPtr;
			streamGfxPixelShaderLoadDef = *outGfxPixelShaderLoadDefPtr;
			auto v1 = sub_44AF80((void**)streamGfxPixelShaderLoadDefPtr, (void**)outGfxPixelShaderLoadDefPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxPixelShaderLoadDefPtr, v1);
			Save_GfxPixelShaderLoadDef(true);
		}
	}
}

void Save_GfxPixelShaderLoadDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxPixelShaderLoadDefPtr, sizeof(GfxPixelShaderLoadDef*) * count, (void**)&outGfxPixelShaderLoadDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxPixelShaderLoadDefPtr(false);
		varGfxPixelShaderLoadDefPtr++;
		outGfxPixelShaderLoadDefPtr++;
		streamGfxPixelShaderLoadDefPtr++;
	}
}

void Save_GfxPlacement(bool atStreamStart)
{
	// todo!
}

void Save_GfxPlacementArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxPlacement, sizeof(GfxPlacement) * count, (void**)&outGfxPlacement);
	for (int i = 0; i < count; i++)
	{
		Save_GfxPlacement(false);
		varGfxPlacement++;
		outGfxPlacement++;
		streamGfxPlacement++;
	}
}

void Save_GfxPlacementPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxPlacementPtr, sizeof(GfxPlacement*), (void**)&outGfxPlacementPtr);
	if (*varGfxPlacementPtr)
	{
		*outGfxPlacementPtr = (GfxPlacement*)DB_FindStreamData(*varGfxPlacementPtr);
		assert(*outGfxPlacementPtr != (GfxPlacement*)0xFFFFFFFF);
		if (!*outGfxPlacementPtr)
		{
			*outGfxPlacementPtr = AllocSave_GfxPlacement();
			varGfxPlacement = *varGfxPlacementPtr;
			streamGfxPlacement = *outGfxPlacementPtr;
			auto v1 = sub_44AF80((void**)streamGfxPlacementPtr, (void**)outGfxPlacementPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxPlacementPtr, v1);
			Save_GfxPlacement(true);
		}
	}
}

void Save_GfxPlacementPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxPlacementPtr, sizeof(GfxPlacement*) * count, (void**)&outGfxPlacementPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxPlacementPtr(false);
		varGfxPlacementPtr++;
		outGfxPlacementPtr++;
		streamGfxPlacementPtr++;
	}
}

void Save_GfxStateBits(bool atStreamStart)
{
	// todo!
}

void Save_GfxStateBitsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxStateBits, sizeof(GfxStateBits) * count, (void**)&outGfxStateBits);
	for (int i = 0; i < count; i++)
	{
		Save_GfxStateBits(false);
		varGfxStateBits++;
		outGfxStateBits++;
		streamGfxStateBits++;
	}
}

void Save_GfxStateBitsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxStateBitsPtr, sizeof(GfxStateBits*), (void**)&outGfxStateBitsPtr);
	if (*varGfxStateBitsPtr)
	{
		*outGfxStateBitsPtr = (GfxStateBits*)DB_FindStreamData(*varGfxStateBitsPtr);
		assert(*outGfxStateBitsPtr != (GfxStateBits*)0xFFFFFFFF);
		if (!*outGfxStateBitsPtr)
		{
			*outGfxStateBitsPtr = AllocSave_GfxStateBits();
			varGfxStateBits = *varGfxStateBitsPtr;
			streamGfxStateBits = *outGfxStateBitsPtr;
			auto v1 = sub_44AF80((void**)streamGfxStateBitsPtr, (void**)outGfxStateBitsPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxStateBitsPtr, v1);
			Save_GfxStateBits(true);
		}
	}
}

void Save_GfxStateBitsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxStateBitsPtr, sizeof(GfxStateBits*) * count, (void**)&outGfxStateBitsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxStateBitsPtr(false);
		varGfxStateBitsPtr++;
		outGfxStateBitsPtr++;
		streamGfxStateBitsPtr++;
	}
}

void Save_GfxTexture(bool atStreamStart)
{
	// todo!
}

void Save_GfxTextureArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxTexture, sizeof(GfxTexture) * count, (void**)&outGfxTexture);
	for (int i = 0; i < count; i++)
	{
		Save_GfxTexture(false);
		varGfxTexture++;
		outGfxTexture++;
		streamGfxTexture++;
	}
}

void Save_GfxTexturePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxTexturePtr, sizeof(GfxTexture*), (void**)&outGfxTexturePtr);
	if (*varGfxTexturePtr)
	{
		*outGfxTexturePtr = (GfxTexture*)DB_FindStreamData(*varGfxTexturePtr);
		assert(*outGfxTexturePtr != (GfxTexture*)0xFFFFFFFF);
		if (!*outGfxTexturePtr)
		{
			*outGfxTexturePtr = AllocSave_GfxTexture();
			varGfxTexture = *varGfxTexturePtr;
			streamGfxTexture = *outGfxTexturePtr;
			auto v1 = sub_44AF80((void**)streamGfxTexturePtr, (void**)outGfxTexturePtr);
			DB_FindStreamDataOrInsert((void*)*varGfxTexturePtr, v1);
			Save_GfxTexture(true);
		}
	}
}

void Save_GfxTexturePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxTexturePtr, sizeof(GfxTexture*) * count, (void**)&outGfxTexturePtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxTexturePtr(false);
		varGfxTexturePtr++;
		outGfxTexturePtr++;
		streamGfxTexturePtr++;
	}
}

void Save_GfxVertexShaderLoadDef(bool atStreamStart)
{
	// todo!
}

void Save_GfxVertexShaderLoadDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxVertexShaderLoadDef, sizeof(GfxVertexShaderLoadDef) * count, (void**)&outGfxVertexShaderLoadDef);
	for (int i = 0; i < count; i++)
	{
		Save_GfxVertexShaderLoadDef(false);
		varGfxVertexShaderLoadDef++;
		outGfxVertexShaderLoadDef++;
		streamGfxVertexShaderLoadDef++;
	}
}

void Save_GfxVertexShaderLoadDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGfxVertexShaderLoadDefPtr, sizeof(GfxVertexShaderLoadDef*), (void**)&outGfxVertexShaderLoadDefPtr);
	if (*varGfxVertexShaderLoadDefPtr)
	{
		*outGfxVertexShaderLoadDefPtr = (GfxVertexShaderLoadDef*)DB_FindStreamData(*varGfxVertexShaderLoadDefPtr);
		assert(*outGfxVertexShaderLoadDefPtr != (GfxVertexShaderLoadDef*)0xFFFFFFFF);
		if (!*outGfxVertexShaderLoadDefPtr)
		{
			*outGfxVertexShaderLoadDefPtr = AllocSave_GfxVertexShaderLoadDef();
			varGfxVertexShaderLoadDef = *varGfxVertexShaderLoadDefPtr;
			streamGfxVertexShaderLoadDef = *outGfxVertexShaderLoadDefPtr;
			auto v1 = sub_44AF80((void**)streamGfxVertexShaderLoadDefPtr, (void**)outGfxVertexShaderLoadDefPtr);
			DB_FindStreamDataOrInsert((void*)*varGfxVertexShaderLoadDefPtr, v1);
			Save_GfxVertexShaderLoadDef(true);
		}
	}
}

void Save_GfxVertexShaderLoadDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGfxVertexShaderLoadDefPtr, sizeof(GfxVertexShaderLoadDef*) * count, (void**)&outGfxVertexShaderLoadDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GfxVertexShaderLoadDefPtr(false);
		varGfxVertexShaderLoadDefPtr++;
		outGfxVertexShaderLoadDefPtr++;
		streamGfxVertexShaderLoadDefPtr++;
	}
}

void Save_Glyph(bool atStreamStart)
{
	// todo!
}

void Save_GlyphArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGlyph, sizeof(Glyph) * count, (void**)&outGlyph);
	for (int i = 0; i < count; i++)
	{
		Save_Glyph(false);
		varGlyph++;
		outGlyph++;
		streamGlyph++;
	}
}

void Save_GlyphPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varGlyphPtr, sizeof(Glyph*), (void**)&outGlyphPtr);
	if (*varGlyphPtr)
	{
		*outGlyphPtr = (Glyph*)DB_FindStreamData(*varGlyphPtr);
		assert(*outGlyphPtr != (Glyph*)0xFFFFFFFF);
		if (!*outGlyphPtr)
		{
			*outGlyphPtr = AllocSave_Glyph();
			varGlyph = *varGlyphPtr;
			streamGlyph = *outGlyphPtr;
			auto v1 = sub_44AF80((void**)streamGlyphPtr, (void**)outGlyphPtr);
			DB_FindStreamDataOrInsert((void*)*varGlyphPtr, v1);
			Save_Glyph(true);
		}
	}
}

void Save_GlyphPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varGlyphPtr, sizeof(Glyph*) * count, (void**)&outGlyphPtr);
	for (int i = 0; i < count; i++)
	{
		Save_GlyphPtr(false);
		varGlyphPtr++;
		outGlyphPtr++;
		streamGlyphPtr++;
	}
}

void Save_ItemFloatExpression(bool atStreamStart)
{
	// todo!
}

void Save_ItemFloatExpressionArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varItemFloatExpression, sizeof(ItemFloatExpression) * count, (void**)&outItemFloatExpression);
	for (int i = 0; i < count; i++)
	{
		Save_ItemFloatExpression(false);
		varItemFloatExpression++;
		outItemFloatExpression++;
		streamItemFloatExpression++;
	}
}

void Save_ItemFloatExpressionPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varItemFloatExpressionPtr, sizeof(ItemFloatExpression*), (void**)&outItemFloatExpressionPtr);
	if (*varItemFloatExpressionPtr)
	{
		*outItemFloatExpressionPtr = (ItemFloatExpression*)DB_FindStreamData(*varItemFloatExpressionPtr);
		assert(*outItemFloatExpressionPtr != (ItemFloatExpression*)0xFFFFFFFF);
		if (!*outItemFloatExpressionPtr)
		{
			*outItemFloatExpressionPtr = AllocSave_ItemFloatExpression();
			varItemFloatExpression = *varItemFloatExpressionPtr;
			streamItemFloatExpression = *outItemFloatExpressionPtr;
			auto v1 = sub_44AF80((void**)streamItemFloatExpressionPtr, (void**)outItemFloatExpressionPtr);
			DB_FindStreamDataOrInsert((void*)*varItemFloatExpressionPtr, v1);
			Save_ItemFloatExpression(true);
		}
	}
}

void Save_ItemFloatExpressionPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varItemFloatExpressionPtr, sizeof(ItemFloatExpression*) * count, (void**)&outItemFloatExpressionPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ItemFloatExpressionPtr(false);
		varItemFloatExpressionPtr++;
		outItemFloatExpressionPtr++;
		streamItemFloatExpressionPtr++;
	}
}

void Save_ItemKeyHandler(bool atStreamStart)
{
	// todo!
}

void Save_ItemKeyHandlerArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varItemKeyHandler, sizeof(ItemKeyHandler) * count, (void**)&outItemKeyHandler);
	for (int i = 0; i < count; i++)
	{
		Save_ItemKeyHandler(false);
		varItemKeyHandler++;
		outItemKeyHandler++;
		streamItemKeyHandler++;
	}
}

void Save_ItemKeyHandlerPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varItemKeyHandlerPtr, sizeof(ItemKeyHandler*), (void**)&outItemKeyHandlerPtr);
	if (*varItemKeyHandlerPtr)
	{
		*outItemKeyHandlerPtr = (ItemKeyHandler*)DB_FindStreamData(*varItemKeyHandlerPtr);
		assert(*outItemKeyHandlerPtr != (ItemKeyHandler*)0xFFFFFFFF);
		if (!*outItemKeyHandlerPtr)
		{
			*outItemKeyHandlerPtr = AllocSave_ItemKeyHandler();
			varItemKeyHandler = *varItemKeyHandlerPtr;
			streamItemKeyHandler = *outItemKeyHandlerPtr;
			auto v1 = sub_44AF80((void**)streamItemKeyHandlerPtr, (void**)outItemKeyHandlerPtr);
			DB_FindStreamDataOrInsert((void*)*varItemKeyHandlerPtr, v1);
			Save_ItemKeyHandler(true);
		}
	}
}

void Save_ItemKeyHandlerPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varItemKeyHandlerPtr, sizeof(ItemKeyHandler*) * count, (void**)&outItemKeyHandlerPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ItemKeyHandlerPtr(false);
		varItemKeyHandlerPtr++;
		outItemKeyHandlerPtr++;
		streamItemKeyHandlerPtr++;
	}
}

void Save_LbColumnDef(bool atStreamStart)
{
	// todo!
}

void Save_LbColumnDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varLbColumnDef, sizeof(LbColumnDef) * count, (void**)&outLbColumnDef);
	for (int i = 0; i < count; i++)
	{
		Save_LbColumnDef(false);
		varLbColumnDef++;
		outLbColumnDef++;
		streamLbColumnDef++;
	}
}

void Save_LbColumnDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varLbColumnDefPtr, sizeof(LbColumnDef*), (void**)&outLbColumnDefPtr);
	if (*varLbColumnDefPtr)
	{
		*outLbColumnDefPtr = (LbColumnDef*)DB_FindStreamData(*varLbColumnDefPtr);
		assert(*outLbColumnDefPtr != (LbColumnDef*)0xFFFFFFFF);
		if (!*outLbColumnDefPtr)
		{
			*outLbColumnDefPtr = AllocSave_LbColumnDef();
			varLbColumnDef = *varLbColumnDefPtr;
			streamLbColumnDef = *outLbColumnDefPtr;
			auto v1 = sub_44AF80((void**)streamLbColumnDefPtr, (void**)outLbColumnDefPtr);
			DB_FindStreamDataOrInsert((void*)*varLbColumnDefPtr, v1);
			Save_LbColumnDef(true);
		}
	}
}

void Save_LbColumnDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varLbColumnDefPtr, sizeof(LbColumnDef*) * count, (void**)&outLbColumnDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_LbColumnDefPtr(false);
		varLbColumnDefPtr++;
		outLbColumnDefPtr++;
		streamLbColumnDefPtr++;
	}
}

void Save_LeaderboardDef(bool atStreamStart)
{
	// todo!
}

void Save_LeaderboardDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varLeaderboardDef, sizeof(LeaderboardDef) * count, (void**)&outLeaderboardDef);
	for (int i = 0; i < count; i++)
	{
		Save_LeaderboardDef(false);
		varLeaderboardDef++;
		outLeaderboardDef++;
		streamLeaderboardDef++;
	}
}

void Save_LeaderboardDefAsset(LeaderboardDef** asset)
{
	// todo!
}

void Save_LeaderboardDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varLeaderboardDefPtr, sizeof(LeaderboardDef*), (void**)&outLeaderboardDefPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varLeaderboardDefPtr)
	{
		*outLeaderboardDefPtr = (LeaderboardDef*)DB_FindStreamData(*varLeaderboardDefPtr);
		assert(*outLeaderboardDefPtr != (LeaderboardDef*)0xFFFFFFFF);
		if (!*outLeaderboardDefPtr)
		{
			*outLeaderboardDefPtr = AllocSave_LeaderboardDef();
			varLeaderboardDef = *varLeaderboardDefPtr;
			streamLeaderboardDef = *outLeaderboardDefPtr;
			auto v1 = sub_44AF80((void**)streamLeaderboardDefPtr, (void**)outLeaderboardDefPtr);
			DB_FindStreamDataOrInsert((void*)*varLeaderboardDefPtr, v1);
			Save_LeaderboardDef(true);
		}
	}
	DB_PopStreamPos();
}

void Save_LeaderboardDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varLeaderboardDefPtr, sizeof(LeaderboardDef*) * count, (void**)&outLeaderboardDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_LeaderboardDefPtr(false);
		varLeaderboardDefPtr++;
		outLeaderboardDefPtr++;
		streamLeaderboardDefPtr++;
	}
}

void Save_LoadedSound(bool atStreamStart)
{
	// todo!
}

void Save_LoadedSoundArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varLoadedSound, sizeof(LoadedSound) * count, (void**)&outLoadedSound);
	for (int i = 0; i < count; i++)
	{
		Save_LoadedSound(false);
		varLoadedSound++;
		outLoadedSound++;
		streamLoadedSound++;
	}
}

void Save_LoadedSoundPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varLoadedSoundPtr, sizeof(LoadedSound*), (void**)&outLoadedSoundPtr);
	if (*varLoadedSoundPtr)
	{
		*outLoadedSoundPtr = (LoadedSound*)DB_FindStreamData(*varLoadedSoundPtr);
		assert(*outLoadedSoundPtr != (LoadedSound*)0xFFFFFFFF);
		if (!*outLoadedSoundPtr)
		{
			*outLoadedSoundPtr = AllocSave_LoadedSound();
			varLoadedSound = *varLoadedSoundPtr;
			streamLoadedSound = *outLoadedSoundPtr;
			auto v1 = sub_44AF80((void**)streamLoadedSoundPtr, (void**)outLoadedSoundPtr);
			DB_FindStreamDataOrInsert((void*)*varLoadedSoundPtr, v1);
			Save_LoadedSound(true);
		}
	}
}

void Save_LoadedSoundPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varLoadedSoundPtr, sizeof(LoadedSound*) * count, (void**)&outLoadedSoundPtr);
	for (int i = 0; i < count; i++)
	{
		Save_LoadedSoundPtr(false);
		varLoadedSoundPtr++;
		outLoadedSoundPtr++;
		streamLoadedSoundPtr++;
	}
}

void Save_LocalizeEntry(bool atStreamStart)
{
	// todo!
}

void Save_LocalizeEntryArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varLocalizeEntry, sizeof(LocalizeEntry) * count, (void**)&outLocalizeEntry);
	for (int i = 0; i < count; i++)
	{
		Save_LocalizeEntry(false);
		varLocalizeEntry++;
		outLocalizeEntry++;
		streamLocalizeEntry++;
	}
}

void Save_LocalizeEntryAsset(LocalizeEntry** asset)
{
	// todo!
}

void Save_LocalizeEntryPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varLocalizeEntryPtr, sizeof(LocalizeEntry*), (void**)&outLocalizeEntryPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varLocalizeEntryPtr)
	{
		*outLocalizeEntryPtr = (LocalizeEntry*)DB_FindStreamData(*varLocalizeEntryPtr);
		assert(*outLocalizeEntryPtr != (LocalizeEntry*)0xFFFFFFFF);
		if (!*outLocalizeEntryPtr)
		{
			*outLocalizeEntryPtr = AllocSave_LocalizeEntry();
			varLocalizeEntry = *varLocalizeEntryPtr;
			streamLocalizeEntry = *outLocalizeEntryPtr;
			auto v1 = sub_44AF80((void**)streamLocalizeEntryPtr, (void**)outLocalizeEntryPtr);
			DB_FindStreamDataOrInsert((void*)*varLocalizeEntryPtr, v1);
			Save_LocalizeEntry(true);
		}
	}
	DB_PopStreamPos();
}

void Save_LocalizeEntryPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varLocalizeEntryPtr, sizeof(LocalizeEntry*) * count, (void**)&outLocalizeEntryPtr);
	for (int i = 0; i < count; i++)
	{
		Save_LocalizeEntryPtr(false);
		varLocalizeEntryPtr++;
		outLocalizeEntryPtr++;
		streamLocalizeEntryPtr++;
	}
}

void Save_MSSChannelMap(bool atStreamStart)
{
	// todo!
}

void Save_MSSChannelMapArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMSSChannelMap, sizeof(MSSChannelMap) * count, (void**)&outMSSChannelMap);
	for (int i = 0; i < count; i++)
	{
		Save_MSSChannelMap(false);
		varMSSChannelMap++;
		outMSSChannelMap++;
		streamMSSChannelMap++;
	}
}

void Save_MSSChannelMapPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMSSChannelMapPtr, sizeof(MSSChannelMap*), (void**)&outMSSChannelMapPtr);
	if (*varMSSChannelMapPtr)
	{
		*outMSSChannelMapPtr = (MSSChannelMap*)DB_FindStreamData(*varMSSChannelMapPtr);
		assert(*outMSSChannelMapPtr != (MSSChannelMap*)0xFFFFFFFF);
		if (!*outMSSChannelMapPtr)
		{
			*outMSSChannelMapPtr = AllocSave_MSSChannelMap();
			varMSSChannelMap = *varMSSChannelMapPtr;
			streamMSSChannelMap = *outMSSChannelMapPtr;
			auto v1 = sub_44AF80((void**)streamMSSChannelMapPtr, (void**)outMSSChannelMapPtr);
			DB_FindStreamDataOrInsert((void*)*varMSSChannelMapPtr, v1);
			Save_MSSChannelMap(true);
		}
	}
}

void Save_MSSChannelMapPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMSSChannelMapPtr, sizeof(MSSChannelMap*) * count, (void**)&outMSSChannelMapPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MSSChannelMapPtr(false);
		varMSSChannelMapPtr++;
		outMSSChannelMapPtr++;
		streamMSSChannelMapPtr++;
	}
}

void Save_MSSSpeakerLevels(bool atStreamStart)
{
	// todo!
}

void Save_MSSSpeakerLevelsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMSSSpeakerLevels, sizeof(MSSSpeakerLevels) * count, (void**)&outMSSSpeakerLevels);
	for (int i = 0; i < count; i++)
	{
		Save_MSSSpeakerLevels(false);
		varMSSSpeakerLevels++;
		outMSSSpeakerLevels++;
		streamMSSSpeakerLevels++;
	}
}

void Save_MSSSpeakerLevelsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMSSSpeakerLevelsPtr, sizeof(MSSSpeakerLevels*), (void**)&outMSSSpeakerLevelsPtr);
	if (*varMSSSpeakerLevelsPtr)
	{
		*outMSSSpeakerLevelsPtr = (MSSSpeakerLevels*)DB_FindStreamData(*varMSSSpeakerLevelsPtr);
		assert(*outMSSSpeakerLevelsPtr != (MSSSpeakerLevels*)0xFFFFFFFF);
		if (!*outMSSSpeakerLevelsPtr)
		{
			*outMSSSpeakerLevelsPtr = AllocSave_MSSSpeakerLevels();
			varMSSSpeakerLevels = *varMSSSpeakerLevelsPtr;
			streamMSSSpeakerLevels = *outMSSSpeakerLevelsPtr;
			auto v1 = sub_44AF80((void**)streamMSSSpeakerLevelsPtr, (void**)outMSSSpeakerLevelsPtr);
			DB_FindStreamDataOrInsert((void*)*varMSSSpeakerLevelsPtr, v1);
			Save_MSSSpeakerLevels(true);
		}
	}
}

void Save_MSSSpeakerLevelsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMSSSpeakerLevelsPtr, sizeof(MSSSpeakerLevels*) * count, (void**)&outMSSSpeakerLevelsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MSSSpeakerLevelsPtr(false);
		varMSSSpeakerLevelsPtr++;
		outMSSSpeakerLevelsPtr++;
		streamMSSSpeakerLevelsPtr++;
	}
}

void Save_MapEnts(bool atStreamStart)
{
	// todo!
}

void Save_MapEntsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMapEnts, sizeof(MapEnts) * count, (void**)&outMapEnts);
	for (int i = 0; i < count; i++)
	{
		Save_MapEnts(false);
		varMapEnts++;
		outMapEnts++;
		streamMapEnts++;
	}
}

void Save_MapEntsAsset(MapEnts** asset)
{
	// todo!
}

void Save_MapEntsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMapEntsPtr, sizeof(MapEnts*), (void**)&outMapEntsPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varMapEntsPtr)
	{
		*outMapEntsPtr = (MapEnts*)DB_FindStreamData(*varMapEntsPtr);
		assert(*outMapEntsPtr != (MapEnts*)0xFFFFFFFF);
		if (!*outMapEntsPtr)
		{
			*outMapEntsPtr = AllocSave_MapEnts();
			varMapEnts = *varMapEntsPtr;
			streamMapEnts = *outMapEntsPtr;
			auto v1 = sub_44AF80((void**)streamMapEntsPtr, (void**)outMapEntsPtr);
			DB_FindStreamDataOrInsert((void*)*varMapEntsPtr, v1);
			Save_MapEnts(true);
		}
	}
	DB_PopStreamPos();
}

void Save_MapEntsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMapEntsPtr, sizeof(MapEnts*) * count, (void**)&outMapEntsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MapEntsPtr(false);
		varMapEntsPtr++;
		outMapEntsPtr++;
		streamMapEntsPtr++;
	}
}

void Save_MapTriggers(bool atStreamStart)
{
	// todo!
}

void Save_MapTriggersArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMapTriggers, sizeof(MapTriggers) * count, (void**)&outMapTriggers);
	for (int i = 0; i < count; i++)
	{
		Save_MapTriggers(false);
		varMapTriggers++;
		outMapTriggers++;
		streamMapTriggers++;
	}
}

void Save_MapTriggersPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMapTriggersPtr, sizeof(MapTriggers*), (void**)&outMapTriggersPtr);
	if (*varMapTriggersPtr)
	{
		*outMapTriggersPtr = (MapTriggers*)DB_FindStreamData(*varMapTriggersPtr);
		assert(*outMapTriggersPtr != (MapTriggers*)0xFFFFFFFF);
		if (!*outMapTriggersPtr)
		{
			*outMapTriggersPtr = AllocSave_MapTriggers();
			varMapTriggers = *varMapTriggersPtr;
			streamMapTriggers = *outMapTriggersPtr;
			auto v1 = sub_44AF80((void**)streamMapTriggersPtr, (void**)outMapTriggersPtr);
			DB_FindStreamDataOrInsert((void*)*varMapTriggersPtr, v1);
			Save_MapTriggers(true);
		}
	}
}

void Save_MapTriggersPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMapTriggersPtr, sizeof(MapTriggers*) * count, (void**)&outMapTriggersPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MapTriggersPtr(false);
		varMapTriggersPtr++;
		outMapTriggersPtr++;
		streamMapTriggersPtr++;
	}
}

void Save_Material(bool atStreamStart)
{
	// todo!
}

void Save_MaterialArgumentCodeConst(bool atStreamStart)
{
	// todo!
}

void Save_MaterialArgumentCodeConstArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialArgumentCodeConst, sizeof(MaterialArgumentCodeConst) * count, (void**)&outMaterialArgumentCodeConst);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialArgumentCodeConst(false);
		varMaterialArgumentCodeConst++;
		outMaterialArgumentCodeConst++;
		streamMaterialArgumentCodeConst++;
	}
}

void Save_MaterialArgumentCodeConstPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialArgumentCodeConstPtr, sizeof(MaterialArgumentCodeConst*), (void**)&outMaterialArgumentCodeConstPtr);
	if (*varMaterialArgumentCodeConstPtr)
	{
		*outMaterialArgumentCodeConstPtr = (MaterialArgumentCodeConst*)DB_FindStreamData(*varMaterialArgumentCodeConstPtr);
		assert(*outMaterialArgumentCodeConstPtr != (MaterialArgumentCodeConst*)0xFFFFFFFF);
		if (!*outMaterialArgumentCodeConstPtr)
		{
			*outMaterialArgumentCodeConstPtr = AllocSave_MaterialArgumentCodeConst();
			varMaterialArgumentCodeConst = *varMaterialArgumentCodeConstPtr;
			streamMaterialArgumentCodeConst = *outMaterialArgumentCodeConstPtr;
			auto v1 = sub_44AF80((void**)streamMaterialArgumentCodeConstPtr, (void**)outMaterialArgumentCodeConstPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialArgumentCodeConstPtr, v1);
			Save_MaterialArgumentCodeConst(true);
		}
	}
}

void Save_MaterialArgumentCodeConstPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialArgumentCodeConstPtr, sizeof(MaterialArgumentCodeConst*) * count, (void**)&outMaterialArgumentCodeConstPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialArgumentCodeConstPtr(false);
		varMaterialArgumentCodeConstPtr++;
		outMaterialArgumentCodeConstPtr++;
		streamMaterialArgumentCodeConstPtr++;
	}
}

void Save_MaterialArgumentDef(bool atStreamStart)
{
	// todo!
}

void Save_MaterialArgumentDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialArgumentDef, sizeof(MaterialArgumentDef) * count, (void**)&outMaterialArgumentDef);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialArgumentDef(false);
		varMaterialArgumentDef++;
		outMaterialArgumentDef++;
		streamMaterialArgumentDef++;
	}
}

void Save_MaterialArgumentDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialArgumentDefPtr, sizeof(MaterialArgumentDef*), (void**)&outMaterialArgumentDefPtr);
	if (*varMaterialArgumentDefPtr)
	{
		*outMaterialArgumentDefPtr = (MaterialArgumentDef*)DB_FindStreamData(*varMaterialArgumentDefPtr);
		assert(*outMaterialArgumentDefPtr != (MaterialArgumentDef*)0xFFFFFFFF);
		if (!*outMaterialArgumentDefPtr)
		{
			*outMaterialArgumentDefPtr = AllocSave_MaterialArgumentDef();
			varMaterialArgumentDef = *varMaterialArgumentDefPtr;
			streamMaterialArgumentDef = *outMaterialArgumentDefPtr;
			auto v1 = sub_44AF80((void**)streamMaterialArgumentDefPtr, (void**)outMaterialArgumentDefPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialArgumentDefPtr, v1);
			Save_MaterialArgumentDef(true);
		}
	}
}

void Save_MaterialArgumentDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialArgumentDefPtr, sizeof(MaterialArgumentDef*) * count, (void**)&outMaterialArgumentDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialArgumentDefPtr(false);
		varMaterialArgumentDefPtr++;
		outMaterialArgumentDefPtr++;
		streamMaterialArgumentDefPtr++;
	}
}

void Save_MaterialArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterial, sizeof(Material) * count, (void**)&outMaterial);
	for (int i = 0; i < count; i++)
	{
		Save_Material(false);
		varMaterial++;
		outMaterial++;
		streamMaterial++;
	}
}

void Save_MaterialAsset(Material** asset)
{
	// todo!
}

void Save_MaterialConstantDef(bool atStreamStart)
{
	// todo!
}

void Save_MaterialConstantDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialConstantDef, sizeof(MaterialConstantDef) * count, (void**)&outMaterialConstantDef);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialConstantDef(false);
		varMaterialConstantDef++;
		outMaterialConstantDef++;
		streamMaterialConstantDef++;
	}
}

void Save_MaterialConstantDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialConstantDefPtr, sizeof(MaterialConstantDef*), (void**)&outMaterialConstantDefPtr);
	if (*varMaterialConstantDefPtr)
	{
		*outMaterialConstantDefPtr = (MaterialConstantDef*)DB_FindStreamData(*varMaterialConstantDefPtr);
		assert(*outMaterialConstantDefPtr != (MaterialConstantDef*)0xFFFFFFFF);
		if (!*outMaterialConstantDefPtr)
		{
			*outMaterialConstantDefPtr = AllocSave_MaterialConstantDef();
			varMaterialConstantDef = *varMaterialConstantDefPtr;
			streamMaterialConstantDef = *outMaterialConstantDefPtr;
			auto v1 = sub_44AF80((void**)streamMaterialConstantDefPtr, (void**)outMaterialConstantDefPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialConstantDefPtr, v1);
			Save_MaterialConstantDef(true);
		}
	}
}

void Save_MaterialConstantDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialConstantDefPtr, sizeof(MaterialConstantDef*) * count, (void**)&outMaterialConstantDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialConstantDefPtr(false);
		varMaterialConstantDefPtr++;
		outMaterialConstantDefPtr++;
		streamMaterialConstantDefPtr++;
	}
}

void Save_MaterialInfo(bool atStreamStart)
{
	// todo!
}

void Save_MaterialInfoArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialInfo, sizeof(MaterialInfo) * count, (void**)&outMaterialInfo);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialInfo(false);
		varMaterialInfo++;
		outMaterialInfo++;
		streamMaterialInfo++;
	}
}

void Save_MaterialInfoPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialInfoPtr, sizeof(MaterialInfo*), (void**)&outMaterialInfoPtr);
	if (*varMaterialInfoPtr)
	{
		*outMaterialInfoPtr = (MaterialInfo*)DB_FindStreamData(*varMaterialInfoPtr);
		assert(*outMaterialInfoPtr != (MaterialInfo*)0xFFFFFFFF);
		if (!*outMaterialInfoPtr)
		{
			*outMaterialInfoPtr = AllocSave_MaterialInfo();
			varMaterialInfo = *varMaterialInfoPtr;
			streamMaterialInfo = *outMaterialInfoPtr;
			auto v1 = sub_44AF80((void**)streamMaterialInfoPtr, (void**)outMaterialInfoPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialInfoPtr, v1);
			Save_MaterialInfo(true);
		}
	}
}

void Save_MaterialInfoPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialInfoPtr, sizeof(MaterialInfo*) * count, (void**)&outMaterialInfoPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialInfoPtr(false);
		varMaterialInfoPtr++;
		outMaterialInfoPtr++;
		streamMaterialInfoPtr++;
	}
}

void Save_MaterialPass(bool atStreamStart)
{
	// todo!
}

void Save_MaterialPassArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialPass, sizeof(MaterialPass) * count, (void**)&outMaterialPass);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialPass(false);
		varMaterialPass++;
		outMaterialPass++;
		streamMaterialPass++;
	}
}

void Save_MaterialPassPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialPassPtr, sizeof(MaterialPass*), (void**)&outMaterialPassPtr);
	if (*varMaterialPassPtr)
	{
		*outMaterialPassPtr = (MaterialPass*)DB_FindStreamData(*varMaterialPassPtr);
		assert(*outMaterialPassPtr != (MaterialPass*)0xFFFFFFFF);
		if (!*outMaterialPassPtr)
		{
			*outMaterialPassPtr = AllocSave_MaterialPass();
			varMaterialPass = *varMaterialPassPtr;
			streamMaterialPass = *outMaterialPassPtr;
			auto v1 = sub_44AF80((void**)streamMaterialPassPtr, (void**)outMaterialPassPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialPassPtr, v1);
			Save_MaterialPass(true);
		}
	}
}

void Save_MaterialPassPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialPassPtr, sizeof(MaterialPass*) * count, (void**)&outMaterialPassPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialPassPtr(false);
		varMaterialPassPtr++;
		outMaterialPassPtr++;
		streamMaterialPassPtr++;
	}
}

void Save_MaterialPixelShader(bool atStreamStart)
{
	// todo!
}

void Save_MaterialPixelShaderArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialPixelShader, sizeof(MaterialPixelShader) * count, (void**)&outMaterialPixelShader);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialPixelShader(false);
		varMaterialPixelShader++;
		outMaterialPixelShader++;
		streamMaterialPixelShader++;
	}
}

void Save_MaterialPixelShaderAsset(MaterialPixelShader** asset)
{
	// todo!
}

void Save_MaterialPixelShaderProgram(bool atStreamStart)
{
	// todo!
}

void Save_MaterialPixelShaderProgramArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialPixelShaderProgram, sizeof(MaterialPixelShaderProgram) * count, (void**)&outMaterialPixelShaderProgram);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialPixelShaderProgram(false);
		varMaterialPixelShaderProgram++;
		outMaterialPixelShaderProgram++;
		streamMaterialPixelShaderProgram++;
	}
}

void Save_MaterialPixelShaderProgramPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialPixelShaderProgramPtr, sizeof(MaterialPixelShaderProgram*), (void**)&outMaterialPixelShaderProgramPtr);
	if (*varMaterialPixelShaderProgramPtr)
	{
		*outMaterialPixelShaderProgramPtr = (MaterialPixelShaderProgram*)DB_FindStreamData(*varMaterialPixelShaderProgramPtr);
		assert(*outMaterialPixelShaderProgramPtr != (MaterialPixelShaderProgram*)0xFFFFFFFF);
		if (!*outMaterialPixelShaderProgramPtr)
		{
			*outMaterialPixelShaderProgramPtr = AllocSave_MaterialPixelShaderProgram();
			varMaterialPixelShaderProgram = *varMaterialPixelShaderProgramPtr;
			streamMaterialPixelShaderProgram = *outMaterialPixelShaderProgramPtr;
			auto v1 = sub_44AF80((void**)streamMaterialPixelShaderProgramPtr, (void**)outMaterialPixelShaderProgramPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialPixelShaderProgramPtr, v1);
			Save_MaterialPixelShaderProgram(true);
		}
	}
}

void Save_MaterialPixelShaderProgramPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialPixelShaderProgramPtr, sizeof(MaterialPixelShaderProgram*) * count, (void**)&outMaterialPixelShaderProgramPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialPixelShaderProgramPtr(false);
		varMaterialPixelShaderProgramPtr++;
		outMaterialPixelShaderProgramPtr++;
		streamMaterialPixelShaderProgramPtr++;
	}
}

void Save_MaterialPixelShaderPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialPixelShaderPtr, sizeof(MaterialPixelShader*), (void**)&outMaterialPixelShaderPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varMaterialPixelShaderPtr)
	{
		*outMaterialPixelShaderPtr = (MaterialPixelShader*)DB_FindStreamData(*varMaterialPixelShaderPtr);
		assert(*outMaterialPixelShaderPtr != (MaterialPixelShader*)0xFFFFFFFF);
		if (!*outMaterialPixelShaderPtr)
		{
			*outMaterialPixelShaderPtr = AllocSave_MaterialPixelShader();
			varMaterialPixelShader = *varMaterialPixelShaderPtr;
			streamMaterialPixelShader = *outMaterialPixelShaderPtr;
			auto v1 = sub_44AF80((void**)streamMaterialPixelShaderPtr, (void**)outMaterialPixelShaderPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialPixelShaderPtr, v1);
			Save_MaterialPixelShader(true);
		}
	}
	DB_PopStreamPos();
}

void Save_MaterialPixelShaderPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialPixelShaderPtr, sizeof(MaterialPixelShader*) * count, (void**)&outMaterialPixelShaderPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialPixelShaderPtr(false);
		varMaterialPixelShaderPtr++;
		outMaterialPixelShaderPtr++;
		streamMaterialPixelShaderPtr++;
	}
}

void Save_MaterialPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialPtr, sizeof(Material*), (void**)&outMaterialPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varMaterialPtr)
	{
		*outMaterialPtr = (Material*)DB_FindStreamData(*varMaterialPtr);
		assert(*outMaterialPtr != (Material*)0xFFFFFFFF);
		if (!*outMaterialPtr)
		{
			*outMaterialPtr = AllocSave_Material();
			varMaterial = *varMaterialPtr;
			streamMaterial = *outMaterialPtr;
			auto v1 = sub_44AF80((void**)streamMaterialPtr, (void**)outMaterialPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialPtr, v1);
			Save_Material(true);
		}
	}
	DB_PopStreamPos();
}

void Save_MaterialPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialPtr, sizeof(Material*) * count, (void**)&outMaterialPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialPtr(false);
		varMaterialPtr++;
		outMaterialPtr++;
		streamMaterialPtr++;
	}
}

void Save_MaterialShaderArgument(bool atStreamStart)
{
	// todo!
}

void Save_MaterialShaderArgumentArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialShaderArgument, sizeof(MaterialShaderArgument) * count, (void**)&outMaterialShaderArgument);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialShaderArgument(false);
		varMaterialShaderArgument++;
		outMaterialShaderArgument++;
		streamMaterialShaderArgument++;
	}
}

void Save_MaterialShaderArgumentPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialShaderArgumentPtr, sizeof(MaterialShaderArgument*), (void**)&outMaterialShaderArgumentPtr);
	if (*varMaterialShaderArgumentPtr)
	{
		*outMaterialShaderArgumentPtr = (MaterialShaderArgument*)DB_FindStreamData(*varMaterialShaderArgumentPtr);
		assert(*outMaterialShaderArgumentPtr != (MaterialShaderArgument*)0xFFFFFFFF);
		if (!*outMaterialShaderArgumentPtr)
		{
			*outMaterialShaderArgumentPtr = AllocSave_MaterialShaderArgument();
			varMaterialShaderArgument = *varMaterialShaderArgumentPtr;
			streamMaterialShaderArgument = *outMaterialShaderArgumentPtr;
			auto v1 = sub_44AF80((void**)streamMaterialShaderArgumentPtr, (void**)outMaterialShaderArgumentPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialShaderArgumentPtr, v1);
			Save_MaterialShaderArgument(true);
		}
	}
}

void Save_MaterialShaderArgumentPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialShaderArgumentPtr, sizeof(MaterialShaderArgument*) * count, (void**)&outMaterialShaderArgumentPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialShaderArgumentPtr(false);
		varMaterialShaderArgumentPtr++;
		outMaterialShaderArgumentPtr++;
		streamMaterialShaderArgumentPtr++;
	}
}

void Save_MaterialStreamRouting(bool atStreamStart)
{
	// todo!
}

void Save_MaterialStreamRoutingArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialStreamRouting, sizeof(MaterialStreamRouting) * count, (void**)&outMaterialStreamRouting);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialStreamRouting(false);
		varMaterialStreamRouting++;
		outMaterialStreamRouting++;
		streamMaterialStreamRouting++;
	}
}

void Save_MaterialStreamRoutingPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialStreamRoutingPtr, sizeof(MaterialStreamRouting*), (void**)&outMaterialStreamRoutingPtr);
	if (*varMaterialStreamRoutingPtr)
	{
		*outMaterialStreamRoutingPtr = (MaterialStreamRouting*)DB_FindStreamData(*varMaterialStreamRoutingPtr);
		assert(*outMaterialStreamRoutingPtr != (MaterialStreamRouting*)0xFFFFFFFF);
		if (!*outMaterialStreamRoutingPtr)
		{
			*outMaterialStreamRoutingPtr = AllocSave_MaterialStreamRouting();
			varMaterialStreamRouting = *varMaterialStreamRoutingPtr;
			streamMaterialStreamRouting = *outMaterialStreamRoutingPtr;
			auto v1 = sub_44AF80((void**)streamMaterialStreamRoutingPtr, (void**)outMaterialStreamRoutingPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialStreamRoutingPtr, v1);
			Save_MaterialStreamRouting(true);
		}
	}
}

void Save_MaterialStreamRoutingPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialStreamRoutingPtr, sizeof(MaterialStreamRouting*) * count, (void**)&outMaterialStreamRoutingPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialStreamRoutingPtr(false);
		varMaterialStreamRoutingPtr++;
		outMaterialStreamRoutingPtr++;
		streamMaterialStreamRoutingPtr++;
	}
}

void Save_MaterialTechnique(bool atStreamStart)
{
	// todo!
}

void Save_MaterialTechniqueArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialTechnique, sizeof(MaterialTechnique) * count, (void**)&outMaterialTechnique);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialTechnique(false);
		varMaterialTechnique++;
		outMaterialTechnique++;
		streamMaterialTechnique++;
	}
}

void Save_MaterialTechniquePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialTechniquePtr, sizeof(MaterialTechnique*), (void**)&outMaterialTechniquePtr);
	if (*varMaterialTechniquePtr)
	{
		*outMaterialTechniquePtr = (MaterialTechnique*)DB_FindStreamData(*varMaterialTechniquePtr);
		assert(*outMaterialTechniquePtr != (MaterialTechnique*)0xFFFFFFFF);
		if (!*outMaterialTechniquePtr)
		{
			*outMaterialTechniquePtr = AllocSave_MaterialTechnique();
			varMaterialTechnique = *varMaterialTechniquePtr;
			streamMaterialTechnique = *outMaterialTechniquePtr;
			auto v1 = sub_44AF80((void**)streamMaterialTechniquePtr, (void**)outMaterialTechniquePtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialTechniquePtr, v1);
			Save_MaterialTechnique(true);
		}
	}
}

void Save_MaterialTechniquePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialTechniquePtr, sizeof(MaterialTechnique*) * count, (void**)&outMaterialTechniquePtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialTechniquePtr(false);
		varMaterialTechniquePtr++;
		outMaterialTechniquePtr++;
		streamMaterialTechniquePtr++;
	}
}

void Save_MaterialTechniqueSet(bool atStreamStart)
{
	// todo!
}

void Save_MaterialTechniqueSetArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialTechniqueSet, sizeof(MaterialTechniqueSet) * count, (void**)&outMaterialTechniqueSet);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialTechniqueSet(false);
		varMaterialTechniqueSet++;
		outMaterialTechniqueSet++;
		streamMaterialTechniqueSet++;
	}
}

void Save_MaterialTechniqueSetAsset(MaterialTechniqueSet** asset)
{
	// todo!
}

void Save_MaterialTechniqueSetPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialTechniqueSetPtr, sizeof(MaterialTechniqueSet*), (void**)&outMaterialTechniqueSetPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varMaterialTechniqueSetPtr)
	{
		*outMaterialTechniqueSetPtr = (MaterialTechniqueSet*)DB_FindStreamData(*varMaterialTechniqueSetPtr);
		assert(*outMaterialTechniqueSetPtr != (MaterialTechniqueSet*)0xFFFFFFFF);
		if (!*outMaterialTechniqueSetPtr)
		{
			*outMaterialTechniqueSetPtr = AllocSave_MaterialTechniqueSet();
			varMaterialTechniqueSet = *varMaterialTechniqueSetPtr;
			streamMaterialTechniqueSet = *outMaterialTechniqueSetPtr;
			auto v1 = sub_44AF80((void**)streamMaterialTechniqueSetPtr, (void**)outMaterialTechniqueSetPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialTechniqueSetPtr, v1);
			Save_MaterialTechniqueSet(true);
		}
	}
	DB_PopStreamPos();
}

void Save_MaterialTechniqueSetPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialTechniqueSetPtr, sizeof(MaterialTechniqueSet*) * count, (void**)&outMaterialTechniqueSetPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialTechniqueSetPtr(false);
		varMaterialTechniqueSetPtr++;
		outMaterialTechniqueSetPtr++;
		streamMaterialTechniqueSetPtr++;
	}
}

void Save_MaterialTextureDef(bool atStreamStart)
{
	// todo!
}

void Save_MaterialTextureDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialTextureDef, sizeof(MaterialTextureDef) * count, (void**)&outMaterialTextureDef);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialTextureDef(false);
		varMaterialTextureDef++;
		outMaterialTextureDef++;
		streamMaterialTextureDef++;
	}
}

void Save_MaterialTextureDefInfo(bool atStreamStart)
{
	// todo!
}

void Save_MaterialTextureDefInfoArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialTextureDefInfo, sizeof(MaterialTextureDefInfo) * count, (void**)&outMaterialTextureDefInfo);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialTextureDefInfo(false);
		varMaterialTextureDefInfo++;
		outMaterialTextureDefInfo++;
		streamMaterialTextureDefInfo++;
	}
}

void Save_MaterialTextureDefInfoPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialTextureDefInfoPtr, sizeof(MaterialTextureDefInfo*), (void**)&outMaterialTextureDefInfoPtr);
	if (*varMaterialTextureDefInfoPtr)
	{
		*outMaterialTextureDefInfoPtr = (MaterialTextureDefInfo*)DB_FindStreamData(*varMaterialTextureDefInfoPtr);
		assert(*outMaterialTextureDefInfoPtr != (MaterialTextureDefInfo*)0xFFFFFFFF);
		if (!*outMaterialTextureDefInfoPtr)
		{
			*outMaterialTextureDefInfoPtr = AllocSave_MaterialTextureDefInfo();
			varMaterialTextureDefInfo = *varMaterialTextureDefInfoPtr;
			streamMaterialTextureDefInfo = *outMaterialTextureDefInfoPtr;
			auto v1 = sub_44AF80((void**)streamMaterialTextureDefInfoPtr, (void**)outMaterialTextureDefInfoPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialTextureDefInfoPtr, v1);
			Save_MaterialTextureDefInfo(true);
		}
	}
}

void Save_MaterialTextureDefInfoPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialTextureDefInfoPtr, sizeof(MaterialTextureDefInfo*) * count, (void**)&outMaterialTextureDefInfoPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialTextureDefInfoPtr(false);
		varMaterialTextureDefInfoPtr++;
		outMaterialTextureDefInfoPtr++;
		streamMaterialTextureDefInfoPtr++;
	}
}

void Save_MaterialTextureDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialTextureDefPtr, sizeof(MaterialTextureDef*), (void**)&outMaterialTextureDefPtr);
	if (*varMaterialTextureDefPtr)
	{
		*outMaterialTextureDefPtr = (MaterialTextureDef*)DB_FindStreamData(*varMaterialTextureDefPtr);
		assert(*outMaterialTextureDefPtr != (MaterialTextureDef*)0xFFFFFFFF);
		if (!*outMaterialTextureDefPtr)
		{
			*outMaterialTextureDefPtr = AllocSave_MaterialTextureDef();
			varMaterialTextureDef = *varMaterialTextureDefPtr;
			streamMaterialTextureDef = *outMaterialTextureDefPtr;
			auto v1 = sub_44AF80((void**)streamMaterialTextureDefPtr, (void**)outMaterialTextureDefPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialTextureDefPtr, v1);
			Save_MaterialTextureDef(true);
		}
	}
}

void Save_MaterialTextureDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialTextureDefPtr, sizeof(MaterialTextureDef*) * count, (void**)&outMaterialTextureDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialTextureDefPtr(false);
		varMaterialTextureDefPtr++;
		outMaterialTextureDefPtr++;
		streamMaterialTextureDefPtr++;
	}
}

void Save_MaterialVertexDeclaration(bool atStreamStart)
{
	// todo!
}

void Save_MaterialVertexDeclarationArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialVertexDeclaration, sizeof(MaterialVertexDeclaration) * count, (void**)&outMaterialVertexDeclaration);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialVertexDeclaration(false);
		varMaterialVertexDeclaration++;
		outMaterialVertexDeclaration++;
		streamMaterialVertexDeclaration++;
	}
}

void Save_MaterialVertexDeclarationAsset(MaterialVertexDeclaration** asset)
{
	// todo!
}

void Save_MaterialVertexDeclarationPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialVertexDeclarationPtr, sizeof(MaterialVertexDeclaration*), (void**)&outMaterialVertexDeclarationPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varMaterialVertexDeclarationPtr)
	{
		*outMaterialVertexDeclarationPtr = (MaterialVertexDeclaration*)DB_FindStreamData(*varMaterialVertexDeclarationPtr);
		assert(*outMaterialVertexDeclarationPtr != (MaterialVertexDeclaration*)0xFFFFFFFF);
		if (!*outMaterialVertexDeclarationPtr)
		{
			*outMaterialVertexDeclarationPtr = AllocSave_MaterialVertexDeclaration();
			varMaterialVertexDeclaration = *varMaterialVertexDeclarationPtr;
			streamMaterialVertexDeclaration = *outMaterialVertexDeclarationPtr;
			auto v1 = sub_44AF80((void**)streamMaterialVertexDeclarationPtr, (void**)outMaterialVertexDeclarationPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialVertexDeclarationPtr, v1);
			Save_MaterialVertexDeclaration(true);
		}
	}
	DB_PopStreamPos();
}

void Save_MaterialVertexDeclarationPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialVertexDeclarationPtr, sizeof(MaterialVertexDeclaration*) * count, (void**)&outMaterialVertexDeclarationPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialVertexDeclarationPtr(false);
		varMaterialVertexDeclarationPtr++;
		outMaterialVertexDeclarationPtr++;
		streamMaterialVertexDeclarationPtr++;
	}
}

void Save_MaterialVertexShader(bool atStreamStart)
{
	// todo!
}

void Save_MaterialVertexShaderArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialVertexShader, sizeof(MaterialVertexShader) * count, (void**)&outMaterialVertexShader);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialVertexShader(false);
		varMaterialVertexShader++;
		outMaterialVertexShader++;
		streamMaterialVertexShader++;
	}
}

void Save_MaterialVertexShaderAsset(MaterialVertexShader** asset)
{
	// todo!
}

void Save_MaterialVertexShaderProgram(bool atStreamStart)
{
	// todo!
}

void Save_MaterialVertexShaderProgramArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialVertexShaderProgram, sizeof(MaterialVertexShaderProgram) * count, (void**)&outMaterialVertexShaderProgram);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialVertexShaderProgram(false);
		varMaterialVertexShaderProgram++;
		outMaterialVertexShaderProgram++;
		streamMaterialVertexShaderProgram++;
	}
}

void Save_MaterialVertexShaderProgramPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialVertexShaderProgramPtr, sizeof(MaterialVertexShaderProgram*), (void**)&outMaterialVertexShaderProgramPtr);
	if (*varMaterialVertexShaderProgramPtr)
	{
		*outMaterialVertexShaderProgramPtr = (MaterialVertexShaderProgram*)DB_FindStreamData(*varMaterialVertexShaderProgramPtr);
		assert(*outMaterialVertexShaderProgramPtr != (MaterialVertexShaderProgram*)0xFFFFFFFF);
		if (!*outMaterialVertexShaderProgramPtr)
		{
			*outMaterialVertexShaderProgramPtr = AllocSave_MaterialVertexShaderProgram();
			varMaterialVertexShaderProgram = *varMaterialVertexShaderProgramPtr;
			streamMaterialVertexShaderProgram = *outMaterialVertexShaderProgramPtr;
			auto v1 = sub_44AF80((void**)streamMaterialVertexShaderProgramPtr, (void**)outMaterialVertexShaderProgramPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialVertexShaderProgramPtr, v1);
			Save_MaterialVertexShaderProgram(true);
		}
	}
}

void Save_MaterialVertexShaderProgramPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialVertexShaderProgramPtr, sizeof(MaterialVertexShaderProgram*) * count, (void**)&outMaterialVertexShaderProgramPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialVertexShaderProgramPtr(false);
		varMaterialVertexShaderProgramPtr++;
		outMaterialVertexShaderProgramPtr++;
		streamMaterialVertexShaderProgramPtr++;
	}
}

void Save_MaterialVertexShaderPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialVertexShaderPtr, sizeof(MaterialVertexShader*), (void**)&outMaterialVertexShaderPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varMaterialVertexShaderPtr)
	{
		*outMaterialVertexShaderPtr = (MaterialVertexShader*)DB_FindStreamData(*varMaterialVertexShaderPtr);
		assert(*outMaterialVertexShaderPtr != (MaterialVertexShader*)0xFFFFFFFF);
		if (!*outMaterialVertexShaderPtr)
		{
			*outMaterialVertexShaderPtr = AllocSave_MaterialVertexShader();
			varMaterialVertexShader = *varMaterialVertexShaderPtr;
			streamMaterialVertexShader = *outMaterialVertexShaderPtr;
			auto v1 = sub_44AF80((void**)streamMaterialVertexShaderPtr, (void**)outMaterialVertexShaderPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialVertexShaderPtr, v1);
			Save_MaterialVertexShader(true);
		}
	}
	DB_PopStreamPos();
}

void Save_MaterialVertexShaderPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialVertexShaderPtr, sizeof(MaterialVertexShader*) * count, (void**)&outMaterialVertexShaderPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialVertexShaderPtr(false);
		varMaterialVertexShaderPtr++;
		outMaterialVertexShaderPtr++;
		streamMaterialVertexShaderPtr++;
	}
}

void Save_MaterialVertexStreamRouting(bool atStreamStart)
{
	// todo!
}

void Save_MaterialVertexStreamRoutingArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialVertexStreamRouting, sizeof(MaterialVertexStreamRouting) * count, (void**)&outMaterialVertexStreamRouting);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialVertexStreamRouting(false);
		varMaterialVertexStreamRouting++;
		outMaterialVertexStreamRouting++;
		streamMaterialVertexStreamRouting++;
	}
}

void Save_MaterialVertexStreamRoutingPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMaterialVertexStreamRoutingPtr, sizeof(MaterialVertexStreamRouting*), (void**)&outMaterialVertexStreamRoutingPtr);
	if (*varMaterialVertexStreamRoutingPtr)
	{
		*outMaterialVertexStreamRoutingPtr = (MaterialVertexStreamRouting*)DB_FindStreamData(*varMaterialVertexStreamRoutingPtr);
		assert(*outMaterialVertexStreamRoutingPtr != (MaterialVertexStreamRouting*)0xFFFFFFFF);
		if (!*outMaterialVertexStreamRoutingPtr)
		{
			*outMaterialVertexStreamRoutingPtr = AllocSave_MaterialVertexStreamRouting();
			varMaterialVertexStreamRouting = *varMaterialVertexStreamRoutingPtr;
			streamMaterialVertexStreamRouting = *outMaterialVertexStreamRoutingPtr;
			auto v1 = sub_44AF80((void**)streamMaterialVertexStreamRoutingPtr, (void**)outMaterialVertexStreamRoutingPtr);
			DB_FindStreamDataOrInsert((void*)*varMaterialVertexStreamRoutingPtr, v1);
			Save_MaterialVertexStreamRouting(true);
		}
	}
}

void Save_MaterialVertexStreamRoutingPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMaterialVertexStreamRoutingPtr, sizeof(MaterialVertexStreamRouting*) * count, (void**)&outMaterialVertexStreamRoutingPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MaterialVertexStreamRoutingPtr(false);
		varMaterialVertexStreamRoutingPtr++;
		outMaterialVertexStreamRoutingPtr++;
		streamMaterialVertexStreamRoutingPtr++;
	}
}

void Save_MenuEventHandler(bool atStreamStart)
{
	// todo!
}

void Save_MenuEventHandlerArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMenuEventHandler, sizeof(MenuEventHandler) * count, (void**)&outMenuEventHandler);
	for (int i = 0; i < count; i++)
	{
		Save_MenuEventHandler(false);
		varMenuEventHandler++;
		outMenuEventHandler++;
		streamMenuEventHandler++;
	}
}

void Save_MenuEventHandlerPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMenuEventHandlerPtr, sizeof(MenuEventHandler*), (void**)&outMenuEventHandlerPtr);
	if (*varMenuEventHandlerPtr)
	{
		*outMenuEventHandlerPtr = (MenuEventHandler*)DB_FindStreamData(*varMenuEventHandlerPtr);
		assert(*outMenuEventHandlerPtr != (MenuEventHandler*)0xFFFFFFFF);
		if (!*outMenuEventHandlerPtr)
		{
			*outMenuEventHandlerPtr = AllocSave_MenuEventHandler();
			varMenuEventHandler = *varMenuEventHandlerPtr;
			streamMenuEventHandler = *outMenuEventHandlerPtr;
			auto v1 = sub_44AF80((void**)streamMenuEventHandlerPtr, (void**)outMenuEventHandlerPtr);
			DB_FindStreamDataOrInsert((void*)*varMenuEventHandlerPtr, v1);
			Save_MenuEventHandler(true);
		}
	}
}

void Save_MenuEventHandlerPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMenuEventHandlerPtr, sizeof(MenuEventHandler*) * count, (void**)&outMenuEventHandlerPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MenuEventHandlerPtr(false);
		varMenuEventHandlerPtr++;
		outMenuEventHandlerPtr++;
		streamMenuEventHandlerPtr++;
	}
}

void Save_MenuEventHandlerSet(bool atStreamStart)
{
	// todo!
}

void Save_MenuEventHandlerSetArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMenuEventHandlerSet, sizeof(MenuEventHandlerSet) * count, (void**)&outMenuEventHandlerSet);
	for (int i = 0; i < count; i++)
	{
		Save_MenuEventHandlerSet(false);
		varMenuEventHandlerSet++;
		outMenuEventHandlerSet++;
		streamMenuEventHandlerSet++;
	}
}

void Save_MenuEventHandlerSetPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMenuEventHandlerSetPtr, sizeof(MenuEventHandlerSet*), (void**)&outMenuEventHandlerSetPtr);
	if (*varMenuEventHandlerSetPtr)
	{
		*outMenuEventHandlerSetPtr = (MenuEventHandlerSet*)DB_FindStreamData(*varMenuEventHandlerSetPtr);
		assert(*outMenuEventHandlerSetPtr != (MenuEventHandlerSet*)0xFFFFFFFF);
		if (!*outMenuEventHandlerSetPtr)
		{
			*outMenuEventHandlerSetPtr = AllocSave_MenuEventHandlerSet();
			varMenuEventHandlerSet = *varMenuEventHandlerSetPtr;
			streamMenuEventHandlerSet = *outMenuEventHandlerSetPtr;
			auto v1 = sub_44AF80((void**)streamMenuEventHandlerSetPtr, (void**)outMenuEventHandlerSetPtr);
			DB_FindStreamDataOrInsert((void*)*varMenuEventHandlerSetPtr, v1);
			Save_MenuEventHandlerSet(true);
		}
	}
}

void Save_MenuEventHandlerSetPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMenuEventHandlerSetPtr, sizeof(MenuEventHandlerSet*) * count, (void**)&outMenuEventHandlerSetPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MenuEventHandlerSetPtr(false);
		varMenuEventHandlerSetPtr++;
		outMenuEventHandlerSetPtr++;
		streamMenuEventHandlerSetPtr++;
	}
}

void Save_MenuList(bool atStreamStart)
{
	// todo!
}

void Save_MenuListArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMenuList, sizeof(MenuList) * count, (void**)&outMenuList);
	for (int i = 0; i < count; i++)
	{
		Save_MenuList(false);
		varMenuList++;
		outMenuList++;
		streamMenuList++;
	}
}

void Save_MenuListAsset(MenuList** asset)
{
	// todo!
}

void Save_MenuListPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMenuListPtr, sizeof(MenuList*), (void**)&outMenuListPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varMenuListPtr)
	{
		*outMenuListPtr = (MenuList*)DB_FindStreamData(*varMenuListPtr);
		assert(*outMenuListPtr != (MenuList*)0xFFFFFFFF);
		if (!*outMenuListPtr)
		{
			*outMenuListPtr = AllocSave_MenuList();
			varMenuList = *varMenuListPtr;
			streamMenuList = *outMenuListPtr;
			auto v1 = sub_44AF80((void**)streamMenuListPtr, (void**)outMenuListPtr);
			DB_FindStreamDataOrInsert((void*)*varMenuListPtr, v1);
			Save_MenuList(true);
		}
	}
	DB_PopStreamPos();
}

void Save_MenuListPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMenuListPtr, sizeof(MenuList*) * count, (void**)&outMenuListPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MenuListPtr(false);
		varMenuListPtr++;
		outMenuListPtr++;
		streamMenuListPtr++;
	}
}

void Save_MssSound(bool atStreamStart)
{
	// todo!
}

void Save_MssSoundArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMssSound, sizeof(MssSound) * count, (void**)&outMssSound);
	for (int i = 0; i < count; i++)
	{
		Save_MssSound(false);
		varMssSound++;
		outMssSound++;
		streamMssSound++;
	}
}

void Save_MssSoundPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varMssSoundPtr, sizeof(MssSound*), (void**)&outMssSoundPtr);
	if (*varMssSoundPtr)
	{
		*outMssSoundPtr = (MssSound*)DB_FindStreamData(*varMssSoundPtr);
		assert(*outMssSoundPtr != (MssSound*)0xFFFFFFFF);
		if (!*outMssSoundPtr)
		{
			*outMssSoundPtr = AllocSave_MssSound();
			varMssSound = *varMssSoundPtr;
			streamMssSound = *outMssSoundPtr;
			auto v1 = sub_44AF80((void**)streamMssSoundPtr, (void**)outMssSoundPtr);
			DB_FindStreamDataOrInsert((void*)*varMssSoundPtr, v1);
			Save_MssSound(true);
		}
	}
}

void Save_MssSoundPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varMssSoundPtr, sizeof(MssSound*) * count, (void**)&outMssSoundPtr);
	for (int i = 0; i < count; i++)
	{
		Save_MssSoundPtr(false);
		varMssSoundPtr++;
		outMssSoundPtr++;
		streamMssSoundPtr++;
	}
}

void Save_Operand(bool atStreamStart)
{
	// todo!
}

void Save_OperandArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varOperand, sizeof(Operand) * count, (void**)&outOperand);
	for (int i = 0; i < count; i++)
	{
		Save_Operand(false);
		varOperand++;
		outOperand++;
		streamOperand++;
	}
}

void Save_OperandPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varOperandPtr, sizeof(Operand*), (void**)&outOperandPtr);
	if (*varOperandPtr)
	{
		*outOperandPtr = (Operand*)DB_FindStreamData(*varOperandPtr);
		assert(*outOperandPtr != (Operand*)0xFFFFFFFF);
		if (!*outOperandPtr)
		{
			*outOperandPtr = AllocSave_Operand();
			varOperand = *varOperandPtr;
			streamOperand = *outOperandPtr;
			auto v1 = sub_44AF80((void**)streamOperandPtr, (void**)outOperandPtr);
			DB_FindStreamDataOrInsert((void*)*varOperandPtr, v1);
			Save_Operand(true);
		}
	}
}

void Save_OperandPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varOperandPtr, sizeof(Operand*) * count, (void**)&outOperandPtr);
	for (int i = 0; i < count; i++)
	{
		Save_OperandPtr(false);
		varOperandPtr++;
		outOperandPtr++;
		streamOperandPtr++;
	}
}

void Save_PackedTexCoords(bool atStreamStart)
{
	// todo!
}

void Save_PackedTexCoordsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPackedTexCoords, sizeof(PackedTexCoords) * count, (void**)&outPackedTexCoords);
	for (int i = 0; i < count; i++)
	{
		Save_PackedTexCoords(false);
		varPackedTexCoords++;
		outPackedTexCoords++;
		streamPackedTexCoords++;
	}
}

void Save_PackedTexCoordsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varPackedTexCoordsPtr, sizeof(PackedTexCoords*), (void**)&outPackedTexCoordsPtr);
	if (*varPackedTexCoordsPtr)
	{
		*outPackedTexCoordsPtr = (PackedTexCoords*)DB_FindStreamData(*varPackedTexCoordsPtr);
		assert(*outPackedTexCoordsPtr != (PackedTexCoords*)0xFFFFFFFF);
		if (!*outPackedTexCoordsPtr)
		{
			*outPackedTexCoordsPtr = AllocSave_PackedTexCoords();
			varPackedTexCoords = *varPackedTexCoordsPtr;
			streamPackedTexCoords = *outPackedTexCoordsPtr;
			auto v1 = sub_44AF80((void**)streamPackedTexCoordsPtr, (void**)outPackedTexCoordsPtr);
			DB_FindStreamDataOrInsert((void*)*varPackedTexCoordsPtr, v1);
			Save_PackedTexCoords(true);
		}
	}
}

void Save_PackedTexCoordsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPackedTexCoordsPtr, sizeof(PackedTexCoords*) * count, (void**)&outPackedTexCoordsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_PackedTexCoordsPtr(false);
		varPackedTexCoordsPtr++;
		outPackedTexCoordsPtr++;
		streamPackedTexCoordsPtr++;
	}
}

void Save_PackedUnitVec(bool atStreamStart)
{
	// todo!
}

void Save_PackedUnitVecArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPackedUnitVec, sizeof(PackedUnitVec) * count, (void**)&outPackedUnitVec);
	for (int i = 0; i < count; i++)
	{
		Save_PackedUnitVec(false);
		varPackedUnitVec++;
		outPackedUnitVec++;
		streamPackedUnitVec++;
	}
}

void Save_PackedUnitVecPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varPackedUnitVecPtr, sizeof(PackedUnitVec*), (void**)&outPackedUnitVecPtr);
	if (*varPackedUnitVecPtr)
	{
		*outPackedUnitVecPtr = (PackedUnitVec*)DB_FindStreamData(*varPackedUnitVecPtr);
		assert(*outPackedUnitVecPtr != (PackedUnitVec*)0xFFFFFFFF);
		if (!*outPackedUnitVecPtr)
		{
			*outPackedUnitVecPtr = AllocSave_PackedUnitVec();
			varPackedUnitVec = *varPackedUnitVecPtr;
			streamPackedUnitVec = *outPackedUnitVecPtr;
			auto v1 = sub_44AF80((void**)streamPackedUnitVecPtr, (void**)outPackedUnitVecPtr);
			DB_FindStreamDataOrInsert((void*)*varPackedUnitVecPtr, v1);
			Save_PackedUnitVec(true);
		}
	}
}

void Save_PackedUnitVecPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPackedUnitVecPtr, sizeof(PackedUnitVec*) * count, (void**)&outPackedUnitVecPtr);
	for (int i = 0; i < count; i++)
	{
		Save_PackedUnitVecPtr(false);
		varPackedUnitVecPtr++;
		outPackedUnitVecPtr++;
		streamPackedUnitVecPtr++;
	}
}

void Save_PhysCollmap(bool atStreamStart)
{
	// todo!
}

void Save_PhysCollmapArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPhysCollmap, sizeof(PhysCollmap) * count, (void**)&outPhysCollmap);
	for (int i = 0; i < count; i++)
	{
		Save_PhysCollmap(false);
		varPhysCollmap++;
		outPhysCollmap++;
		streamPhysCollmap++;
	}
}

void Save_PhysCollmapAsset(PhysCollmap** asset)
{
	// todo!
}

void Save_PhysCollmapPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varPhysCollmapPtr, sizeof(PhysCollmap*), (void**)&outPhysCollmapPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varPhysCollmapPtr)
	{
		*outPhysCollmapPtr = (PhysCollmap*)DB_FindStreamData(*varPhysCollmapPtr);
		assert(*outPhysCollmapPtr != (PhysCollmap*)0xFFFFFFFF);
		if (!*outPhysCollmapPtr)
		{
			*outPhysCollmapPtr = AllocSave_PhysCollmap();
			varPhysCollmap = *varPhysCollmapPtr;
			streamPhysCollmap = *outPhysCollmapPtr;
			auto v1 = sub_44AF80((void**)streamPhysCollmapPtr, (void**)outPhysCollmapPtr);
			DB_FindStreamDataOrInsert((void*)*varPhysCollmapPtr, v1);
			Save_PhysCollmap(true);
		}
	}
	DB_PopStreamPos();
}

void Save_PhysCollmapPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPhysCollmapPtr, sizeof(PhysCollmap*) * count, (void**)&outPhysCollmapPtr);
	for (int i = 0; i < count; i++)
	{
		Save_PhysCollmapPtr(false);
		varPhysCollmapPtr++;
		outPhysCollmapPtr++;
		streamPhysCollmapPtr++;
	}
}

void Save_PhysGeomInfo(bool atStreamStart)
{
	// todo!
}

void Save_PhysGeomInfoArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPhysGeomInfo, sizeof(PhysGeomInfo) * count, (void**)&outPhysGeomInfo);
	for (int i = 0; i < count; i++)
	{
		Save_PhysGeomInfo(false);
		varPhysGeomInfo++;
		outPhysGeomInfo++;
		streamPhysGeomInfo++;
	}
}

void Save_PhysGeomInfoPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varPhysGeomInfoPtr, sizeof(PhysGeomInfo*), (void**)&outPhysGeomInfoPtr);
	if (*varPhysGeomInfoPtr)
	{
		*outPhysGeomInfoPtr = (PhysGeomInfo*)DB_FindStreamData(*varPhysGeomInfoPtr);
		assert(*outPhysGeomInfoPtr != (PhysGeomInfo*)0xFFFFFFFF);
		if (!*outPhysGeomInfoPtr)
		{
			*outPhysGeomInfoPtr = AllocSave_PhysGeomInfo();
			varPhysGeomInfo = *varPhysGeomInfoPtr;
			streamPhysGeomInfo = *outPhysGeomInfoPtr;
			auto v1 = sub_44AF80((void**)streamPhysGeomInfoPtr, (void**)outPhysGeomInfoPtr);
			DB_FindStreamDataOrInsert((void*)*varPhysGeomInfoPtr, v1);
			Save_PhysGeomInfo(true);
		}
	}
}

void Save_PhysGeomInfoPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPhysGeomInfoPtr, sizeof(PhysGeomInfo*) * count, (void**)&outPhysGeomInfoPtr);
	for (int i = 0; i < count; i++)
	{
		Save_PhysGeomInfoPtr(false);
		varPhysGeomInfoPtr++;
		outPhysGeomInfoPtr++;
		streamPhysGeomInfoPtr++;
	}
}

void Save_PhysMass(bool atStreamStart)
{
	// todo!
}

void Save_PhysMassArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPhysMass, sizeof(PhysMass) * count, (void**)&outPhysMass);
	for (int i = 0; i < count; i++)
	{
		Save_PhysMass(false);
		varPhysMass++;
		outPhysMass++;
		streamPhysMass++;
	}
}

void Save_PhysMassPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varPhysMassPtr, sizeof(PhysMass*), (void**)&outPhysMassPtr);
	if (*varPhysMassPtr)
	{
		*outPhysMassPtr = (PhysMass*)DB_FindStreamData(*varPhysMassPtr);
		assert(*outPhysMassPtr != (PhysMass*)0xFFFFFFFF);
		if (!*outPhysMassPtr)
		{
			*outPhysMassPtr = AllocSave_PhysMass();
			varPhysMass = *varPhysMassPtr;
			streamPhysMass = *outPhysMassPtr;
			auto v1 = sub_44AF80((void**)streamPhysMassPtr, (void**)outPhysMassPtr);
			DB_FindStreamDataOrInsert((void*)*varPhysMassPtr, v1);
			Save_PhysMass(true);
		}
	}
}

void Save_PhysMassPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPhysMassPtr, sizeof(PhysMass*) * count, (void**)&outPhysMassPtr);
	for (int i = 0; i < count; i++)
	{
		Save_PhysMassPtr(false);
		varPhysMassPtr++;
		outPhysMassPtr++;
		streamPhysMassPtr++;
	}
}

void Save_PhysPreset(bool atStreamStart)
{
	// todo!
}

void Save_PhysPresetArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPhysPreset, sizeof(PhysPreset) * count, (void**)&outPhysPreset);
	for (int i = 0; i < count; i++)
	{
		Save_PhysPreset(false);
		varPhysPreset++;
		outPhysPreset++;
		streamPhysPreset++;
	}
}

void Save_PhysPresetAsset(PhysPreset** asset)
{
	// todo!
}

void Save_PhysPresetPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varPhysPresetPtr, sizeof(PhysPreset*), (void**)&outPhysPresetPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varPhysPresetPtr)
	{
		*outPhysPresetPtr = (PhysPreset*)DB_FindStreamData(*varPhysPresetPtr);
		assert(*outPhysPresetPtr != (PhysPreset*)0xFFFFFFFF);
		if (!*outPhysPresetPtr)
		{
			*outPhysPresetPtr = AllocSave_PhysPreset();
			varPhysPreset = *varPhysPresetPtr;
			streamPhysPreset = *outPhysPresetPtr;
			auto v1 = sub_44AF80((void**)streamPhysPresetPtr, (void**)outPhysPresetPtr);
			DB_FindStreamDataOrInsert((void*)*varPhysPresetPtr, v1);
			Save_PhysPreset(true);
		}
	}
	DB_PopStreamPos();
}

void Save_PhysPresetPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPhysPresetPtr, sizeof(PhysPreset*) * count, (void**)&outPhysPresetPtr);
	for (int i = 0; i < count; i++)
	{
		Save_PhysPresetPtr(false);
		varPhysPresetPtr++;
		outPhysPresetPtr++;
		streamPhysPresetPtr++;
	}
}

void Save_Picmip(bool atStreamStart)
{
	// todo!
}

void Save_PicmipArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPicmip, sizeof(Picmip) * count, (void**)&outPicmip);
	for (int i = 0; i < count; i++)
	{
		Save_Picmip(false);
		varPicmip++;
		outPicmip++;
		streamPicmip++;
	}
}

void Save_PicmipPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varPicmipPtr, sizeof(Picmip*), (void**)&outPicmipPtr);
	if (*varPicmipPtr)
	{
		*outPicmipPtr = (Picmip*)DB_FindStreamData(*varPicmipPtr);
		assert(*outPicmipPtr != (Picmip*)0xFFFFFFFF);
		if (!*outPicmipPtr)
		{
			*outPicmipPtr = AllocSave_Picmip();
			varPicmip = *varPicmipPtr;
			streamPicmip = *outPicmipPtr;
			auto v1 = sub_44AF80((void**)streamPicmipPtr, (void**)outPicmipPtr);
			DB_FindStreamDataOrInsert((void*)*varPicmipPtr, v1);
			Save_Picmip(true);
		}
	}
}

void Save_PicmipPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varPicmipPtr, sizeof(Picmip*) * count, (void**)&outPicmipPtr);
	for (int i = 0; i < count; i++)
	{
		Save_PicmipPtr(false);
		varPicmipPtr++;
		outPicmipPtr++;
		streamPicmipPtr++;
	}
}

void Save_RawFile(bool atStreamStart)
{
	// todo!
}

void Save_RawFileArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varRawFile, sizeof(RawFile) * count, (void**)&outRawFile);
	for (int i = 0; i < count; i++)
	{
		Save_RawFile(false);
		varRawFile++;
		outRawFile++;
		streamRawFile++;
	}
}

void Save_RawFileAsset(RawFile** asset)
{
	// todo!
}

void Save_RawFilePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varRawFilePtr, sizeof(RawFile*), (void**)&outRawFilePtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varRawFilePtr)
	{
		*outRawFilePtr = (RawFile*)DB_FindStreamData(*varRawFilePtr);
		assert(*outRawFilePtr != (RawFile*)0xFFFFFFFF);
		if (!*outRawFilePtr)
		{
			*outRawFilePtr = AllocSave_RawFile();
			varRawFile = *varRawFilePtr;
			streamRawFile = *outRawFilePtr;
			auto v1 = sub_44AF80((void**)streamRawFilePtr, (void**)outRawFilePtr);
			DB_FindStreamDataOrInsert((void*)*varRawFilePtr, v1);
			Save_RawFile(true);
		}
	}
	DB_PopStreamPos();
}

void Save_RawFilePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varRawFilePtr, sizeof(RawFile*) * count, (void**)&outRawFilePtr);
	for (int i = 0; i < count; i++)
	{
		Save_RawFilePtr(false);
		varRawFilePtr++;
		outRawFilePtr++;
		streamRawFilePtr++;
	}
}

void Save_SModelAabbNode(bool atStreamStart)
{
	// todo!
}

void Save_SModelAabbNodeArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSModelAabbNode, sizeof(SModelAabbNode) * count, (void**)&outSModelAabbNode);
	for (int i = 0; i < count; i++)
	{
		Save_SModelAabbNode(false);
		varSModelAabbNode++;
		outSModelAabbNode++;
		streamSModelAabbNode++;
	}
}

void Save_SModelAabbNodePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varSModelAabbNodePtr, sizeof(SModelAabbNode*), (void**)&outSModelAabbNodePtr);
	if (*varSModelAabbNodePtr)
	{
		*outSModelAabbNodePtr = (SModelAabbNode*)DB_FindStreamData(*varSModelAabbNodePtr);
		assert(*outSModelAabbNodePtr != (SModelAabbNode*)0xFFFFFFFF);
		if (!*outSModelAabbNodePtr)
		{
			*outSModelAabbNodePtr = AllocSave_SModelAabbNode();
			varSModelAabbNode = *varSModelAabbNodePtr;
			streamSModelAabbNode = *outSModelAabbNodePtr;
			auto v1 = sub_44AF80((void**)streamSModelAabbNodePtr, (void**)outSModelAabbNodePtr);
			DB_FindStreamDataOrInsert((void*)*varSModelAabbNodePtr, v1);
			Save_SModelAabbNode(true);
		}
	}
}

void Save_SModelAabbNodePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSModelAabbNodePtr, sizeof(SModelAabbNode*) * count, (void**)&outSModelAabbNodePtr);
	for (int i = 0; i < count; i++)
	{
		Save_SModelAabbNodePtr(false);
		varSModelAabbNodePtr++;
		outSModelAabbNodePtr++;
		streamSModelAabbNodePtr++;
	}
}

void Save_ScriptStringList(bool atStreamStart)
{
	// todo!
}

void Save_ScriptStringListArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varScriptStringList, sizeof(ScriptStringList) * count, (void**)&outScriptStringList);
	for (int i = 0; i < count; i++)
	{
		Save_ScriptStringList(false);
		varScriptStringList++;
		outScriptStringList++;
		streamScriptStringList++;
	}
}

void Save_ScriptStringListPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varScriptStringListPtr, sizeof(ScriptStringList*), (void**)&outScriptStringListPtr);
	if (*varScriptStringListPtr)
	{
		*outScriptStringListPtr = (ScriptStringList*)DB_FindStreamData(*varScriptStringListPtr);
		assert(*outScriptStringListPtr != (ScriptStringList*)0xFFFFFFFF);
		if (!*outScriptStringListPtr)
		{
			*outScriptStringListPtr = AllocSave_ScriptStringList();
			varScriptStringList = *varScriptStringListPtr;
			streamScriptStringList = *outScriptStringListPtr;
			auto v1 = sub_44AF80((void**)streamScriptStringListPtr, (void**)outScriptStringListPtr);
			DB_FindStreamDataOrInsert((void*)*varScriptStringListPtr, v1);
			Save_ScriptStringList(true);
		}
	}
}

void Save_ScriptStringListPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varScriptStringListPtr, sizeof(ScriptStringList*) * count, (void**)&outScriptStringListPtr);
	for (int i = 0; i < count; i++)
	{
		Save_ScriptStringListPtr(false);
		varScriptStringListPtr++;
		outScriptStringListPtr++;
		streamScriptStringListPtr++;
	}
}

void Save_SetLocalVarData(bool atStreamStart)
{
	// todo!
}

void Save_SetLocalVarDataArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSetLocalVarData, sizeof(SetLocalVarData) * count, (void**)&outSetLocalVarData);
	for (int i = 0; i < count; i++)
	{
		Save_SetLocalVarData(false);
		varSetLocalVarData++;
		outSetLocalVarData++;
		streamSetLocalVarData++;
	}
}

void Save_SetLocalVarDataPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varSetLocalVarDataPtr, sizeof(SetLocalVarData*), (void**)&outSetLocalVarDataPtr);
	if (*varSetLocalVarDataPtr)
	{
		*outSetLocalVarDataPtr = (SetLocalVarData*)DB_FindStreamData(*varSetLocalVarDataPtr);
		assert(*outSetLocalVarDataPtr != (SetLocalVarData*)0xFFFFFFFF);
		if (!*outSetLocalVarDataPtr)
		{
			*outSetLocalVarDataPtr = AllocSave_SetLocalVarData();
			varSetLocalVarData = *varSetLocalVarDataPtr;
			streamSetLocalVarData = *outSetLocalVarDataPtr;
			auto v1 = sub_44AF80((void**)streamSetLocalVarDataPtr, (void**)outSetLocalVarDataPtr);
			DB_FindStreamDataOrInsert((void*)*varSetLocalVarDataPtr, v1);
			Save_SetLocalVarData(true);
		}
	}
}

void Save_SetLocalVarDataPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSetLocalVarDataPtr, sizeof(SetLocalVarData*) * count, (void**)&outSetLocalVarDataPtr);
	for (int i = 0; i < count; i++)
	{
		Save_SetLocalVarDataPtr(false);
		varSetLocalVarDataPtr++;
		outSetLocalVarDataPtr++;
		streamSetLocalVarDataPtr++;
	}
}

void Save_SndCurve(bool atStreamStart)
{
	// todo!
}

void Save_SndCurveArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSndCurve, sizeof(SndCurve) * count, (void**)&outSndCurve);
	for (int i = 0; i < count; i++)
	{
		Save_SndCurve(false);
		varSndCurve++;
		outSndCurve++;
		streamSndCurve++;
	}
}

void Save_SndCurveAsset(SndCurve** asset)
{
	// todo!
}

void Save_SndCurvePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varSndCurvePtr, sizeof(SndCurve*), (void**)&outSndCurvePtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varSndCurvePtr)
	{
		*outSndCurvePtr = (SndCurve*)DB_FindStreamData(*varSndCurvePtr);
		assert(*outSndCurvePtr != (SndCurve*)0xFFFFFFFF);
		if (!*outSndCurvePtr)
		{
			*outSndCurvePtr = AllocSave_SndCurve();
			varSndCurve = *varSndCurvePtr;
			streamSndCurve = *outSndCurvePtr;
			auto v1 = sub_44AF80((void**)streamSndCurvePtr, (void**)outSndCurvePtr);
			DB_FindStreamDataOrInsert((void*)*varSndCurvePtr, v1);
			Save_SndCurve(true);
		}
	}
	DB_PopStreamPos();
}

void Save_SndCurvePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSndCurvePtr, sizeof(SndCurve*) * count, (void**)&outSndCurvePtr);
	for (int i = 0; i < count; i++)
	{
		Save_SndCurvePtr(false);
		varSndCurvePtr++;
		outSndCurvePtr++;
		streamSndCurvePtr++;
	}
}

void Save_SndDriverGlobals(bool atStreamStart)
{
	// todo!
}

void Save_SndDriverGlobalsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSndDriverGlobals, sizeof(SndDriverGlobals) * count, (void**)&outSndDriverGlobals);
	for (int i = 0; i < count; i++)
	{
		Save_SndDriverGlobals(false);
		varSndDriverGlobals++;
		outSndDriverGlobals++;
		streamSndDriverGlobals++;
	}
}

void Save_SndDriverGlobalsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varSndDriverGlobalsPtr, sizeof(SndDriverGlobals*), (void**)&outSndDriverGlobalsPtr);
	if (*varSndDriverGlobalsPtr)
	{
		*outSndDriverGlobalsPtr = (SndDriverGlobals*)DB_FindStreamData(*varSndDriverGlobalsPtr);
		assert(*outSndDriverGlobalsPtr != (SndDriverGlobals*)0xFFFFFFFF);
		if (!*outSndDriverGlobalsPtr)
		{
			*outSndDriverGlobalsPtr = AllocSave_SndDriverGlobals();
			varSndDriverGlobals = *varSndDriverGlobalsPtr;
			streamSndDriverGlobals = *outSndDriverGlobalsPtr;
			auto v1 = sub_44AF80((void**)streamSndDriverGlobalsPtr, (void**)outSndDriverGlobalsPtr);
			DB_FindStreamDataOrInsert((void*)*varSndDriverGlobalsPtr, v1);
			Save_SndDriverGlobals(true);
		}
	}
}

void Save_SndDriverGlobalsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSndDriverGlobalsPtr, sizeof(SndDriverGlobals*) * count, (void**)&outSndDriverGlobalsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_SndDriverGlobalsPtr(false);
		varSndDriverGlobalsPtr++;
		outSndDriverGlobalsPtr++;
		streamSndDriverGlobalsPtr++;
	}
}

void Save_SoundFile(bool atStreamStart)
{
	// todo!
}

void Save_SoundFileArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSoundFile, sizeof(SoundFile) * count, (void**)&outSoundFile);
	for (int i = 0; i < count; i++)
	{
		Save_SoundFile(false);
		varSoundFile++;
		outSoundFile++;
		streamSoundFile++;
	}
}

void Save_SoundFilePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varSoundFilePtr, sizeof(SoundFile*), (void**)&outSoundFilePtr);
	if (*varSoundFilePtr)
	{
		*outSoundFilePtr = (SoundFile*)DB_FindStreamData(*varSoundFilePtr);
		assert(*outSoundFilePtr != (SoundFile*)0xFFFFFFFF);
		if (!*outSoundFilePtr)
		{
			*outSoundFilePtr = AllocSave_SoundFile();
			varSoundFile = *varSoundFilePtr;
			streamSoundFile = *outSoundFilePtr;
			auto v1 = sub_44AF80((void**)streamSoundFilePtr, (void**)outSoundFilePtr);
			DB_FindStreamDataOrInsert((void*)*varSoundFilePtr, v1);
			Save_SoundFile(true);
		}
	}
}

void Save_SoundFilePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSoundFilePtr, sizeof(SoundFile*) * count, (void**)&outSoundFilePtr);
	for (int i = 0; i < count; i++)
	{
		Save_SoundFilePtr(false);
		varSoundFilePtr++;
		outSoundFilePtr++;
		streamSoundFilePtr++;
	}
}

void Save_SoundFileRef(bool atStreamStart)
{
	// todo!
}

void Save_SoundFileRefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSoundFileRef, sizeof(SoundFileRef) * count, (void**)&outSoundFileRef);
	for (int i = 0; i < count; i++)
	{
		Save_SoundFileRef(false);
		varSoundFileRef++;
		outSoundFileRef++;
		streamSoundFileRef++;
	}
}

void Save_SoundFileRefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varSoundFileRefPtr, sizeof(SoundFileRef*), (void**)&outSoundFileRefPtr);
	if (*varSoundFileRefPtr)
	{
		*outSoundFileRefPtr = (SoundFileRef*)DB_FindStreamData(*varSoundFileRefPtr);
		assert(*outSoundFileRefPtr != (SoundFileRef*)0xFFFFFFFF);
		if (!*outSoundFileRefPtr)
		{
			*outSoundFileRefPtr = AllocSave_SoundFileRef();
			varSoundFileRef = *varSoundFileRefPtr;
			streamSoundFileRef = *outSoundFileRefPtr;
			auto v1 = sub_44AF80((void**)streamSoundFileRefPtr, (void**)outSoundFileRefPtr);
			DB_FindStreamDataOrInsert((void*)*varSoundFileRefPtr, v1);
			Save_SoundFileRef(true);
		}
	}
}

void Save_SoundFileRefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSoundFileRefPtr, sizeof(SoundFileRef*) * count, (void**)&outSoundFileRefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_SoundFileRefPtr(false);
		varSoundFileRefPtr++;
		outSoundFileRefPtr++;
		streamSoundFileRefPtr++;
	}
}

void Save_SpeakerMap(bool atStreamStart)
{
	// todo!
}

void Save_SpeakerMapArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSpeakerMap, sizeof(SpeakerMap) * count, (void**)&outSpeakerMap);
	for (int i = 0; i < count; i++)
	{
		Save_SpeakerMap(false);
		varSpeakerMap++;
		outSpeakerMap++;
		streamSpeakerMap++;
	}
}

void Save_SpeakerMapPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varSpeakerMapPtr, sizeof(SpeakerMap*), (void**)&outSpeakerMapPtr);
	if (*varSpeakerMapPtr)
	{
		*outSpeakerMapPtr = (SpeakerMap*)DB_FindStreamData(*varSpeakerMapPtr);
		assert(*outSpeakerMapPtr != (SpeakerMap*)0xFFFFFFFF);
		if (!*outSpeakerMapPtr)
		{
			*outSpeakerMapPtr = AllocSave_SpeakerMap();
			varSpeakerMap = *varSpeakerMapPtr;
			streamSpeakerMap = *outSpeakerMapPtr;
			auto v1 = sub_44AF80((void**)streamSpeakerMapPtr, (void**)outSpeakerMapPtr);
			DB_FindStreamDataOrInsert((void*)*varSpeakerMapPtr, v1);
			Save_SpeakerMap(true);
		}
	}
}

void Save_SpeakerMapPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varSpeakerMapPtr, sizeof(SpeakerMap*) * count, (void**)&outSpeakerMapPtr);
	for (int i = 0; i < count; i++)
	{
		Save_SpeakerMapPtr(false);
		varSpeakerMapPtr++;
		outSpeakerMapPtr++;
		streamSpeakerMapPtr++;
	}
}

void Save_Stage(bool atStreamStart)
{
	// todo!
}

void Save_StageArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStage, sizeof(Stage) * count, (void**)&outStage);
	for (int i = 0; i < count; i++)
	{
		Save_Stage(false);
		varStage++;
		outStage++;
		streamStage++;
	}
}

void Save_StagePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStagePtr, sizeof(Stage*), (void**)&outStagePtr);
	if (*varStagePtr)
	{
		*outStagePtr = (Stage*)DB_FindStreamData(*varStagePtr);
		assert(*outStagePtr != (Stage*)0xFFFFFFFF);
		if (!*outStagePtr)
		{
			*outStagePtr = AllocSave_Stage();
			varStage = *varStagePtr;
			streamStage = *outStagePtr;
			auto v1 = sub_44AF80((void**)streamStagePtr, (void**)outStagePtr);
			DB_FindStreamDataOrInsert((void*)*varStagePtr, v1);
			Save_Stage(true);
		}
	}
}

void Save_StagePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStagePtr, sizeof(Stage*) * count, (void**)&outStagePtr);
	for (int i = 0; i < count; i++)
	{
		Save_StagePtr(false);
		varStagePtr++;
		outStagePtr++;
		streamStagePtr++;
	}
}

void Save_Statement_s(bool atStreamStart)
{
	// todo!
}

void Save_Statement_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStatement_s, sizeof(Statement_s) * count, (void**)&outStatement_s);
	for (int i = 0; i < count; i++)
	{
		Save_Statement_s(false);
		varStatement_s++;
		outStatement_s++;
		streamStatement_s++;
	}
}

void Save_Statement_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStatement_sPtr, sizeof(Statement_s*), (void**)&outStatement_sPtr);
	if (*varStatement_sPtr)
	{
		*outStatement_sPtr = (Statement_s*)DB_FindStreamData(*varStatement_sPtr);
		assert(*outStatement_sPtr != (Statement_s*)0xFFFFFFFF);
		if (!*outStatement_sPtr)
		{
			*outStatement_sPtr = AllocSave_Statement_s();
			varStatement_s = *varStatement_sPtr;
			streamStatement_s = *outStatement_sPtr;
			auto v1 = sub_44AF80((void**)streamStatement_sPtr, (void**)outStatement_sPtr);
			DB_FindStreamDataOrInsert((void*)*varStatement_sPtr, v1);
			Save_Statement_s(true);
		}
	}
}

void Save_Statement_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStatement_sPtr, sizeof(Statement_s*) * count, (void**)&outStatement_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_Statement_sPtr(false);
		varStatement_sPtr++;
		outStatement_sPtr++;
		streamStatement_sPtr++;
	}
}

void Save_StaticDvar(bool atStreamStart)
{
	// todo!
}

void Save_StaticDvarArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStaticDvar, sizeof(StaticDvar) * count, (void**)&outStaticDvar);
	for (int i = 0; i < count; i++)
	{
		Save_StaticDvar(false);
		varStaticDvar++;
		outStaticDvar++;
		streamStaticDvar++;
	}
}

void Save_StaticDvarList(bool atStreamStart)
{
	// todo!
}

void Save_StaticDvarListArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStaticDvarList, sizeof(StaticDvarList) * count, (void**)&outStaticDvarList);
	for (int i = 0; i < count; i++)
	{
		Save_StaticDvarList(false);
		varStaticDvarList++;
		outStaticDvarList++;
		streamStaticDvarList++;
	}
}

void Save_StaticDvarListPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStaticDvarListPtr, sizeof(StaticDvarList*), (void**)&outStaticDvarListPtr);
	if (*varStaticDvarListPtr)
	{
		*outStaticDvarListPtr = (StaticDvarList*)DB_FindStreamData(*varStaticDvarListPtr);
		assert(*outStaticDvarListPtr != (StaticDvarList*)0xFFFFFFFF);
		if (!*outStaticDvarListPtr)
		{
			*outStaticDvarListPtr = AllocSave_StaticDvarList();
			varStaticDvarList = *varStaticDvarListPtr;
			streamStaticDvarList = *outStaticDvarListPtr;
			auto v1 = sub_44AF80((void**)streamStaticDvarListPtr, (void**)outStaticDvarListPtr);
			DB_FindStreamDataOrInsert((void*)*varStaticDvarListPtr, v1);
			Save_StaticDvarList(true);
		}
	}
}

void Save_StaticDvarListPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStaticDvarListPtr, sizeof(StaticDvarList*) * count, (void**)&outStaticDvarListPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StaticDvarListPtr(false);
		varStaticDvarListPtr++;
		outStaticDvarListPtr++;
		streamStaticDvarListPtr++;
	}
}

void Save_StaticDvarPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStaticDvarPtr, sizeof(StaticDvar*), (void**)&outStaticDvarPtr);
	if (*varStaticDvarPtr)
	{
		*outStaticDvarPtr = (StaticDvar*)DB_FindStreamData(*varStaticDvarPtr);
		assert(*outStaticDvarPtr != (StaticDvar*)0xFFFFFFFF);
		if (!*outStaticDvarPtr)
		{
			*outStaticDvarPtr = AllocSave_StaticDvar();
			varStaticDvar = *varStaticDvarPtr;
			streamStaticDvar = *outStaticDvarPtr;
			auto v1 = sub_44AF80((void**)streamStaticDvarPtr, (void**)outStaticDvarPtr);
			DB_FindStreamDataOrInsert((void*)*varStaticDvarPtr, v1);
			Save_StaticDvar(true);
		}
	}
}

void Save_StaticDvarPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStaticDvarPtr, sizeof(StaticDvar*) * count, (void**)&outStaticDvarPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StaticDvarPtr(false);
		varStaticDvarPtr++;
		outStaticDvarPtr++;
		streamStaticDvarPtr++;
	}
}

void Save_StreamFileInfo(bool atStreamStart)
{
	// todo!
}

void Save_StreamFileInfoArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStreamFileInfo, sizeof(StreamFileInfo) * count, (void**)&outStreamFileInfo);
	for (int i = 0; i < count; i++)
	{
		Save_StreamFileInfo(false);
		varStreamFileInfo++;
		outStreamFileInfo++;
		streamStreamFileInfo++;
	}
}

void Save_StreamFileInfoPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStreamFileInfoPtr, sizeof(StreamFileInfo*), (void**)&outStreamFileInfoPtr);
	if (*varStreamFileInfoPtr)
	{
		*outStreamFileInfoPtr = (StreamFileInfo*)DB_FindStreamData(*varStreamFileInfoPtr);
		assert(*outStreamFileInfoPtr != (StreamFileInfo*)0xFFFFFFFF);
		if (!*outStreamFileInfoPtr)
		{
			*outStreamFileInfoPtr = AllocSave_StreamFileInfo();
			varStreamFileInfo = *varStreamFileInfoPtr;
			streamStreamFileInfo = *outStreamFileInfoPtr;
			auto v1 = sub_44AF80((void**)streamStreamFileInfoPtr, (void**)outStreamFileInfoPtr);
			DB_FindStreamDataOrInsert((void*)*varStreamFileInfoPtr, v1);
			Save_StreamFileInfo(true);
		}
	}
}

void Save_StreamFileInfoPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStreamFileInfoPtr, sizeof(StreamFileInfo*) * count, (void**)&outStreamFileInfoPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StreamFileInfoPtr(false);
		varStreamFileInfoPtr++;
		outStreamFileInfoPtr++;
		streamStreamFileInfoPtr++;
	}
}

void Save_StreamFileName(bool atStreamStart)
{
	// todo!
}

void Save_StreamFileNameArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStreamFileName, sizeof(StreamFileName) * count, (void**)&outStreamFileName);
	for (int i = 0; i < count; i++)
	{
		Save_StreamFileName(false);
		varStreamFileName++;
		outStreamFileName++;
		streamStreamFileName++;
	}
}

void Save_StreamFileNamePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStreamFileNamePtr, sizeof(StreamFileName*), (void**)&outStreamFileNamePtr);
	if (*varStreamFileNamePtr)
	{
		*outStreamFileNamePtr = (StreamFileName*)DB_FindStreamData(*varStreamFileNamePtr);
		assert(*outStreamFileNamePtr != (StreamFileName*)0xFFFFFFFF);
		if (!*outStreamFileNamePtr)
		{
			*outStreamFileNamePtr = AllocSave_StreamFileName();
			varStreamFileName = *varStreamFileNamePtr;
			streamStreamFileName = *outStreamFileNamePtr;
			auto v1 = sub_44AF80((void**)streamStreamFileNamePtr, (void**)outStreamFileNamePtr);
			DB_FindStreamDataOrInsert((void*)*varStreamFileNamePtr, v1);
			Save_StreamFileName(true);
		}
	}
}

void Save_StreamFileNamePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStreamFileNamePtr, sizeof(StreamFileName*) * count, (void**)&outStreamFileNamePtr);
	for (int i = 0; i < count; i++)
	{
		Save_StreamFileNamePtr(false);
		varStreamFileNamePtr++;
		outStreamFileNamePtr++;
		streamStreamFileNamePtr++;
	}
}

void Save_StreamFileNameRaw(bool atStreamStart)
{
	// todo!
}

void Save_StreamFileNameRawArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStreamFileNameRaw, sizeof(StreamFileNameRaw) * count, (void**)&outStreamFileNameRaw);
	for (int i = 0; i < count; i++)
	{
		Save_StreamFileNameRaw(false);
		varStreamFileNameRaw++;
		outStreamFileNameRaw++;
		streamStreamFileNameRaw++;
	}
}

void Save_StreamFileNameRawPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStreamFileNameRawPtr, sizeof(StreamFileNameRaw*), (void**)&outStreamFileNameRawPtr);
	if (*varStreamFileNameRawPtr)
	{
		*outStreamFileNameRawPtr = (StreamFileNameRaw*)DB_FindStreamData(*varStreamFileNameRawPtr);
		assert(*outStreamFileNameRawPtr != (StreamFileNameRaw*)0xFFFFFFFF);
		if (!*outStreamFileNameRawPtr)
		{
			*outStreamFileNameRawPtr = AllocSave_StreamFileNameRaw();
			varStreamFileNameRaw = *varStreamFileNameRawPtr;
			streamStreamFileNameRaw = *outStreamFileNameRawPtr;
			auto v1 = sub_44AF80((void**)streamStreamFileNameRawPtr, (void**)outStreamFileNameRawPtr);
			DB_FindStreamDataOrInsert((void*)*varStreamFileNameRawPtr, v1);
			Save_StreamFileNameRaw(true);
		}
	}
}

void Save_StreamFileNameRawPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStreamFileNameRawPtr, sizeof(StreamFileNameRaw*) * count, (void**)&outStreamFileNameRawPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StreamFileNameRawPtr(false);
		varStreamFileNameRawPtr++;
		outStreamFileNameRawPtr++;
		streamStreamFileNameRawPtr++;
	}
}

void Save_StreamedSound(bool atStreamStart)
{
	// todo!
}

void Save_StreamedSoundArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStreamedSound, sizeof(StreamedSound) * count, (void**)&outStreamedSound);
	for (int i = 0; i < count; i++)
	{
		Save_StreamedSound(false);
		varStreamedSound++;
		outStreamedSound++;
		streamStreamedSound++;
	}
}

void Save_StreamedSoundPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStreamedSoundPtr, sizeof(StreamedSound*), (void**)&outStreamedSoundPtr);
	if (*varStreamedSoundPtr)
	{
		*outStreamedSoundPtr = (StreamedSound*)DB_FindStreamData(*varStreamedSoundPtr);
		assert(*outStreamedSoundPtr != (StreamedSound*)0xFFFFFFFF);
		if (!*outStreamedSoundPtr)
		{
			*outStreamedSoundPtr = AllocSave_StreamedSound();
			varStreamedSound = *varStreamedSoundPtr;
			streamStreamedSound = *outStreamedSoundPtr;
			auto v1 = sub_44AF80((void**)streamStreamedSoundPtr, (void**)outStreamedSoundPtr);
			DB_FindStreamDataOrInsert((void*)*varStreamedSoundPtr, v1);
			Save_StreamedSound(true);
		}
	}
}

void Save_StreamedSoundPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStreamedSoundPtr, sizeof(StreamedSound*) * count, (void**)&outStreamedSoundPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StreamedSoundPtr(false);
		varStreamedSoundPtr++;
		outStreamedSoundPtr++;
		streamStreamedSoundPtr++;
	}
}

void Save_StringList(bool atStreamStart)
{
	// todo!
}

void Save_StringListArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStringList, sizeof(StringList) * count, (void**)&outStringList);
	for (int i = 0; i < count; i++)
	{
		Save_StringList(false);
		varStringList++;
		outStringList++;
		streamStringList++;
	}
}

void Save_StringListPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStringListPtr, sizeof(StringList*), (void**)&outStringListPtr);
	if (*varStringListPtr)
	{
		*outStringListPtr = (StringList*)DB_FindStreamData(*varStringListPtr);
		assert(*outStringListPtr != (StringList*)0xFFFFFFFF);
		if (!*outStringListPtr)
		{
			*outStringListPtr = AllocSave_StringList();
			varStringList = *varStringListPtr;
			streamStringList = *outStringListPtr;
			auto v1 = sub_44AF80((void**)streamStringListPtr, (void**)outStringListPtr);
			DB_FindStreamDataOrInsert((void*)*varStringListPtr, v1);
			Save_StringList(true);
		}
	}
}

void Save_StringListPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStringListPtr, sizeof(StringList*) * count, (void**)&outStringListPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StringListPtr(false);
		varStringListPtr++;
		outStringListPtr++;
		streamStringListPtr++;
	}
}

void Save_StringTable(bool atStreamStart)
{
	// todo!
}

void Save_StringTableArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStringTable, sizeof(StringTable) * count, (void**)&outStringTable);
	for (int i = 0; i < count; i++)
	{
		Save_StringTable(false);
		varStringTable++;
		outStringTable++;
		streamStringTable++;
	}
}

void Save_StringTableAsset(StringTable** asset)
{
	// todo!
}

void Save_StringTableCell(bool atStreamStart)
{
	// todo!
}

void Save_StringTableCellArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStringTableCell, sizeof(StringTableCell) * count, (void**)&outStringTableCell);
	for (int i = 0; i < count; i++)
	{
		Save_StringTableCell(false);
		varStringTableCell++;
		outStringTableCell++;
		streamStringTableCell++;
	}
}

void Save_StringTableCellPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStringTableCellPtr, sizeof(StringTableCell*), (void**)&outStringTableCellPtr);
	if (*varStringTableCellPtr)
	{
		*outStringTableCellPtr = (StringTableCell*)DB_FindStreamData(*varStringTableCellPtr);
		assert(*outStringTableCellPtr != (StringTableCell*)0xFFFFFFFF);
		if (!*outStringTableCellPtr)
		{
			*outStringTableCellPtr = AllocSave_StringTableCell();
			varStringTableCell = *varStringTableCellPtr;
			streamStringTableCell = *outStringTableCellPtr;
			auto v1 = sub_44AF80((void**)streamStringTableCellPtr, (void**)outStringTableCellPtr);
			DB_FindStreamDataOrInsert((void*)*varStringTableCellPtr, v1);
			Save_StringTableCell(true);
		}
	}
}

void Save_StringTableCellPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStringTableCellPtr, sizeof(StringTableCell*) * count, (void**)&outStringTableCellPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StringTableCellPtr(false);
		varStringTableCellPtr++;
		outStringTableCellPtr++;
		streamStringTableCellPtr++;
	}
}

void Save_StringTablePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStringTablePtr, sizeof(StringTable*), (void**)&outStringTablePtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varStringTablePtr)
	{
		*outStringTablePtr = (StringTable*)DB_FindStreamData(*varStringTablePtr);
		assert(*outStringTablePtr != (StringTable*)0xFFFFFFFF);
		if (!*outStringTablePtr)
		{
			*outStringTablePtr = AllocSave_StringTable();
			varStringTable = *varStringTablePtr;
			streamStringTable = *outStringTablePtr;
			auto v1 = sub_44AF80((void**)streamStringTablePtr, (void**)outStringTablePtr);
			DB_FindStreamDataOrInsert((void*)*varStringTablePtr, v1);
			Save_StringTable(true);
		}
	}
	DB_PopStreamPos();
}

void Save_StringTablePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStringTablePtr, sizeof(StringTable*) * count, (void**)&outStringTablePtr);
	for (int i = 0; i < count; i++)
	{
		Save_StringTablePtr(false);
		varStringTablePtr++;
		outStringTablePtr++;
		streamStringTablePtr++;
	}
}

void Save_StructuredDataDef(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataDef, sizeof(StructuredDataDef) * count, (void**)&outStructuredDataDef);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataDef(false);
		varStructuredDataDef++;
		outStructuredDataDef++;
		streamStructuredDataDef++;
	}
}

void Save_StructuredDataDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataDefPtr, sizeof(StructuredDataDef*), (void**)&outStructuredDataDefPtr);
	if (*varStructuredDataDefPtr)
	{
		*outStructuredDataDefPtr = (StructuredDataDef*)DB_FindStreamData(*varStructuredDataDefPtr);
		assert(*outStructuredDataDefPtr != (StructuredDataDef*)0xFFFFFFFF);
		if (!*outStructuredDataDefPtr)
		{
			*outStructuredDataDefPtr = AllocSave_StructuredDataDef();
			varStructuredDataDef = *varStructuredDataDefPtr;
			streamStructuredDataDef = *outStructuredDataDefPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataDefPtr, (void**)outStructuredDataDefPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataDefPtr, v1);
			Save_StructuredDataDef(true);
		}
	}
}

void Save_StructuredDataDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataDefPtr, sizeof(StructuredDataDef*) * count, (void**)&outStructuredDataDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataDefPtr(false);
		varStructuredDataDefPtr++;
		outStructuredDataDefPtr++;
		streamStructuredDataDefPtr++;
	}
}

void Save_StructuredDataDefSet(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataDefSetArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataDefSet, sizeof(StructuredDataDefSet) * count, (void**)&outStructuredDataDefSet);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataDefSet(false);
		varStructuredDataDefSet++;
		outStructuredDataDefSet++;
		streamStructuredDataDefSet++;
	}
}

void Save_StructuredDataDefSetAsset(StructuredDataDefSet** asset)
{
	// todo!
}

void Save_StructuredDataDefSetPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataDefSetPtr, sizeof(StructuredDataDefSet*), (void**)&outStructuredDataDefSetPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varStructuredDataDefSetPtr)
	{
		*outStructuredDataDefSetPtr = (StructuredDataDefSet*)DB_FindStreamData(*varStructuredDataDefSetPtr);
		assert(*outStructuredDataDefSetPtr != (StructuredDataDefSet*)0xFFFFFFFF);
		if (!*outStructuredDataDefSetPtr)
		{
			*outStructuredDataDefSetPtr = AllocSave_StructuredDataDefSet();
			varStructuredDataDefSet = *varStructuredDataDefSetPtr;
			streamStructuredDataDefSet = *outStructuredDataDefSetPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataDefSetPtr, (void**)outStructuredDataDefSetPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataDefSetPtr, v1);
			Save_StructuredDataDefSet(true);
		}
	}
	DB_PopStreamPos();
}

void Save_StructuredDataDefSetPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataDefSetPtr, sizeof(StructuredDataDefSet*) * count, (void**)&outStructuredDataDefSetPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataDefSetPtr(false);
		varStructuredDataDefSetPtr++;
		outStructuredDataDefSetPtr++;
		streamStructuredDataDefSetPtr++;
	}
}

void Save_StructuredDataEnum(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataEnumArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataEnum, sizeof(StructuredDataEnum) * count, (void**)&outStructuredDataEnum);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataEnum(false);
		varStructuredDataEnum++;
		outStructuredDataEnum++;
		streamStructuredDataEnum++;
	}
}

void Save_StructuredDataEnumEntry(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataEnumEntryArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataEnumEntry, sizeof(StructuredDataEnumEntry) * count, (void**)&outStructuredDataEnumEntry);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataEnumEntry(false);
		varStructuredDataEnumEntry++;
		outStructuredDataEnumEntry++;
		streamStructuredDataEnumEntry++;
	}
}

void Save_StructuredDataEnumEntryPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataEnumEntryPtr, sizeof(StructuredDataEnumEntry*), (void**)&outStructuredDataEnumEntryPtr);
	if (*varStructuredDataEnumEntryPtr)
	{
		*outStructuredDataEnumEntryPtr = (StructuredDataEnumEntry*)DB_FindStreamData(*varStructuredDataEnumEntryPtr);
		assert(*outStructuredDataEnumEntryPtr != (StructuredDataEnumEntry*)0xFFFFFFFF);
		if (!*outStructuredDataEnumEntryPtr)
		{
			*outStructuredDataEnumEntryPtr = AllocSave_StructuredDataEnumEntry();
			varStructuredDataEnumEntry = *varStructuredDataEnumEntryPtr;
			streamStructuredDataEnumEntry = *outStructuredDataEnumEntryPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataEnumEntryPtr, (void**)outStructuredDataEnumEntryPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataEnumEntryPtr, v1);
			Save_StructuredDataEnumEntry(true);
		}
	}
}

void Save_StructuredDataEnumEntryPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataEnumEntryPtr, sizeof(StructuredDataEnumEntry*) * count, (void**)&outStructuredDataEnumEntryPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataEnumEntryPtr(false);
		varStructuredDataEnumEntryPtr++;
		outStructuredDataEnumEntryPtr++;
		streamStructuredDataEnumEntryPtr++;
	}
}

void Save_StructuredDataEnumPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataEnumPtr, sizeof(StructuredDataEnum*), (void**)&outStructuredDataEnumPtr);
	if (*varStructuredDataEnumPtr)
	{
		*outStructuredDataEnumPtr = (StructuredDataEnum*)DB_FindStreamData(*varStructuredDataEnumPtr);
		assert(*outStructuredDataEnumPtr != (StructuredDataEnum*)0xFFFFFFFF);
		if (!*outStructuredDataEnumPtr)
		{
			*outStructuredDataEnumPtr = AllocSave_StructuredDataEnum();
			varStructuredDataEnum = *varStructuredDataEnumPtr;
			streamStructuredDataEnum = *outStructuredDataEnumPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataEnumPtr, (void**)outStructuredDataEnumPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataEnumPtr, v1);
			Save_StructuredDataEnum(true);
		}
	}
}

void Save_StructuredDataEnumPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataEnumPtr, sizeof(StructuredDataEnum*) * count, (void**)&outStructuredDataEnumPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataEnumPtr(false);
		varStructuredDataEnumPtr++;
		outStructuredDataEnumPtr++;
		streamStructuredDataEnumPtr++;
	}
}

void Save_StructuredDataEnumedArray(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataEnumedArrayArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataEnumedArray, sizeof(StructuredDataEnumedArray) * count, (void**)&outStructuredDataEnumedArray);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataEnumedArray(false);
		varStructuredDataEnumedArray++;
		outStructuredDataEnumedArray++;
		streamStructuredDataEnumedArray++;
	}
}

void Save_StructuredDataEnumedArrayPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataEnumedArrayPtr, sizeof(StructuredDataEnumedArray*), (void**)&outStructuredDataEnumedArrayPtr);
	if (*varStructuredDataEnumedArrayPtr)
	{
		*outStructuredDataEnumedArrayPtr = (StructuredDataEnumedArray*)DB_FindStreamData(*varStructuredDataEnumedArrayPtr);
		assert(*outStructuredDataEnumedArrayPtr != (StructuredDataEnumedArray*)0xFFFFFFFF);
		if (!*outStructuredDataEnumedArrayPtr)
		{
			*outStructuredDataEnumedArrayPtr = AllocSave_StructuredDataEnumedArray();
			varStructuredDataEnumedArray = *varStructuredDataEnumedArrayPtr;
			streamStructuredDataEnumedArray = *outStructuredDataEnumedArrayPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataEnumedArrayPtr, (void**)outStructuredDataEnumedArrayPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataEnumedArrayPtr, v1);
			Save_StructuredDataEnumedArray(true);
		}
	}
}

void Save_StructuredDataEnumedArrayPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataEnumedArrayPtr, sizeof(StructuredDataEnumedArray*) * count, (void**)&outStructuredDataEnumedArrayPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataEnumedArrayPtr(false);
		varStructuredDataEnumedArrayPtr++;
		outStructuredDataEnumedArrayPtr++;
		streamStructuredDataEnumedArrayPtr++;
	}
}

void Save_StructuredDataIndexedArray(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataIndexedArrayArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataIndexedArray, sizeof(StructuredDataIndexedArray) * count, (void**)&outStructuredDataIndexedArray);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataIndexedArray(false);
		varStructuredDataIndexedArray++;
		outStructuredDataIndexedArray++;
		streamStructuredDataIndexedArray++;
	}
}

void Save_StructuredDataIndexedArrayPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataIndexedArrayPtr, sizeof(StructuredDataIndexedArray*), (void**)&outStructuredDataIndexedArrayPtr);
	if (*varStructuredDataIndexedArrayPtr)
	{
		*outStructuredDataIndexedArrayPtr = (StructuredDataIndexedArray*)DB_FindStreamData(*varStructuredDataIndexedArrayPtr);
		assert(*outStructuredDataIndexedArrayPtr != (StructuredDataIndexedArray*)0xFFFFFFFF);
		if (!*outStructuredDataIndexedArrayPtr)
		{
			*outStructuredDataIndexedArrayPtr = AllocSave_StructuredDataIndexedArray();
			varStructuredDataIndexedArray = *varStructuredDataIndexedArrayPtr;
			streamStructuredDataIndexedArray = *outStructuredDataIndexedArrayPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataIndexedArrayPtr, (void**)outStructuredDataIndexedArrayPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataIndexedArrayPtr, v1);
			Save_StructuredDataIndexedArray(true);
		}
	}
}

void Save_StructuredDataIndexedArrayPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataIndexedArrayPtr, sizeof(StructuredDataIndexedArray*) * count, (void**)&outStructuredDataIndexedArrayPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataIndexedArrayPtr(false);
		varStructuredDataIndexedArrayPtr++;
		outStructuredDataIndexedArrayPtr++;
		streamStructuredDataIndexedArrayPtr++;
	}
}

void Save_StructuredDataStruct(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataStructArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataStruct, sizeof(StructuredDataStruct) * count, (void**)&outStructuredDataStruct);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataStruct(false);
		varStructuredDataStruct++;
		outStructuredDataStruct++;
		streamStructuredDataStruct++;
	}
}

void Save_StructuredDataStructProperty(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataStructPropertyArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataStructProperty, sizeof(StructuredDataStructProperty) * count, (void**)&outStructuredDataStructProperty);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataStructProperty(false);
		varStructuredDataStructProperty++;
		outStructuredDataStructProperty++;
		streamStructuredDataStructProperty++;
	}
}

void Save_StructuredDataStructPropertyPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataStructPropertyPtr, sizeof(StructuredDataStructProperty*), (void**)&outStructuredDataStructPropertyPtr);
	if (*varStructuredDataStructPropertyPtr)
	{
		*outStructuredDataStructPropertyPtr = (StructuredDataStructProperty*)DB_FindStreamData(*varStructuredDataStructPropertyPtr);
		assert(*outStructuredDataStructPropertyPtr != (StructuredDataStructProperty*)0xFFFFFFFF);
		if (!*outStructuredDataStructPropertyPtr)
		{
			*outStructuredDataStructPropertyPtr = AllocSave_StructuredDataStructProperty();
			varStructuredDataStructProperty = *varStructuredDataStructPropertyPtr;
			streamStructuredDataStructProperty = *outStructuredDataStructPropertyPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataStructPropertyPtr, (void**)outStructuredDataStructPropertyPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataStructPropertyPtr, v1);
			Save_StructuredDataStructProperty(true);
		}
	}
}

void Save_StructuredDataStructPropertyPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataStructPropertyPtr, sizeof(StructuredDataStructProperty*) * count, (void**)&outStructuredDataStructPropertyPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataStructPropertyPtr(false);
		varStructuredDataStructPropertyPtr++;
		outStructuredDataStructPropertyPtr++;
		streamStructuredDataStructPropertyPtr++;
	}
}

void Save_StructuredDataStructPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataStructPtr, sizeof(StructuredDataStruct*), (void**)&outStructuredDataStructPtr);
	if (*varStructuredDataStructPtr)
	{
		*outStructuredDataStructPtr = (StructuredDataStruct*)DB_FindStreamData(*varStructuredDataStructPtr);
		assert(*outStructuredDataStructPtr != (StructuredDataStruct*)0xFFFFFFFF);
		if (!*outStructuredDataStructPtr)
		{
			*outStructuredDataStructPtr = AllocSave_StructuredDataStruct();
			varStructuredDataStruct = *varStructuredDataStructPtr;
			streamStructuredDataStruct = *outStructuredDataStructPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataStructPtr, (void**)outStructuredDataStructPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataStructPtr, v1);
			Save_StructuredDataStruct(true);
		}
	}
}

void Save_StructuredDataStructPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataStructPtr, sizeof(StructuredDataStruct*) * count, (void**)&outStructuredDataStructPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataStructPtr(false);
		varStructuredDataStructPtr++;
		outStructuredDataStructPtr++;
		streamStructuredDataStructPtr++;
	}
}

void Save_StructuredDataType(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataTypeArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataType, sizeof(StructuredDataType) * count, (void**)&outStructuredDataType);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataType(false);
		varStructuredDataType++;
		outStructuredDataType++;
		streamStructuredDataType++;
	}
}

void Save_StructuredDataTypePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataTypePtr, sizeof(StructuredDataType*), (void**)&outStructuredDataTypePtr);
	if (*varStructuredDataTypePtr)
	{
		*outStructuredDataTypePtr = (StructuredDataType*)DB_FindStreamData(*varStructuredDataTypePtr);
		assert(*outStructuredDataTypePtr != (StructuredDataType*)0xFFFFFFFF);
		if (!*outStructuredDataTypePtr)
		{
			*outStructuredDataTypePtr = AllocSave_StructuredDataType();
			varStructuredDataType = *varStructuredDataTypePtr;
			streamStructuredDataType = *outStructuredDataTypePtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataTypePtr, (void**)outStructuredDataTypePtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataTypePtr, v1);
			Save_StructuredDataType(true);
		}
	}
}

void Save_StructuredDataTypePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataTypePtr, sizeof(StructuredDataType*) * count, (void**)&outStructuredDataTypePtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataTypePtr(false);
		varStructuredDataTypePtr++;
		outStructuredDataTypePtr++;
		streamStructuredDataTypePtr++;
	}
}

void Save_StructuredDataTypeUnion(bool atStreamStart)
{
	// todo!
}

void Save_StructuredDataTypeUnionArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataTypeUnion, sizeof(StructuredDataTypeUnion) * count, (void**)&outStructuredDataTypeUnion);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataTypeUnion(false);
		varStructuredDataTypeUnion++;
		outStructuredDataTypeUnion++;
		streamStructuredDataTypeUnion++;
	}
}

void Save_StructuredDataTypeUnionPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varStructuredDataTypeUnionPtr, sizeof(StructuredDataTypeUnion*), (void**)&outStructuredDataTypeUnionPtr);
	if (*varStructuredDataTypeUnionPtr)
	{
		*outStructuredDataTypeUnionPtr = (StructuredDataTypeUnion*)DB_FindStreamData(*varStructuredDataTypeUnionPtr);
		assert(*outStructuredDataTypeUnionPtr != (StructuredDataTypeUnion*)0xFFFFFFFF);
		if (!*outStructuredDataTypeUnionPtr)
		{
			*outStructuredDataTypeUnionPtr = AllocSave_StructuredDataTypeUnion();
			varStructuredDataTypeUnion = *varStructuredDataTypeUnionPtr;
			streamStructuredDataTypeUnion = *outStructuredDataTypeUnionPtr;
			auto v1 = sub_44AF80((void**)streamStructuredDataTypeUnionPtr, (void**)outStructuredDataTypeUnionPtr);
			DB_FindStreamDataOrInsert((void*)*varStructuredDataTypeUnionPtr, v1);
			Save_StructuredDataTypeUnion(true);
		}
	}
}

void Save_StructuredDataTypeUnionPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varStructuredDataTypeUnionPtr, sizeof(StructuredDataTypeUnion*) * count, (void**)&outStructuredDataTypeUnionPtr);
	for (int i = 0; i < count; i++)
	{
		Save_StructuredDataTypeUnionPtr(false);
		varStructuredDataTypeUnionPtr++;
		outStructuredDataTypeUnionPtr++;
		streamStructuredDataTypeUnionPtr++;
	}
}

void Save_TempString(bool atStreamStart)
{
	// todo!
}

void Save_TempStringArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTempString, sizeof(TempString) * count, (void**)&outTempString);
	for (int i = 0; i < count; i++)
	{
		Save_TempString(false);
		varTempString++;
		outTempString++;
		streamTempString++;
	}
}

void Save_TempStringPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varTempStringPtr, sizeof(TempString*), (void**)&outTempStringPtr);
	if (*varTempStringPtr)
	{
		*outTempStringPtr = (TempString*)DB_FindStreamData(*varTempStringPtr);
		assert(*outTempStringPtr != (TempString*)0xFFFFFFFF);
		if (!*outTempStringPtr)
		{
			*outTempStringPtr = AllocSave_TempString();
			varTempString = *varTempStringPtr;
			streamTempString = *outTempStringPtr;
			auto v1 = sub_44AF80((void**)streamTempStringPtr, (void**)outTempStringPtr);
			DB_FindStreamDataOrInsert((void*)*varTempStringPtr, v1);
			Save_TempString(true);
		}
	}
}

void Save_TempStringPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTempStringPtr, sizeof(TempString*) * count, (void**)&outTempStringPtr);
	for (int i = 0; i < count; i++)
	{
		Save_TempStringPtr(false);
		varTempStringPtr++;
		outTempStringPtr++;
		streamTempStringPtr++;
	}
}

void Save_TracerDef(bool atStreamStart)
{
	// todo!
}

void Save_TracerDefArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTracerDef, sizeof(TracerDef) * count, (void**)&outTracerDef);
	for (int i = 0; i < count; i++)
	{
		Save_TracerDef(false);
		varTracerDef++;
		outTracerDef++;
		streamTracerDef++;
	}
}

void Save_TracerDefAsset(TracerDef** asset)
{
	// todo!
}

void Save_TracerDefPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varTracerDefPtr, sizeof(TracerDef*), (void**)&outTracerDefPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varTracerDefPtr)
	{
		*outTracerDefPtr = (TracerDef*)DB_FindStreamData(*varTracerDefPtr);
		assert(*outTracerDefPtr != (TracerDef*)0xFFFFFFFF);
		if (!*outTracerDefPtr)
		{
			*outTracerDefPtr = AllocSave_TracerDef();
			varTracerDef = *varTracerDefPtr;
			streamTracerDef = *outTracerDefPtr;
			auto v1 = sub_44AF80((void**)streamTracerDefPtr, (void**)outTracerDefPtr);
			DB_FindStreamDataOrInsert((void*)*varTracerDefPtr, v1);
			Save_TracerDef(true);
		}
	}
	DB_PopStreamPos();
}

void Save_TracerDefPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTracerDefPtr, sizeof(TracerDef*) * count, (void**)&outTracerDefPtr);
	for (int i = 0; i < count; i++)
	{
		Save_TracerDefPtr(false);
		varTracerDefPtr++;
		outTracerDefPtr++;
		streamTracerDefPtr++;
	}
}

void Save_TriIndice(bool atStreamStart)
{
	// todo!
}

void Save_TriIndiceArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTriIndice, sizeof(TriIndice) * count, (void**)&outTriIndice);
	for (int i = 0; i < count; i++)
	{
		Save_TriIndice(false);
		varTriIndice++;
		outTriIndice++;
		streamTriIndice++;
	}
}

void Save_TriIndicePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varTriIndicePtr, sizeof(TriIndice*), (void**)&outTriIndicePtr);
	if (*varTriIndicePtr)
	{
		*outTriIndicePtr = (TriIndice*)DB_FindStreamData(*varTriIndicePtr);
		assert(*outTriIndicePtr != (TriIndice*)0xFFFFFFFF);
		if (!*outTriIndicePtr)
		{
			*outTriIndicePtr = AllocSave_TriIndice();
			varTriIndice = *varTriIndicePtr;
			streamTriIndice = *outTriIndicePtr;
			auto v1 = sub_44AF80((void**)streamTriIndicePtr, (void**)outTriIndicePtr);
			DB_FindStreamDataOrInsert((void*)*varTriIndicePtr, v1);
			Save_TriIndice(true);
		}
	}
}

void Save_TriIndicePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTriIndicePtr, sizeof(TriIndice*) * count, (void**)&outTriIndicePtr);
	for (int i = 0; i < count; i++)
	{
		Save_TriIndicePtr(false);
		varTriIndicePtr++;
		outTriIndicePtr++;
		streamTriIndicePtr++;
	}
}

void Save_TriggerHull(bool atStreamStart)
{
	// todo!
}

void Save_TriggerHullArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTriggerHull, sizeof(TriggerHull) * count, (void**)&outTriggerHull);
	for (int i = 0; i < count; i++)
	{
		Save_TriggerHull(false);
		varTriggerHull++;
		outTriggerHull++;
		streamTriggerHull++;
	}
}

void Save_TriggerHullPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varTriggerHullPtr, sizeof(TriggerHull*), (void**)&outTriggerHullPtr);
	if (*varTriggerHullPtr)
	{
		*outTriggerHullPtr = (TriggerHull*)DB_FindStreamData(*varTriggerHullPtr);
		assert(*outTriggerHullPtr != (TriggerHull*)0xFFFFFFFF);
		if (!*outTriggerHullPtr)
		{
			*outTriggerHullPtr = AllocSave_TriggerHull();
			varTriggerHull = *varTriggerHullPtr;
			streamTriggerHull = *outTriggerHullPtr;
			auto v1 = sub_44AF80((void**)streamTriggerHullPtr, (void**)outTriggerHullPtr);
			DB_FindStreamDataOrInsert((void*)*varTriggerHullPtr, v1);
			Save_TriggerHull(true);
		}
	}
}

void Save_TriggerHullPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTriggerHullPtr, sizeof(TriggerHull*) * count, (void**)&outTriggerHullPtr);
	for (int i = 0; i < count; i++)
	{
		Save_TriggerHullPtr(false);
		varTriggerHullPtr++;
		outTriggerHullPtr++;
		streamTriggerHullPtr++;
	}
}

void Save_TriggerModel(bool atStreamStart)
{
	// todo!
}

void Save_TriggerModelArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTriggerModel, sizeof(TriggerModel) * count, (void**)&outTriggerModel);
	for (int i = 0; i < count; i++)
	{
		Save_TriggerModel(false);
		varTriggerModel++;
		outTriggerModel++;
		streamTriggerModel++;
	}
}

void Save_TriggerModelPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varTriggerModelPtr, sizeof(TriggerModel*), (void**)&outTriggerModelPtr);
	if (*varTriggerModelPtr)
	{
		*outTriggerModelPtr = (TriggerModel*)DB_FindStreamData(*varTriggerModelPtr);
		assert(*outTriggerModelPtr != (TriggerModel*)0xFFFFFFFF);
		if (!*outTriggerModelPtr)
		{
			*outTriggerModelPtr = AllocSave_TriggerModel();
			varTriggerModel = *varTriggerModelPtr;
			streamTriggerModel = *outTriggerModelPtr;
			auto v1 = sub_44AF80((void**)streamTriggerModelPtr, (void**)outTriggerModelPtr);
			DB_FindStreamDataOrInsert((void*)*varTriggerModelPtr, v1);
			Save_TriggerModel(true);
		}
	}
}

void Save_TriggerModelPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTriggerModelPtr, sizeof(TriggerModel*) * count, (void**)&outTriggerModelPtr);
	for (int i = 0; i < count; i++)
	{
		Save_TriggerModelPtr(false);
		varTriggerModelPtr++;
		outTriggerModelPtr++;
		streamTriggerModelPtr++;
	}
}

void Save_TriggerSlab(bool atStreamStart)
{
	// todo!
}

void Save_TriggerSlabArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTriggerSlab, sizeof(TriggerSlab) * count, (void**)&outTriggerSlab);
	for (int i = 0; i < count; i++)
	{
		Save_TriggerSlab(false);
		varTriggerSlab++;
		outTriggerSlab++;
		streamTriggerSlab++;
	}
}

void Save_TriggerSlabPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varTriggerSlabPtr, sizeof(TriggerSlab*), (void**)&outTriggerSlabPtr);
	if (*varTriggerSlabPtr)
	{
		*outTriggerSlabPtr = (TriggerSlab*)DB_FindStreamData(*varTriggerSlabPtr);
		assert(*outTriggerSlabPtr != (TriggerSlab*)0xFFFFFFFF);
		if (!*outTriggerSlabPtr)
		{
			*outTriggerSlabPtr = AllocSave_TriggerSlab();
			varTriggerSlab = *varTriggerSlabPtr;
			streamTriggerSlab = *outTriggerSlabPtr;
			auto v1 = sub_44AF80((void**)streamTriggerSlabPtr, (void**)outTriggerSlabPtr);
			DB_FindStreamDataOrInsert((void*)*varTriggerSlabPtr, v1);
			Save_TriggerSlab(true);
		}
	}
}

void Save_TriggerSlabPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varTriggerSlabPtr, sizeof(TriggerSlab*) * count, (void**)&outTriggerSlabPtr);
	for (int i = 0; i < count; i++)
	{
		Save_TriggerSlabPtr(false);
		varTriggerSlabPtr++;
		outTriggerSlabPtr++;
		streamTriggerSlabPtr++;
	}
}

void Save_UIFunctionList(bool atStreamStart)
{
	// todo!
}

void Save_UIFunctionListArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varUIFunctionList, sizeof(UIFunctionList) * count, (void**)&outUIFunctionList);
	for (int i = 0; i < count; i++)
	{
		Save_UIFunctionList(false);
		varUIFunctionList++;
		outUIFunctionList++;
		streamUIFunctionList++;
	}
}

void Save_UIFunctionListPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varUIFunctionListPtr, sizeof(UIFunctionList*), (void**)&outUIFunctionListPtr);
	if (*varUIFunctionListPtr)
	{
		*outUIFunctionListPtr = (UIFunctionList*)DB_FindStreamData(*varUIFunctionListPtr);
		assert(*outUIFunctionListPtr != (UIFunctionList*)0xFFFFFFFF);
		if (!*outUIFunctionListPtr)
		{
			*outUIFunctionListPtr = AllocSave_UIFunctionList();
			varUIFunctionList = *varUIFunctionListPtr;
			streamUIFunctionList = *outUIFunctionListPtr;
			auto v1 = sub_44AF80((void**)streamUIFunctionListPtr, (void**)outUIFunctionListPtr);
			DB_FindStreamDataOrInsert((void*)*varUIFunctionListPtr, v1);
			Save_UIFunctionList(true);
		}
	}
}

void Save_UIFunctionListPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varUIFunctionListPtr, sizeof(UIFunctionList*) * count, (void**)&outUIFunctionListPtr);
	for (int i = 0; i < count; i++)
	{
		Save_UIFunctionListPtr(false);
		varUIFunctionListPtr++;
		outUIFunctionListPtr++;
		streamUIFunctionListPtr++;
	}
}

void Save_WaterWritable(bool atStreamStart)
{
	// todo!
}

void Save_WaterWritableArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varWaterWritable, sizeof(WaterWritable) * count, (void**)&outWaterWritable);
	for (int i = 0; i < count; i++)
	{
		Save_WaterWritable(false);
		varWaterWritable++;
		outWaterWritable++;
		streamWaterWritable++;
	}
}

void Save_WaterWritablePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varWaterWritablePtr, sizeof(WaterWritable*), (void**)&outWaterWritablePtr);
	if (*varWaterWritablePtr)
	{
		*outWaterWritablePtr = (WaterWritable*)DB_FindStreamData(*varWaterWritablePtr);
		assert(*outWaterWritablePtr != (WaterWritable*)0xFFFFFFFF);
		if (!*outWaterWritablePtr)
		{
			*outWaterWritablePtr = AllocSave_WaterWritable();
			varWaterWritable = *varWaterWritablePtr;
			streamWaterWritable = *outWaterWritablePtr;
			auto v1 = sub_44AF80((void**)streamWaterWritablePtr, (void**)outWaterWritablePtr);
			DB_FindStreamDataOrInsert((void*)*varWaterWritablePtr, v1);
			Save_WaterWritable(true);
		}
	}
}

void Save_WaterWritablePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varWaterWritablePtr, sizeof(WaterWritable*) * count, (void**)&outWaterWritablePtr);
	for (int i = 0; i < count; i++)
	{
		Save_WaterWritablePtr(false);
		varWaterWritablePtr++;
		outWaterWritablePtr++;
		streamWaterWritablePtr++;
	}
}

void Save_XAnimDeltaPart(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDeltaPartArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPart, sizeof(XAnimDeltaPart) * count, (void**)&outXAnimDeltaPart);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPart(false);
		varXAnimDeltaPart++;
		outXAnimDeltaPart++;
		streamXAnimDeltaPart++;
	}
}

void Save_XAnimDeltaPartPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartPtr, sizeof(XAnimDeltaPart*), (void**)&outXAnimDeltaPartPtr);
	if (*varXAnimDeltaPartPtr)
	{
		*outXAnimDeltaPartPtr = (XAnimDeltaPart*)DB_FindStreamData(*varXAnimDeltaPartPtr);
		assert(*outXAnimDeltaPartPtr != (XAnimDeltaPart*)0xFFFFFFFF);
		if (!*outXAnimDeltaPartPtr)
		{
			*outXAnimDeltaPartPtr = AllocSave_XAnimDeltaPart();
			varXAnimDeltaPart = *varXAnimDeltaPartPtr;
			streamXAnimDeltaPart = *outXAnimDeltaPartPtr;
			auto v1 = sub_44AF80((void**)streamXAnimDeltaPartPtr, (void**)outXAnimDeltaPartPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDeltaPartPtr, v1);
			Save_XAnimDeltaPart(true);
		}
	}
}

void Save_XAnimDeltaPartPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartPtr, sizeof(XAnimDeltaPart*) * count, (void**)&outXAnimDeltaPartPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartPtr(false);
		varXAnimDeltaPartPtr++;
		outXAnimDeltaPartPtr++;
		streamXAnimDeltaPartPtr++;
	}
}

void Save_XAnimDeltaPartQuat(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDeltaPartQuat2(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDeltaPartQuat2Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuat2, sizeof(XAnimDeltaPartQuat2) * count, (void**)&outXAnimDeltaPartQuat2);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuat2(false);
		varXAnimDeltaPartQuat2++;
		outXAnimDeltaPartQuat2++;
		streamXAnimDeltaPartQuat2++;
	}
}

void Save_XAnimDeltaPartQuat2Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuat2Ptr, sizeof(XAnimDeltaPartQuat2*), (void**)&outXAnimDeltaPartQuat2Ptr);
	if (*varXAnimDeltaPartQuat2Ptr)
	{
		*outXAnimDeltaPartQuat2Ptr = (XAnimDeltaPartQuat2*)DB_FindStreamData(*varXAnimDeltaPartQuat2Ptr);
		assert(*outXAnimDeltaPartQuat2Ptr != (XAnimDeltaPartQuat2*)0xFFFFFFFF);
		if (!*outXAnimDeltaPartQuat2Ptr)
		{
			*outXAnimDeltaPartQuat2Ptr = AllocSave_XAnimDeltaPartQuat2();
			varXAnimDeltaPartQuat2 = *varXAnimDeltaPartQuat2Ptr;
			streamXAnimDeltaPartQuat2 = *outXAnimDeltaPartQuat2Ptr;
			auto v1 = sub_44AF80((void**)streamXAnimDeltaPartQuat2Ptr, (void**)outXAnimDeltaPartQuat2Ptr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDeltaPartQuat2Ptr, v1);
			Save_XAnimDeltaPartQuat2(true);
		}
	}
}

void Save_XAnimDeltaPartQuat2PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuat2Ptr, sizeof(XAnimDeltaPartQuat2*) * count, (void**)&outXAnimDeltaPartQuat2Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuat2Ptr(false);
		varXAnimDeltaPartQuat2Ptr++;
		outXAnimDeltaPartQuat2Ptr++;
		streamXAnimDeltaPartQuat2Ptr++;
	}
}

void Save_XAnimDeltaPartQuatArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuat, sizeof(XAnimDeltaPartQuat) * count, (void**)&outXAnimDeltaPartQuat);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuat(false);
		varXAnimDeltaPartQuat++;
		outXAnimDeltaPartQuat++;
		streamXAnimDeltaPartQuat++;
	}
}

void Save_XAnimDeltaPartQuatData(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDeltaPartQuatData2(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDeltaPartQuatData2Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatData2, sizeof(XAnimDeltaPartQuatData2) * count, (void**)&outXAnimDeltaPartQuatData2);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatData2(false);
		varXAnimDeltaPartQuatData2++;
		outXAnimDeltaPartQuatData2++;
		streamXAnimDeltaPartQuatData2++;
	}
}

void Save_XAnimDeltaPartQuatData2Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatData2Ptr, sizeof(XAnimDeltaPartQuatData2*), (void**)&outXAnimDeltaPartQuatData2Ptr);
	if (*varXAnimDeltaPartQuatData2Ptr)
	{
		*outXAnimDeltaPartQuatData2Ptr = (XAnimDeltaPartQuatData2*)DB_FindStreamData(*varXAnimDeltaPartQuatData2Ptr);
		assert(*outXAnimDeltaPartQuatData2Ptr != (XAnimDeltaPartQuatData2*)0xFFFFFFFF);
		if (!*outXAnimDeltaPartQuatData2Ptr)
		{
			*outXAnimDeltaPartQuatData2Ptr = AllocSave_XAnimDeltaPartQuatData2();
			varXAnimDeltaPartQuatData2 = *varXAnimDeltaPartQuatData2Ptr;
			streamXAnimDeltaPartQuatData2 = *outXAnimDeltaPartQuatData2Ptr;
			auto v1 = sub_44AF80((void**)streamXAnimDeltaPartQuatData2Ptr, (void**)outXAnimDeltaPartQuatData2Ptr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDeltaPartQuatData2Ptr, v1);
			Save_XAnimDeltaPartQuatData2(true);
		}
	}
}

void Save_XAnimDeltaPartQuatData2PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatData2Ptr, sizeof(XAnimDeltaPartQuatData2*) * count, (void**)&outXAnimDeltaPartQuatData2Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatData2Ptr(false);
		varXAnimDeltaPartQuatData2Ptr++;
		outXAnimDeltaPartQuatData2Ptr++;
		streamXAnimDeltaPartQuatData2Ptr++;
	}
}

void Save_XAnimDeltaPartQuatDataArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatData, sizeof(XAnimDeltaPartQuatData) * count, (void**)&outXAnimDeltaPartQuatData);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatData(false);
		varXAnimDeltaPartQuatData++;
		outXAnimDeltaPartQuatData++;
		streamXAnimDeltaPartQuatData++;
	}
}

void Save_XAnimDeltaPartQuatDataFrames(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDeltaPartQuatDataFrames2(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDeltaPartQuatDataFrames2Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames2, sizeof(XAnimDeltaPartQuatDataFrames2) * count, (void**)&outXAnimDeltaPartQuatDataFrames2);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatDataFrames2(false);
		varXAnimDeltaPartQuatDataFrames2++;
		outXAnimDeltaPartQuatDataFrames2++;
		streamXAnimDeltaPartQuatDataFrames2++;
	}
}

void Save_XAnimDeltaPartQuatDataFrames2Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames2Ptr, sizeof(XAnimDeltaPartQuatDataFrames2*), (void**)&outXAnimDeltaPartQuatDataFrames2Ptr);
	if (*varXAnimDeltaPartQuatDataFrames2Ptr)
	{
		*outXAnimDeltaPartQuatDataFrames2Ptr = (XAnimDeltaPartQuatDataFrames2*)DB_FindStreamData(*varXAnimDeltaPartQuatDataFrames2Ptr);
		assert(*outXAnimDeltaPartQuatDataFrames2Ptr != (XAnimDeltaPartQuatDataFrames2*)0xFFFFFFFF);
		if (!*outXAnimDeltaPartQuatDataFrames2Ptr)
		{
			*outXAnimDeltaPartQuatDataFrames2Ptr = AllocSave_XAnimDeltaPartQuatDataFrames2();
			varXAnimDeltaPartQuatDataFrames2 = *varXAnimDeltaPartQuatDataFrames2Ptr;
			streamXAnimDeltaPartQuatDataFrames2 = *outXAnimDeltaPartQuatDataFrames2Ptr;
			auto v1 = sub_44AF80((void**)streamXAnimDeltaPartQuatDataFrames2Ptr, (void**)outXAnimDeltaPartQuatDataFrames2Ptr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDeltaPartQuatDataFrames2Ptr, v1);
			Save_XAnimDeltaPartQuatDataFrames2(true);
		}
	}
}

void Save_XAnimDeltaPartQuatDataFrames2PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames2Ptr, sizeof(XAnimDeltaPartQuatDataFrames2*) * count, (void**)&outXAnimDeltaPartQuatDataFrames2Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatDataFrames2Ptr(false);
		varXAnimDeltaPartQuatDataFrames2Ptr++;
		outXAnimDeltaPartQuatDataFrames2Ptr++;
		streamXAnimDeltaPartQuatDataFrames2Ptr++;
	}
}

void Save_XAnimDeltaPartQuatDataFramesArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatDataFrames, sizeof(XAnimDeltaPartQuatDataFrames) * count, (void**)&outXAnimDeltaPartQuatDataFrames);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatDataFrames(false);
		varXAnimDeltaPartQuatDataFrames++;
		outXAnimDeltaPartQuatDataFrames++;
		streamXAnimDeltaPartQuatDataFrames++;
	}
}

void Save_XAnimDeltaPartQuatDataFramesPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatDataFramesPtr, sizeof(XAnimDeltaPartQuatDataFrames*), (void**)&outXAnimDeltaPartQuatDataFramesPtr);
	if (*varXAnimDeltaPartQuatDataFramesPtr)
	{
		*outXAnimDeltaPartQuatDataFramesPtr = (XAnimDeltaPartQuatDataFrames*)DB_FindStreamData(*varXAnimDeltaPartQuatDataFramesPtr);
		assert(*outXAnimDeltaPartQuatDataFramesPtr != (XAnimDeltaPartQuatDataFrames*)0xFFFFFFFF);
		if (!*outXAnimDeltaPartQuatDataFramesPtr)
		{
			*outXAnimDeltaPartQuatDataFramesPtr = AllocSave_XAnimDeltaPartQuatDataFrames();
			varXAnimDeltaPartQuatDataFrames = *varXAnimDeltaPartQuatDataFramesPtr;
			streamXAnimDeltaPartQuatDataFrames = *outXAnimDeltaPartQuatDataFramesPtr;
			auto v1 = sub_44AF80((void**)streamXAnimDeltaPartQuatDataFramesPtr, (void**)outXAnimDeltaPartQuatDataFramesPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDeltaPartQuatDataFramesPtr, v1);
			Save_XAnimDeltaPartQuatDataFrames(true);
		}
	}
}

void Save_XAnimDeltaPartQuatDataFramesPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatDataFramesPtr, sizeof(XAnimDeltaPartQuatDataFrames*) * count, (void**)&outXAnimDeltaPartQuatDataFramesPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatDataFramesPtr(false);
		varXAnimDeltaPartQuatDataFramesPtr++;
		outXAnimDeltaPartQuatDataFramesPtr++;
		streamXAnimDeltaPartQuatDataFramesPtr++;
	}
}

void Save_XAnimDeltaPartQuatDataPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatDataPtr, sizeof(XAnimDeltaPartQuatData*), (void**)&outXAnimDeltaPartQuatDataPtr);
	if (*varXAnimDeltaPartQuatDataPtr)
	{
		*outXAnimDeltaPartQuatDataPtr = (XAnimDeltaPartQuatData*)DB_FindStreamData(*varXAnimDeltaPartQuatDataPtr);
		assert(*outXAnimDeltaPartQuatDataPtr != (XAnimDeltaPartQuatData*)0xFFFFFFFF);
		if (!*outXAnimDeltaPartQuatDataPtr)
		{
			*outXAnimDeltaPartQuatDataPtr = AllocSave_XAnimDeltaPartQuatData();
			varXAnimDeltaPartQuatData = *varXAnimDeltaPartQuatDataPtr;
			streamXAnimDeltaPartQuatData = *outXAnimDeltaPartQuatDataPtr;
			auto v1 = sub_44AF80((void**)streamXAnimDeltaPartQuatDataPtr, (void**)outXAnimDeltaPartQuatDataPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDeltaPartQuatDataPtr, v1);
			Save_XAnimDeltaPartQuatData(true);
		}
	}
}

void Save_XAnimDeltaPartQuatDataPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatDataPtr, sizeof(XAnimDeltaPartQuatData*) * count, (void**)&outXAnimDeltaPartQuatDataPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatDataPtr(false);
		varXAnimDeltaPartQuatDataPtr++;
		outXAnimDeltaPartQuatDataPtr++;
		streamXAnimDeltaPartQuatDataPtr++;
	}
}

void Save_XAnimDeltaPartQuatPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatPtr, sizeof(XAnimDeltaPartQuat*), (void**)&outXAnimDeltaPartQuatPtr);
	if (*varXAnimDeltaPartQuatPtr)
	{
		*outXAnimDeltaPartQuatPtr = (XAnimDeltaPartQuat*)DB_FindStreamData(*varXAnimDeltaPartQuatPtr);
		assert(*outXAnimDeltaPartQuatPtr != (XAnimDeltaPartQuat*)0xFFFFFFFF);
		if (!*outXAnimDeltaPartQuatPtr)
		{
			*outXAnimDeltaPartQuatPtr = AllocSave_XAnimDeltaPartQuat();
			varXAnimDeltaPartQuat = *varXAnimDeltaPartQuatPtr;
			streamXAnimDeltaPartQuat = *outXAnimDeltaPartQuatPtr;
			auto v1 = sub_44AF80((void**)streamXAnimDeltaPartQuatPtr, (void**)outXAnimDeltaPartQuatPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDeltaPartQuatPtr, v1);
			Save_XAnimDeltaPartQuat(true);
		}
	}
}

void Save_XAnimDeltaPartQuatPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDeltaPartQuatPtr, sizeof(XAnimDeltaPartQuat*) * count, (void**)&outXAnimDeltaPartQuatPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDeltaPartQuatPtr(false);
		varXAnimDeltaPartQuatPtr++;
		outXAnimDeltaPartQuatPtr++;
		streamXAnimDeltaPartQuatPtr++;
	}
}

void Save_XAnimDynamicFrames(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDynamicFramesArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDynamicFrames, sizeof(XAnimDynamicFrames) * count, (void**)&outXAnimDynamicFrames);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDynamicFrames(false);
		varXAnimDynamicFrames++;
		outXAnimDynamicFrames++;
		streamXAnimDynamicFrames++;
	}
}

void Save_XAnimDynamicFramesPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDynamicFramesPtr, sizeof(XAnimDynamicFrames*), (void**)&outXAnimDynamicFramesPtr);
	if (*varXAnimDynamicFramesPtr)
	{
		*outXAnimDynamicFramesPtr = (XAnimDynamicFrames*)DB_FindStreamData(*varXAnimDynamicFramesPtr);
		assert(*outXAnimDynamicFramesPtr != (XAnimDynamicFrames*)0xFFFFFFFF);
		if (!*outXAnimDynamicFramesPtr)
		{
			*outXAnimDynamicFramesPtr = AllocSave_XAnimDynamicFrames();
			varXAnimDynamicFrames = *varXAnimDynamicFramesPtr;
			streamXAnimDynamicFrames = *outXAnimDynamicFramesPtr;
			auto v1 = sub_44AF80((void**)streamXAnimDynamicFramesPtr, (void**)outXAnimDynamicFramesPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDynamicFramesPtr, v1);
			Save_XAnimDynamicFrames(true);
		}
	}
}

void Save_XAnimDynamicFramesPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDynamicFramesPtr, sizeof(XAnimDynamicFrames*) * count, (void**)&outXAnimDynamicFramesPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDynamicFramesPtr(false);
		varXAnimDynamicFramesPtr++;
		outXAnimDynamicFramesPtr++;
		streamXAnimDynamicFramesPtr++;
	}
}

void Save_XAnimDynamicIndices(bool atStreamStart)
{
	// todo!
}

void Save_XAnimDynamicIndicesArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDynamicIndices, sizeof(XAnimDynamicIndices) * count, (void**)&outXAnimDynamicIndices);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDynamicIndices(false);
		varXAnimDynamicIndices++;
		outXAnimDynamicIndices++;
		streamXAnimDynamicIndices++;
	}
}

void Save_XAnimDynamicIndicesPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimDynamicIndicesPtr, sizeof(XAnimDynamicIndices*), (void**)&outXAnimDynamicIndicesPtr);
	if (*varXAnimDynamicIndicesPtr)
	{
		*outXAnimDynamicIndicesPtr = (XAnimDynamicIndices*)DB_FindStreamData(*varXAnimDynamicIndicesPtr);
		assert(*outXAnimDynamicIndicesPtr != (XAnimDynamicIndices*)0xFFFFFFFF);
		if (!*outXAnimDynamicIndicesPtr)
		{
			*outXAnimDynamicIndicesPtr = AllocSave_XAnimDynamicIndices();
			varXAnimDynamicIndices = *varXAnimDynamicIndicesPtr;
			streamXAnimDynamicIndices = *outXAnimDynamicIndicesPtr;
			auto v1 = sub_44AF80((void**)streamXAnimDynamicIndicesPtr, (void**)outXAnimDynamicIndicesPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimDynamicIndicesPtr, v1);
			Save_XAnimDynamicIndices(true);
		}
	}
}

void Save_XAnimDynamicIndicesPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimDynamicIndicesPtr, sizeof(XAnimDynamicIndices*) * count, (void**)&outXAnimDynamicIndicesPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimDynamicIndicesPtr(false);
		varXAnimDynamicIndicesPtr++;
		outXAnimDynamicIndicesPtr++;
		streamXAnimDynamicIndicesPtr++;
	}
}

void Save_XAnimIndices(bool atStreamStart)
{
	// todo!
}

void Save_XAnimIndicesArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimIndices, sizeof(XAnimIndices) * count, (void**)&outXAnimIndices);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimIndices(false);
		varXAnimIndices++;
		outXAnimIndices++;
		streamXAnimIndices++;
	}
}

void Save_XAnimIndicesPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimIndicesPtr, sizeof(XAnimIndices*), (void**)&outXAnimIndicesPtr);
	if (*varXAnimIndicesPtr)
	{
		*outXAnimIndicesPtr = (XAnimIndices*)DB_FindStreamData(*varXAnimIndicesPtr);
		assert(*outXAnimIndicesPtr != (XAnimIndices*)0xFFFFFFFF);
		if (!*outXAnimIndicesPtr)
		{
			*outXAnimIndicesPtr = AllocSave_XAnimIndices();
			varXAnimIndices = *varXAnimIndicesPtr;
			streamXAnimIndices = *outXAnimIndicesPtr;
			auto v1 = sub_44AF80((void**)streamXAnimIndicesPtr, (void**)outXAnimIndicesPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimIndicesPtr, v1);
			Save_XAnimIndices(true);
		}
	}
}

void Save_XAnimIndicesPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimIndicesPtr, sizeof(XAnimIndices*) * count, (void**)&outXAnimIndicesPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimIndicesPtr(false);
		varXAnimIndicesPtr++;
		outXAnimIndicesPtr++;
		streamXAnimIndicesPtr++;
	}
}

void Save_XAnimNotifyInfo(bool atStreamStart)
{
	// todo!
}

void Save_XAnimNotifyInfoArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimNotifyInfo, sizeof(XAnimNotifyInfo) * count, (void**)&outXAnimNotifyInfo);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimNotifyInfo(false);
		varXAnimNotifyInfo++;
		outXAnimNotifyInfo++;
		streamXAnimNotifyInfo++;
	}
}

void Save_XAnimNotifyInfoPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimNotifyInfoPtr, sizeof(XAnimNotifyInfo*), (void**)&outXAnimNotifyInfoPtr);
	if (*varXAnimNotifyInfoPtr)
	{
		*outXAnimNotifyInfoPtr = (XAnimNotifyInfo*)DB_FindStreamData(*varXAnimNotifyInfoPtr);
		assert(*outXAnimNotifyInfoPtr != (XAnimNotifyInfo*)0xFFFFFFFF);
		if (!*outXAnimNotifyInfoPtr)
		{
			*outXAnimNotifyInfoPtr = AllocSave_XAnimNotifyInfo();
			varXAnimNotifyInfo = *varXAnimNotifyInfoPtr;
			streamXAnimNotifyInfo = *outXAnimNotifyInfoPtr;
			auto v1 = sub_44AF80((void**)streamXAnimNotifyInfoPtr, (void**)outXAnimNotifyInfoPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimNotifyInfoPtr, v1);
			Save_XAnimNotifyInfo(true);
		}
	}
}

void Save_XAnimNotifyInfoPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimNotifyInfoPtr, sizeof(XAnimNotifyInfo*) * count, (void**)&outXAnimNotifyInfoPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimNotifyInfoPtr(false);
		varXAnimNotifyInfoPtr++;
		outXAnimNotifyInfoPtr++;
		streamXAnimNotifyInfoPtr++;
	}
}

void Save_XAnimPartTrans(bool atStreamStart)
{
	// todo!
}

void Save_XAnimPartTransArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimPartTrans, sizeof(XAnimPartTrans) * count, (void**)&outXAnimPartTrans);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimPartTrans(false);
		varXAnimPartTrans++;
		outXAnimPartTrans++;
		streamXAnimPartTrans++;
	}
}

void Save_XAnimPartTransData(bool atStreamStart)
{
	// todo!
}

void Save_XAnimPartTransDataArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimPartTransData, sizeof(XAnimPartTransData) * count, (void**)&outXAnimPartTransData);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimPartTransData(false);
		varXAnimPartTransData++;
		outXAnimPartTransData++;
		streamXAnimPartTransData++;
	}
}

void Save_XAnimPartTransDataPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimPartTransDataPtr, sizeof(XAnimPartTransData*), (void**)&outXAnimPartTransDataPtr);
	if (*varXAnimPartTransDataPtr)
	{
		*outXAnimPartTransDataPtr = (XAnimPartTransData*)DB_FindStreamData(*varXAnimPartTransDataPtr);
		assert(*outXAnimPartTransDataPtr != (XAnimPartTransData*)0xFFFFFFFF);
		if (!*outXAnimPartTransDataPtr)
		{
			*outXAnimPartTransDataPtr = AllocSave_XAnimPartTransData();
			varXAnimPartTransData = *varXAnimPartTransDataPtr;
			streamXAnimPartTransData = *outXAnimPartTransDataPtr;
			auto v1 = sub_44AF80((void**)streamXAnimPartTransDataPtr, (void**)outXAnimPartTransDataPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimPartTransDataPtr, v1);
			Save_XAnimPartTransData(true);
		}
	}
}

void Save_XAnimPartTransDataPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimPartTransDataPtr, sizeof(XAnimPartTransData*) * count, (void**)&outXAnimPartTransDataPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimPartTransDataPtr(false);
		varXAnimPartTransDataPtr++;
		outXAnimPartTransDataPtr++;
		streamXAnimPartTransDataPtr++;
	}
}

void Save_XAnimPartTransFrames(bool atStreamStart)
{
	// todo!
}

void Save_XAnimPartTransFramesArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimPartTransFrames, sizeof(XAnimPartTransFrames) * count, (void**)&outXAnimPartTransFrames);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimPartTransFrames(false);
		varXAnimPartTransFrames++;
		outXAnimPartTransFrames++;
		streamXAnimPartTransFrames++;
	}
}

void Save_XAnimPartTransFramesPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimPartTransFramesPtr, sizeof(XAnimPartTransFrames*), (void**)&outXAnimPartTransFramesPtr);
	if (*varXAnimPartTransFramesPtr)
	{
		*outXAnimPartTransFramesPtr = (XAnimPartTransFrames*)DB_FindStreamData(*varXAnimPartTransFramesPtr);
		assert(*outXAnimPartTransFramesPtr != (XAnimPartTransFrames*)0xFFFFFFFF);
		if (!*outXAnimPartTransFramesPtr)
		{
			*outXAnimPartTransFramesPtr = AllocSave_XAnimPartTransFrames();
			varXAnimPartTransFrames = *varXAnimPartTransFramesPtr;
			streamXAnimPartTransFrames = *outXAnimPartTransFramesPtr;
			auto v1 = sub_44AF80((void**)streamXAnimPartTransFramesPtr, (void**)outXAnimPartTransFramesPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimPartTransFramesPtr, v1);
			Save_XAnimPartTransFrames(true);
		}
	}
}

void Save_XAnimPartTransFramesPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimPartTransFramesPtr, sizeof(XAnimPartTransFrames*) * count, (void**)&outXAnimPartTransFramesPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimPartTransFramesPtr(false);
		varXAnimPartTransFramesPtr++;
		outXAnimPartTransFramesPtr++;
		streamXAnimPartTransFramesPtr++;
	}
}

void Save_XAnimPartTransPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimPartTransPtr, sizeof(XAnimPartTrans*), (void**)&outXAnimPartTransPtr);
	if (*varXAnimPartTransPtr)
	{
		*outXAnimPartTransPtr = (XAnimPartTrans*)DB_FindStreamData(*varXAnimPartTransPtr);
		assert(*outXAnimPartTransPtr != (XAnimPartTrans*)0xFFFFFFFF);
		if (!*outXAnimPartTransPtr)
		{
			*outXAnimPartTransPtr = AllocSave_XAnimPartTrans();
			varXAnimPartTrans = *varXAnimPartTransPtr;
			streamXAnimPartTrans = *outXAnimPartTransPtr;
			auto v1 = sub_44AF80((void**)streamXAnimPartTransPtr, (void**)outXAnimPartTransPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimPartTransPtr, v1);
			Save_XAnimPartTrans(true);
		}
	}
}

void Save_XAnimPartTransPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimPartTransPtr, sizeof(XAnimPartTrans*) * count, (void**)&outXAnimPartTransPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimPartTransPtr(false);
		varXAnimPartTransPtr++;
		outXAnimPartTransPtr++;
		streamXAnimPartTransPtr++;
	}
}

void Save_XAnimParts(bool atStreamStart)
{
	// todo!
}

void Save_XAnimPartsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimParts, sizeof(XAnimParts) * count, (void**)&outXAnimParts);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimParts(false);
		varXAnimParts++;
		outXAnimParts++;
		streamXAnimParts++;
	}
}

void Save_XAnimPartsAsset(XAnimParts** asset)
{
	// todo!
}

void Save_XAnimPartsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAnimPartsPtr, sizeof(XAnimParts*), (void**)&outXAnimPartsPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varXAnimPartsPtr)
	{
		*outXAnimPartsPtr = (XAnimParts*)DB_FindStreamData(*varXAnimPartsPtr);
		assert(*outXAnimPartsPtr != (XAnimParts*)0xFFFFFFFF);
		if (!*outXAnimPartsPtr)
		{
			*outXAnimPartsPtr = AllocSave_XAnimParts();
			varXAnimParts = *varXAnimPartsPtr;
			streamXAnimParts = *outXAnimPartsPtr;
			auto v1 = sub_44AF80((void**)streamXAnimPartsPtr, (void**)outXAnimPartsPtr);
			DB_FindStreamDataOrInsert((void*)*varXAnimPartsPtr, v1);
			Save_XAnimParts(true);
		}
	}
	DB_PopStreamPos();
}

void Save_XAnimPartsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAnimPartsPtr, sizeof(XAnimParts*) * count, (void**)&outXAnimPartsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAnimPartsPtr(false);
		varXAnimPartsPtr++;
		outXAnimPartsPtr++;
		streamXAnimPartsPtr++;
	}
}

void Save_XAsset(bool atStreamStart)
{
	// todo!
}

void Save_XAssetArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAsset, sizeof(XAsset) * count, (void**)&outXAsset);
	for (int i = 0; i < count; i++)
	{
		Save_XAsset(false);
		varXAsset++;
		outXAsset++;
		streamXAsset++;
	}
}

void Save_XAssetHeader(bool atStreamStart)
{
	// todo!
}

void Save_XAssetHeaderArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAssetHeader, sizeof(XAssetHeader) * count, (void**)&outXAssetHeader);
	for (int i = 0; i < count; i++)
	{
		Save_XAssetHeader(false);
		varXAssetHeader++;
		outXAssetHeader++;
		streamXAssetHeader++;
	}
}

void Save_XAssetHeaderPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAssetHeaderPtr, sizeof(XAssetHeader*), (void**)&outXAssetHeaderPtr);
	if (*varXAssetHeaderPtr)
	{
		*outXAssetHeaderPtr = (XAssetHeader*)DB_FindStreamData(*varXAssetHeaderPtr);
		assert(*outXAssetHeaderPtr != (XAssetHeader*)0xFFFFFFFF);
		if (!*outXAssetHeaderPtr)
		{
			*outXAssetHeaderPtr = AllocSave_XAssetHeader();
			varXAssetHeader = *varXAssetHeaderPtr;
			streamXAssetHeader = *outXAssetHeaderPtr;
			auto v1 = sub_44AF80((void**)streamXAssetHeaderPtr, (void**)outXAssetHeaderPtr);
			DB_FindStreamDataOrInsert((void*)*varXAssetHeaderPtr, v1);
			Save_XAssetHeader(true);
		}
	}
}

void Save_XAssetHeaderPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAssetHeaderPtr, sizeof(XAssetHeader*) * count, (void**)&outXAssetHeaderPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAssetHeaderPtr(false);
		varXAssetHeaderPtr++;
		outXAssetHeaderPtr++;
		streamXAssetHeaderPtr++;
	}
}

void Save_XAssetList(bool atStreamStart)
{
	// todo!
}

void Save_XAssetListArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAssetList, sizeof(XAssetList) * count, (void**)&outXAssetList);
	for (int i = 0; i < count; i++)
	{
		Save_XAssetList(false);
		varXAssetList++;
		outXAssetList++;
		streamXAssetList++;
	}
}

void Save_XAssetListAsset(XAssetList** asset)
{
	// todo!
}

void Save_XAssetListPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAssetListPtr, sizeof(XAssetList*), (void**)&outXAssetListPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varXAssetListPtr)
	{
		*outXAssetListPtr = (XAssetList*)DB_FindStreamData(*varXAssetListPtr);
		assert(*outXAssetListPtr != (XAssetList*)0xFFFFFFFF);
		if (!*outXAssetListPtr)
		{
			*outXAssetListPtr = AllocSave_XAssetList();
			varXAssetList = *varXAssetListPtr;
			streamXAssetList = *outXAssetListPtr;
			auto v1 = sub_44AF80((void**)streamXAssetListPtr, (void**)outXAssetListPtr);
			DB_FindStreamDataOrInsert((void*)*varXAssetListPtr, v1);
			Save_XAssetList(true);
		}
	}
	DB_PopStreamPos();
}

void Save_XAssetListPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAssetListPtr, sizeof(XAssetList*) * count, (void**)&outXAssetListPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAssetListPtr(false);
		varXAssetListPtr++;
		outXAssetListPtr++;
		streamXAssetListPtr++;
	}
}

void Save_XAssetPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXAssetPtr, sizeof(XAsset*), (void**)&outXAssetPtr);
	if (*varXAssetPtr)
	{
		*outXAssetPtr = (XAsset*)DB_FindStreamData(*varXAssetPtr);
		assert(*outXAssetPtr != (XAsset*)0xFFFFFFFF);
		if (!*outXAssetPtr)
		{
			*outXAssetPtr = AllocSave_XAsset();
			varXAsset = *varXAssetPtr;
			streamXAsset = *outXAssetPtr;
			auto v1 = sub_44AF80((void**)streamXAssetPtr, (void**)outXAssetPtr);
			DB_FindStreamDataOrInsert((void*)*varXAssetPtr, v1);
			Save_XAsset(true);
		}
	}
}

void Save_XAssetPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXAssetPtr, sizeof(XAsset*) * count, (void**)&outXAssetPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XAssetPtr(false);
		varXAssetPtr++;
		outXAssetPtr++;
		streamXAssetPtr++;
	}
}

void Save_XBoneInfo(bool atStreamStart)
{
	// todo!
}

void Save_XBoneInfoArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXBoneInfo, sizeof(XBoneInfo) * count, (void**)&outXBoneInfo);
	for (int i = 0; i < count; i++)
	{
		Save_XBoneInfo(false);
		varXBoneInfo++;
		outXBoneInfo++;
		streamXBoneInfo++;
	}
}

void Save_XBoneInfoPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXBoneInfoPtr, sizeof(XBoneInfo*), (void**)&outXBoneInfoPtr);
	if (*varXBoneInfoPtr)
	{
		*outXBoneInfoPtr = (XBoneInfo*)DB_FindStreamData(*varXBoneInfoPtr);
		assert(*outXBoneInfoPtr != (XBoneInfo*)0xFFFFFFFF);
		if (!*outXBoneInfoPtr)
		{
			*outXBoneInfoPtr = AllocSave_XBoneInfo();
			varXBoneInfo = *varXBoneInfoPtr;
			streamXBoneInfo = *outXBoneInfoPtr;
			auto v1 = sub_44AF80((void**)streamXBoneInfoPtr, (void**)outXBoneInfoPtr);
			DB_FindStreamDataOrInsert((void*)*varXBoneInfoPtr, v1);
			Save_XBoneInfo(true);
		}
	}
}

void Save_XBoneInfoPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXBoneInfoPtr, sizeof(XBoneInfo*) * count, (void**)&outXBoneInfoPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XBoneInfoPtr(false);
		varXBoneInfoPtr++;
		outXBoneInfoPtr++;
		streamXBoneInfoPtr++;
	}
}

void Save_XModel(bool atStreamStart)
{
	// todo!
}

void Save_XModelArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModel, sizeof(XModel) * count, (void**)&outXModel);
	for (int i = 0; i < count; i++)
	{
		Save_XModel(false);
		varXModel++;
		outXModel++;
		streamXModel++;
	}
}

void Save_XModelAsset(XModel** asset)
{
	// todo!
}

void Save_XModelCollSurf_s(bool atStreamStart)
{
	// todo!
}

void Save_XModelCollSurf_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelCollSurf_s, sizeof(XModelCollSurf_s) * count, (void**)&outXModelCollSurf_s);
	for (int i = 0; i < count; i++)
	{
		Save_XModelCollSurf_s(false);
		varXModelCollSurf_s++;
		outXModelCollSurf_s++;
		streamXModelCollSurf_s++;
	}
}

void Save_XModelCollSurf_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXModelCollSurf_sPtr, sizeof(XModelCollSurf_s*), (void**)&outXModelCollSurf_sPtr);
	if (*varXModelCollSurf_sPtr)
	{
		*outXModelCollSurf_sPtr = (XModelCollSurf_s*)DB_FindStreamData(*varXModelCollSurf_sPtr);
		assert(*outXModelCollSurf_sPtr != (XModelCollSurf_s*)0xFFFFFFFF);
		if (!*outXModelCollSurf_sPtr)
		{
			*outXModelCollSurf_sPtr = AllocSave_XModelCollSurf_s();
			varXModelCollSurf_s = *varXModelCollSurf_sPtr;
			streamXModelCollSurf_s = *outXModelCollSurf_sPtr;
			auto v1 = sub_44AF80((void**)streamXModelCollSurf_sPtr, (void**)outXModelCollSurf_sPtr);
			DB_FindStreamDataOrInsert((void*)*varXModelCollSurf_sPtr, v1);
			Save_XModelCollSurf_s(true);
		}
	}
}

void Save_XModelCollSurf_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelCollSurf_sPtr, sizeof(XModelCollSurf_s*) * count, (void**)&outXModelCollSurf_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XModelCollSurf_sPtr(false);
		varXModelCollSurf_sPtr++;
		outXModelCollSurf_sPtr++;
		streamXModelCollSurf_sPtr++;
	}
}

void Save_XModelCollTri_s(bool atStreamStart)
{
	// todo!
}

void Save_XModelCollTri_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelCollTri_s, sizeof(XModelCollTri_s) * count, (void**)&outXModelCollTri_s);
	for (int i = 0; i < count; i++)
	{
		Save_XModelCollTri_s(false);
		varXModelCollTri_s++;
		outXModelCollTri_s++;
		streamXModelCollTri_s++;
	}
}

void Save_XModelCollTri_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXModelCollTri_sPtr, sizeof(XModelCollTri_s*), (void**)&outXModelCollTri_sPtr);
	if (*varXModelCollTri_sPtr)
	{
		*outXModelCollTri_sPtr = (XModelCollTri_s*)DB_FindStreamData(*varXModelCollTri_sPtr);
		assert(*outXModelCollTri_sPtr != (XModelCollTri_s*)0xFFFFFFFF);
		if (!*outXModelCollTri_sPtr)
		{
			*outXModelCollTri_sPtr = AllocSave_XModelCollTri_s();
			varXModelCollTri_s = *varXModelCollTri_sPtr;
			streamXModelCollTri_s = *outXModelCollTri_sPtr;
			auto v1 = sub_44AF80((void**)streamXModelCollTri_sPtr, (void**)outXModelCollTri_sPtr);
			DB_FindStreamDataOrInsert((void*)*varXModelCollTri_sPtr, v1);
			Save_XModelCollTri_s(true);
		}
	}
}

void Save_XModelCollTri_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelCollTri_sPtr, sizeof(XModelCollTri_s*) * count, (void**)&outXModelCollTri_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XModelCollTri_sPtr(false);
		varXModelCollTri_sPtr++;
		outXModelCollTri_sPtr++;
		streamXModelCollTri_sPtr++;
	}
}

void Save_XModelLodInfo(bool atStreamStart)
{
	// todo!
}

void Save_XModelLodInfoArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelLodInfo, sizeof(XModelLodInfo) * count, (void**)&outXModelLodInfo);
	for (int i = 0; i < count; i++)
	{
		Save_XModelLodInfo(false);
		varXModelLodInfo++;
		outXModelLodInfo++;
		streamXModelLodInfo++;
	}
}

void Save_XModelLodInfoPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXModelLodInfoPtr, sizeof(XModelLodInfo*), (void**)&outXModelLodInfoPtr);
	if (*varXModelLodInfoPtr)
	{
		*outXModelLodInfoPtr = (XModelLodInfo*)DB_FindStreamData(*varXModelLodInfoPtr);
		assert(*outXModelLodInfoPtr != (XModelLodInfo*)0xFFFFFFFF);
		if (!*outXModelLodInfoPtr)
		{
			*outXModelLodInfoPtr = AllocSave_XModelLodInfo();
			varXModelLodInfo = *varXModelLodInfoPtr;
			streamXModelLodInfo = *outXModelLodInfoPtr;
			auto v1 = sub_44AF80((void**)streamXModelLodInfoPtr, (void**)outXModelLodInfoPtr);
			DB_FindStreamDataOrInsert((void*)*varXModelLodInfoPtr, v1);
			Save_XModelLodInfo(true);
		}
	}
}

void Save_XModelLodInfoPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelLodInfoPtr, sizeof(XModelLodInfo*) * count, (void**)&outXModelLodInfoPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XModelLodInfoPtr(false);
		varXModelLodInfoPtr++;
		outXModelLodInfoPtr++;
		streamXModelLodInfoPtr++;
	}
}

void Save_XModelPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXModelPtr, sizeof(XModel*), (void**)&outXModelPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varXModelPtr)
	{
		*outXModelPtr = (XModel*)DB_FindStreamData(*varXModelPtr);
		assert(*outXModelPtr != (XModel*)0xFFFFFFFF);
		if (!*outXModelPtr)
		{
			*outXModelPtr = AllocSave_XModel();
			varXModel = *varXModelPtr;
			streamXModel = *outXModelPtr;
			auto v1 = sub_44AF80((void**)streamXModelPtr, (void**)outXModelPtr);
			DB_FindStreamDataOrInsert((void*)*varXModelPtr, v1);
			Save_XModel(true);
		}
	}
	DB_PopStreamPos();
}

void Save_XModelPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelPtr, sizeof(XModel*) * count, (void**)&outXModelPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XModelPtr(false);
		varXModelPtr++;
		outXModelPtr++;
		streamXModelPtr++;
	}
}

void Save_XModelSurfs(bool atStreamStart)
{
	// todo!
}

void Save_XModelSurfsArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelSurfs, sizeof(XModelSurfs) * count, (void**)&outXModelSurfs);
	for (int i = 0; i < count; i++)
	{
		Save_XModelSurfs(false);
		varXModelSurfs++;
		outXModelSurfs++;
		streamXModelSurfs++;
	}
}

void Save_XModelSurfsAsset(XModelSurfs** asset)
{
	// todo!
}

void Save_XModelSurfsPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXModelSurfsPtr, sizeof(XModelSurfs*), (void**)&outXModelSurfsPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varXModelSurfsPtr)
	{
		*outXModelSurfsPtr = (XModelSurfs*)DB_FindStreamData(*varXModelSurfsPtr);
		assert(*outXModelSurfsPtr != (XModelSurfs*)0xFFFFFFFF);
		if (!*outXModelSurfsPtr)
		{
			*outXModelSurfsPtr = AllocSave_XModelSurfs();
			varXModelSurfs = *varXModelSurfsPtr;
			streamXModelSurfs = *outXModelSurfsPtr;
			auto v1 = sub_44AF80((void**)streamXModelSurfsPtr, (void**)outXModelSurfsPtr);
			DB_FindStreamDataOrInsert((void*)*varXModelSurfsPtr, v1);
			Save_XModelSurfs(true);
		}
	}
	DB_PopStreamPos();
}

void Save_XModelSurfsPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXModelSurfsPtr, sizeof(XModelSurfs*) * count, (void**)&outXModelSurfsPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XModelSurfsPtr(false);
		varXModelSurfsPtr++;
		outXModelSurfsPtr++;
		streamXModelSurfsPtr++;
	}
}

void Save_XRigidVertList(bool atStreamStart)
{
	// todo!
}

void Save_XRigidVertListArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXRigidVertList, sizeof(XRigidVertList) * count, (void**)&outXRigidVertList);
	for (int i = 0; i < count; i++)
	{
		Save_XRigidVertList(false);
		varXRigidVertList++;
		outXRigidVertList++;
		streamXRigidVertList++;
	}
}

void Save_XRigidVertListPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXRigidVertListPtr, sizeof(XRigidVertList*), (void**)&outXRigidVertListPtr);
	if (*varXRigidVertListPtr)
	{
		*outXRigidVertListPtr = (XRigidVertList*)DB_FindStreamData(*varXRigidVertListPtr);
		assert(*outXRigidVertListPtr != (XRigidVertList*)0xFFFFFFFF);
		if (!*outXRigidVertListPtr)
		{
			*outXRigidVertListPtr = AllocSave_XRigidVertList();
			varXRigidVertList = *varXRigidVertListPtr;
			streamXRigidVertList = *outXRigidVertListPtr;
			auto v1 = sub_44AF80((void**)streamXRigidVertListPtr, (void**)outXRigidVertListPtr);
			DB_FindStreamDataOrInsert((void*)*varXRigidVertListPtr, v1);
			Save_XRigidVertList(true);
		}
	}
}

void Save_XRigidVertListPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXRigidVertListPtr, sizeof(XRigidVertList*) * count, (void**)&outXRigidVertListPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XRigidVertListPtr(false);
		varXRigidVertListPtr++;
		outXRigidVertListPtr++;
		streamXRigidVertListPtr++;
	}
}

void Save_XString(bool atStreamStart)
{
	// todo!
}

void Save_XStringArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXString, sizeof(XString) * count, (void**)&outXString);
	for (int i = 0; i < count; i++)
	{
		Save_XString(false);
		varXString++;
		outXString++;
		streamXString++;
	}
}

void Save_XStringPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXStringPtr, sizeof(XString*), (void**)&outXStringPtr);
	if (*varXStringPtr)
	{
		*outXStringPtr = (XString*)DB_FindStreamData(*varXStringPtr);
		assert(*outXStringPtr != (XString*)0xFFFFFFFF);
		if (!*outXStringPtr)
		{
			*outXStringPtr = AllocSave_XString();
			varXString = *varXStringPtr;
			streamXString = *outXStringPtr;
			auto v1 = sub_44AF80((void**)streamXStringPtr, (void**)outXStringPtr);
			DB_FindStreamDataOrInsert((void*)*varXStringPtr, v1);
			Save_XString(true);
		}
	}
}

void Save_XStringPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXStringPtr, sizeof(XString*) * count, (void**)&outXStringPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XStringPtr(false);
		varXStringPtr++;
		outXStringPtr++;
		streamXStringPtr++;
	}
}

void Save_XSurface(bool atStreamStart)
{
	// todo!
}

void Save_XSurfaceArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurface, sizeof(XSurface) * count, (void**)&outXSurface);
	for (int i = 0; i < count; i++)
	{
		Save_XSurface(false);
		varXSurface++;
		outXSurface++;
		streamXSurface++;
	}
}

void Save_XSurfaceCollisionAabb(bool atStreamStart)
{
	// todo!
}

void Save_XSurfaceCollisionAabbArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionAabb, sizeof(XSurfaceCollisionAabb) * count, (void**)&outXSurfaceCollisionAabb);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceCollisionAabb(false);
		varXSurfaceCollisionAabb++;
		outXSurfaceCollisionAabb++;
		streamXSurfaceCollisionAabb++;
	}
}

void Save_XSurfaceCollisionAabbPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionAabbPtr, sizeof(XSurfaceCollisionAabb*), (void**)&outXSurfaceCollisionAabbPtr);
	if (*varXSurfaceCollisionAabbPtr)
	{
		*outXSurfaceCollisionAabbPtr = (XSurfaceCollisionAabb*)DB_FindStreamData(*varXSurfaceCollisionAabbPtr);
		assert(*outXSurfaceCollisionAabbPtr != (XSurfaceCollisionAabb*)0xFFFFFFFF);
		if (!*outXSurfaceCollisionAabbPtr)
		{
			*outXSurfaceCollisionAabbPtr = AllocSave_XSurfaceCollisionAabb();
			varXSurfaceCollisionAabb = *varXSurfaceCollisionAabbPtr;
			streamXSurfaceCollisionAabb = *outXSurfaceCollisionAabbPtr;
			auto v1 = sub_44AF80((void**)streamXSurfaceCollisionAabbPtr, (void**)outXSurfaceCollisionAabbPtr);
			DB_FindStreamDataOrInsert((void*)*varXSurfaceCollisionAabbPtr, v1);
			Save_XSurfaceCollisionAabb(true);
		}
	}
}

void Save_XSurfaceCollisionAabbPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionAabbPtr, sizeof(XSurfaceCollisionAabb*) * count, (void**)&outXSurfaceCollisionAabbPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceCollisionAabbPtr(false);
		varXSurfaceCollisionAabbPtr++;
		outXSurfaceCollisionAabbPtr++;
		streamXSurfaceCollisionAabbPtr++;
	}
}

void Save_XSurfaceCollisionLeaf(bool atStreamStart)
{
	// todo!
}

void Save_XSurfaceCollisionLeafArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionLeaf, sizeof(XSurfaceCollisionLeaf) * count, (void**)&outXSurfaceCollisionLeaf);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceCollisionLeaf(false);
		varXSurfaceCollisionLeaf++;
		outXSurfaceCollisionLeaf++;
		streamXSurfaceCollisionLeaf++;
	}
}

void Save_XSurfaceCollisionLeafPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionLeafPtr, sizeof(XSurfaceCollisionLeaf*), (void**)&outXSurfaceCollisionLeafPtr);
	if (*varXSurfaceCollisionLeafPtr)
	{
		*outXSurfaceCollisionLeafPtr = (XSurfaceCollisionLeaf*)DB_FindStreamData(*varXSurfaceCollisionLeafPtr);
		assert(*outXSurfaceCollisionLeafPtr != (XSurfaceCollisionLeaf*)0xFFFFFFFF);
		if (!*outXSurfaceCollisionLeafPtr)
		{
			*outXSurfaceCollisionLeafPtr = AllocSave_XSurfaceCollisionLeaf();
			varXSurfaceCollisionLeaf = *varXSurfaceCollisionLeafPtr;
			streamXSurfaceCollisionLeaf = *outXSurfaceCollisionLeafPtr;
			auto v1 = sub_44AF80((void**)streamXSurfaceCollisionLeafPtr, (void**)outXSurfaceCollisionLeafPtr);
			DB_FindStreamDataOrInsert((void*)*varXSurfaceCollisionLeafPtr, v1);
			Save_XSurfaceCollisionLeaf(true);
		}
	}
}

void Save_XSurfaceCollisionLeafPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionLeafPtr, sizeof(XSurfaceCollisionLeaf*) * count, (void**)&outXSurfaceCollisionLeafPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceCollisionLeafPtr(false);
		varXSurfaceCollisionLeafPtr++;
		outXSurfaceCollisionLeafPtr++;
		streamXSurfaceCollisionLeafPtr++;
	}
}

void Save_XSurfaceCollisionNode(bool atStreamStart)
{
	// todo!
}

void Save_XSurfaceCollisionNodeArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionNode, sizeof(XSurfaceCollisionNode) * count, (void**)&outXSurfaceCollisionNode);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceCollisionNode(false);
		varXSurfaceCollisionNode++;
		outXSurfaceCollisionNode++;
		streamXSurfaceCollisionNode++;
	}
}

void Save_XSurfaceCollisionNodePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionNodePtr, sizeof(XSurfaceCollisionNode*), (void**)&outXSurfaceCollisionNodePtr);
	if (*varXSurfaceCollisionNodePtr)
	{
		*outXSurfaceCollisionNodePtr = (XSurfaceCollisionNode*)DB_FindStreamData(*varXSurfaceCollisionNodePtr);
		assert(*outXSurfaceCollisionNodePtr != (XSurfaceCollisionNode*)0xFFFFFFFF);
		if (!*outXSurfaceCollisionNodePtr)
		{
			*outXSurfaceCollisionNodePtr = AllocSave_XSurfaceCollisionNode();
			varXSurfaceCollisionNode = *varXSurfaceCollisionNodePtr;
			streamXSurfaceCollisionNode = *outXSurfaceCollisionNodePtr;
			auto v1 = sub_44AF80((void**)streamXSurfaceCollisionNodePtr, (void**)outXSurfaceCollisionNodePtr);
			DB_FindStreamDataOrInsert((void*)*varXSurfaceCollisionNodePtr, v1);
			Save_XSurfaceCollisionNode(true);
		}
	}
}

void Save_XSurfaceCollisionNodePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionNodePtr, sizeof(XSurfaceCollisionNode*) * count, (void**)&outXSurfaceCollisionNodePtr);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceCollisionNodePtr(false);
		varXSurfaceCollisionNodePtr++;
		outXSurfaceCollisionNodePtr++;
		streamXSurfaceCollisionNodePtr++;
	}
}

void Save_XSurfaceCollisionTree(bool atStreamStart)
{
	// todo!
}

void Save_XSurfaceCollisionTreeArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionTree, sizeof(XSurfaceCollisionTree) * count, (void**)&outXSurfaceCollisionTree);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceCollisionTree(false);
		varXSurfaceCollisionTree++;
		outXSurfaceCollisionTree++;
		streamXSurfaceCollisionTree++;
	}
}

void Save_XSurfaceCollisionTreePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionTreePtr, sizeof(XSurfaceCollisionTree*), (void**)&outXSurfaceCollisionTreePtr);
	if (*varXSurfaceCollisionTreePtr)
	{
		*outXSurfaceCollisionTreePtr = (XSurfaceCollisionTree*)DB_FindStreamData(*varXSurfaceCollisionTreePtr);
		assert(*outXSurfaceCollisionTreePtr != (XSurfaceCollisionTree*)0xFFFFFFFF);
		if (!*outXSurfaceCollisionTreePtr)
		{
			*outXSurfaceCollisionTreePtr = AllocSave_XSurfaceCollisionTree();
			varXSurfaceCollisionTree = *varXSurfaceCollisionTreePtr;
			streamXSurfaceCollisionTree = *outXSurfaceCollisionTreePtr;
			auto v1 = sub_44AF80((void**)streamXSurfaceCollisionTreePtr, (void**)outXSurfaceCollisionTreePtr);
			DB_FindStreamDataOrInsert((void*)*varXSurfaceCollisionTreePtr, v1);
			Save_XSurfaceCollisionTree(true);
		}
	}
}

void Save_XSurfaceCollisionTreePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceCollisionTreePtr, sizeof(XSurfaceCollisionTree*) * count, (void**)&outXSurfaceCollisionTreePtr);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceCollisionTreePtr(false);
		varXSurfaceCollisionTreePtr++;
		outXSurfaceCollisionTreePtr++;
		streamXSurfaceCollisionTreePtr++;
	}
}

void Save_XSurfacePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXSurfacePtr, sizeof(XSurface*), (void**)&outXSurfacePtr);
	if (*varXSurfacePtr)
	{
		*outXSurfacePtr = (XSurface*)DB_FindStreamData(*varXSurfacePtr);
		assert(*outXSurfacePtr != (XSurface*)0xFFFFFFFF);
		if (!*outXSurfacePtr)
		{
			*outXSurfacePtr = AllocSave_XSurface();
			varXSurface = *varXSurfacePtr;
			streamXSurface = *outXSurfacePtr;
			auto v1 = sub_44AF80((void**)streamXSurfacePtr, (void**)outXSurfacePtr);
			DB_FindStreamDataOrInsert((void*)*varXSurfacePtr, v1);
			Save_XSurface(true);
		}
	}
}

void Save_XSurfacePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfacePtr, sizeof(XSurface*) * count, (void**)&outXSurfacePtr);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfacePtr(false);
		varXSurfacePtr++;
		outXSurfacePtr++;
		streamXSurfacePtr++;
	}
}

void Save_XSurfaceVertexInfo(bool atStreamStart)
{
	// todo!
}

void Save_XSurfaceVertexInfoArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceVertexInfo, sizeof(XSurfaceVertexInfo) * count, (void**)&outXSurfaceVertexInfo);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceVertexInfo(false);
		varXSurfaceVertexInfo++;
		outXSurfaceVertexInfo++;
		streamXSurfaceVertexInfo++;
	}
}

void Save_XSurfaceVertexInfoPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varXSurfaceVertexInfoPtr, sizeof(XSurfaceVertexInfo*), (void**)&outXSurfaceVertexInfoPtr);
	if (*varXSurfaceVertexInfoPtr)
	{
		*outXSurfaceVertexInfoPtr = (XSurfaceVertexInfo*)DB_FindStreamData(*varXSurfaceVertexInfoPtr);
		assert(*outXSurfaceVertexInfoPtr != (XSurfaceVertexInfo*)0xFFFFFFFF);
		if (!*outXSurfaceVertexInfoPtr)
		{
			*outXSurfaceVertexInfoPtr = AllocSave_XSurfaceVertexInfo();
			varXSurfaceVertexInfo = *varXSurfaceVertexInfoPtr;
			streamXSurfaceVertexInfo = *outXSurfaceVertexInfoPtr;
			auto v1 = sub_44AF80((void**)streamXSurfaceVertexInfoPtr, (void**)outXSurfaceVertexInfoPtr);
			DB_FindStreamDataOrInsert((void*)*varXSurfaceVertexInfoPtr, v1);
			Save_XSurfaceVertexInfo(true);
		}
	}
}

void Save_XSurfaceVertexInfoPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varXSurfaceVertexInfoPtr, sizeof(XSurfaceVertexInfo*) * count, (void**)&outXSurfaceVertexInfoPtr);
	for (int i = 0; i < count; i++)
	{
		Save_XSurfaceVertexInfoPtr(false);
		varXSurfaceVertexInfoPtr++;
		outXSurfaceVertexInfoPtr++;
		streamXSurfaceVertexInfoPtr++;
	}
}

void Save__AILSOUNDINFO(bool atStreamStart)
{
	// todo!
}

void Save__AILSOUNDINFOArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, var_AILSOUNDINFO, sizeof(_AILSOUNDINFO) * count, (void**)&out_AILSOUNDINFO);
	for (int i = 0; i < count; i++)
	{
		Save__AILSOUNDINFO(false);
		var_AILSOUNDINFO++;
		out_AILSOUNDINFO++;
		stream_AILSOUNDINFO++;
	}
}

void Save__AILSOUNDINFOPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, var_AILSOUNDINFOPtr, sizeof(_AILSOUNDINFO*), (void**)&out_AILSOUNDINFOPtr);
	if (*var_AILSOUNDINFOPtr)
	{
		*out_AILSOUNDINFOPtr = (_AILSOUNDINFO*)DB_FindStreamData(*var_AILSOUNDINFOPtr);
		assert(*out_AILSOUNDINFOPtr != (_AILSOUNDINFO*)0xFFFFFFFF);
		if (!*out_AILSOUNDINFOPtr)
		{
			*out_AILSOUNDINFOPtr = AllocSave__AILSOUNDINFO();
			var_AILSOUNDINFO = *var_AILSOUNDINFOPtr;
			stream_AILSOUNDINFO = *out_AILSOUNDINFOPtr;
			auto v1 = sub_44AF80((void**)stream_AILSOUNDINFOPtr, (void**)out_AILSOUNDINFOPtr);
			DB_FindStreamDataOrInsert((void*)*var_AILSOUNDINFOPtr, v1);
			Save__AILSOUNDINFO(true);
		}
	}
}

void Save__AILSOUNDINFOPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, var_AILSOUNDINFOPtr, sizeof(_AILSOUNDINFO*) * count, (void**)&out_AILSOUNDINFOPtr);
	for (int i = 0; i < count; i++)
	{
		Save__AILSOUNDINFOPtr(false);
		var_AILSOUNDINFOPtr++;
		out_AILSOUNDINFOPtr++;
		stream_AILSOUNDINFOPtr++;
	}
}

void Save_bool(bool atStreamStart)
{
	// todo!
}

void Save_boolArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varbool, sizeof(bool) * count, (void**)&outbool);
	for (int i = 0; i < count; i++)
	{
		Save_bool(false);
		varbool++;
		outbool++;
		streambool++;
	}
}

void Save_boolPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varboolPtr, sizeof(bool*), (void**)&outboolPtr);
	if (*varboolPtr)
	{
		*outboolPtr = (bool*)DB_FindStreamData(*varboolPtr);
		assert(*outboolPtr != (bool*)0xFFFFFFFF);
		if (!*outboolPtr)
		{
			*outboolPtr = AllocSave_bool();
			varbool = *varboolPtr;
			streambool = *outboolPtr;
			auto v1 = sub_44AF80((void**)streamboolPtr, (void**)outboolPtr);
			DB_FindStreamDataOrInsert((void*)*varboolPtr, v1);
			Save_bool(true);
		}
	}
}

void Save_boolPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varboolPtr, sizeof(bool*) * count, (void**)&outboolPtr);
	for (int i = 0; i < count; i++)
	{
		Save_boolPtr(false);
		varboolPtr++;
		outboolPtr++;
		streamboolPtr++;
	}
}

void Save_cLeafBrushNodeChildren_t(bool atStreamStart)
{
	// todo!
}

void Save_cLeafBrushNodeChildren_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeChildren_t, sizeof(cLeafBrushNodeChildren_t) * count, (void**)&outcLeafBrushNodeChildren_t);
	for (int i = 0; i < count; i++)
	{
		Save_cLeafBrushNodeChildren_t(false);
		varcLeafBrushNodeChildren_t++;
		outcLeafBrushNodeChildren_t++;
		streamcLeafBrushNodeChildren_t++;
	}
}

void Save_cLeafBrushNodeChildren_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeChildren_tPtr, sizeof(cLeafBrushNodeChildren_t*), (void**)&outcLeafBrushNodeChildren_tPtr);
	if (*varcLeafBrushNodeChildren_tPtr)
	{
		*outcLeafBrushNodeChildren_tPtr = (cLeafBrushNodeChildren_t*)DB_FindStreamData(*varcLeafBrushNodeChildren_tPtr);
		assert(*outcLeafBrushNodeChildren_tPtr != (cLeafBrushNodeChildren_t*)0xFFFFFFFF);
		if (!*outcLeafBrushNodeChildren_tPtr)
		{
			*outcLeafBrushNodeChildren_tPtr = AllocSave_cLeafBrushNodeChildren_t();
			varcLeafBrushNodeChildren_t = *varcLeafBrushNodeChildren_tPtr;
			streamcLeafBrushNodeChildren_t = *outcLeafBrushNodeChildren_tPtr;
			auto v1 = sub_44AF80((void**)streamcLeafBrushNodeChildren_tPtr, (void**)outcLeafBrushNodeChildren_tPtr);
			DB_FindStreamDataOrInsert((void*)*varcLeafBrushNodeChildren_tPtr, v1);
			Save_cLeafBrushNodeChildren_t(true);
		}
	}
}

void Save_cLeafBrushNodeChildren_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeChildren_tPtr, sizeof(cLeafBrushNodeChildren_t*) * count, (void**)&outcLeafBrushNodeChildren_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cLeafBrushNodeChildren_tPtr(false);
		varcLeafBrushNodeChildren_tPtr++;
		outcLeafBrushNodeChildren_tPtr++;
		streamcLeafBrushNodeChildren_tPtr++;
	}
}

void Save_cLeafBrushNodeData_t(bool atStreamStart)
{
	// todo!
}

void Save_cLeafBrushNodeData_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeData_t, sizeof(cLeafBrushNodeData_t) * count, (void**)&outcLeafBrushNodeData_t);
	for (int i = 0; i < count; i++)
	{
		Save_cLeafBrushNodeData_t(false);
		varcLeafBrushNodeData_t++;
		outcLeafBrushNodeData_t++;
		streamcLeafBrushNodeData_t++;
	}
}

void Save_cLeafBrushNodeData_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeData_tPtr, sizeof(cLeafBrushNodeData_t*), (void**)&outcLeafBrushNodeData_tPtr);
	if (*varcLeafBrushNodeData_tPtr)
	{
		*outcLeafBrushNodeData_tPtr = (cLeafBrushNodeData_t*)DB_FindStreamData(*varcLeafBrushNodeData_tPtr);
		assert(*outcLeafBrushNodeData_tPtr != (cLeafBrushNodeData_t*)0xFFFFFFFF);
		if (!*outcLeafBrushNodeData_tPtr)
		{
			*outcLeafBrushNodeData_tPtr = AllocSave_cLeafBrushNodeData_t();
			varcLeafBrushNodeData_t = *varcLeafBrushNodeData_tPtr;
			streamcLeafBrushNodeData_t = *outcLeafBrushNodeData_tPtr;
			auto v1 = sub_44AF80((void**)streamcLeafBrushNodeData_tPtr, (void**)outcLeafBrushNodeData_tPtr);
			DB_FindStreamDataOrInsert((void*)*varcLeafBrushNodeData_tPtr, v1);
			Save_cLeafBrushNodeData_t(true);
		}
	}
}

void Save_cLeafBrushNodeData_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeData_tPtr, sizeof(cLeafBrushNodeData_t*) * count, (void**)&outcLeafBrushNodeData_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cLeafBrushNodeData_tPtr(false);
		varcLeafBrushNodeData_tPtr++;
		outcLeafBrushNodeData_tPtr++;
		streamcLeafBrushNodeData_tPtr++;
	}
}

void Save_cLeafBrushNodeLeaf_t(bool atStreamStart)
{
	// todo!
}

void Save_cLeafBrushNodeLeaf_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeLeaf_t, sizeof(cLeafBrushNodeLeaf_t) * count, (void**)&outcLeafBrushNodeLeaf_t);
	for (int i = 0; i < count; i++)
	{
		Save_cLeafBrushNodeLeaf_t(false);
		varcLeafBrushNodeLeaf_t++;
		outcLeafBrushNodeLeaf_t++;
		streamcLeafBrushNodeLeaf_t++;
	}
}

void Save_cLeafBrushNodeLeaf_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeLeaf_tPtr, sizeof(cLeafBrushNodeLeaf_t*), (void**)&outcLeafBrushNodeLeaf_tPtr);
	if (*varcLeafBrushNodeLeaf_tPtr)
	{
		*outcLeafBrushNodeLeaf_tPtr = (cLeafBrushNodeLeaf_t*)DB_FindStreamData(*varcLeafBrushNodeLeaf_tPtr);
		assert(*outcLeafBrushNodeLeaf_tPtr != (cLeafBrushNodeLeaf_t*)0xFFFFFFFF);
		if (!*outcLeafBrushNodeLeaf_tPtr)
		{
			*outcLeafBrushNodeLeaf_tPtr = AllocSave_cLeafBrushNodeLeaf_t();
			varcLeafBrushNodeLeaf_t = *varcLeafBrushNodeLeaf_tPtr;
			streamcLeafBrushNodeLeaf_t = *outcLeafBrushNodeLeaf_tPtr;
			auto v1 = sub_44AF80((void**)streamcLeafBrushNodeLeaf_tPtr, (void**)outcLeafBrushNodeLeaf_tPtr);
			DB_FindStreamDataOrInsert((void*)*varcLeafBrushNodeLeaf_tPtr, v1);
			Save_cLeafBrushNodeLeaf_t(true);
		}
	}
}

void Save_cLeafBrushNodeLeaf_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeafBrushNodeLeaf_tPtr, sizeof(cLeafBrushNodeLeaf_t*) * count, (void**)&outcLeafBrushNodeLeaf_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cLeafBrushNodeLeaf_tPtr(false);
		varcLeafBrushNodeLeaf_tPtr++;
		outcLeafBrushNodeLeaf_tPtr++;
		streamcLeafBrushNodeLeaf_tPtr++;
	}
}

void Save_cLeafBrushNode_s(bool atStreamStart)
{
	// todo!
}

void Save_cLeafBrushNode_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeafBrushNode_s, sizeof(cLeafBrushNode_s) * count, (void**)&outcLeafBrushNode_s);
	for (int i = 0; i < count; i++)
	{
		Save_cLeafBrushNode_s(false);
		varcLeafBrushNode_s++;
		outcLeafBrushNode_s++;
		streamcLeafBrushNode_s++;
	}
}

void Save_cLeafBrushNode_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcLeafBrushNode_sPtr, sizeof(cLeafBrushNode_s*), (void**)&outcLeafBrushNode_sPtr);
	if (*varcLeafBrushNode_sPtr)
	{
		*outcLeafBrushNode_sPtr = (cLeafBrushNode_s*)DB_FindStreamData(*varcLeafBrushNode_sPtr);
		assert(*outcLeafBrushNode_sPtr != (cLeafBrushNode_s*)0xFFFFFFFF);
		if (!*outcLeafBrushNode_sPtr)
		{
			*outcLeafBrushNode_sPtr = AllocSave_cLeafBrushNode_s();
			varcLeafBrushNode_s = *varcLeafBrushNode_sPtr;
			streamcLeafBrushNode_s = *outcLeafBrushNode_sPtr;
			auto v1 = sub_44AF80((void**)streamcLeafBrushNode_sPtr, (void**)outcLeafBrushNode_sPtr);
			DB_FindStreamDataOrInsert((void*)*varcLeafBrushNode_sPtr, v1);
			Save_cLeafBrushNode_s(true);
		}
	}
}

void Save_cLeafBrushNode_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeafBrushNode_sPtr, sizeof(cLeafBrushNode_s*) * count, (void**)&outcLeafBrushNode_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cLeafBrushNode_sPtr(false);
		varcLeafBrushNode_sPtr++;
		outcLeafBrushNode_sPtr++;
		streamcLeafBrushNode_sPtr++;
	}
}

void Save_cLeaf_t(bool atStreamStart)
{
	// todo!
}

void Save_cLeaf_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeaf_t, sizeof(cLeaf_t) * count, (void**)&outcLeaf_t);
	for (int i = 0; i < count; i++)
	{
		Save_cLeaf_t(false);
		varcLeaf_t++;
		outcLeaf_t++;
		streamcLeaf_t++;
	}
}

void Save_cLeaf_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcLeaf_tPtr, sizeof(cLeaf_t*), (void**)&outcLeaf_tPtr);
	if (*varcLeaf_tPtr)
	{
		*outcLeaf_tPtr = (cLeaf_t*)DB_FindStreamData(*varcLeaf_tPtr);
		assert(*outcLeaf_tPtr != (cLeaf_t*)0xFFFFFFFF);
		if (!*outcLeaf_tPtr)
		{
			*outcLeaf_tPtr = AllocSave_cLeaf_t();
			varcLeaf_t = *varcLeaf_tPtr;
			streamcLeaf_t = *outcLeaf_tPtr;
			auto v1 = sub_44AF80((void**)streamcLeaf_tPtr, (void**)outcLeaf_tPtr);
			DB_FindStreamDataOrInsert((void*)*varcLeaf_tPtr, v1);
			Save_cLeaf_t(true);
		}
	}
}

void Save_cLeaf_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcLeaf_tPtr, sizeof(cLeaf_t*) * count, (void**)&outcLeaf_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cLeaf_tPtr(false);
		varcLeaf_tPtr++;
		outcLeaf_tPtr++;
		streamcLeaf_tPtr++;
	}
}

void Save_cNode_t(bool atStreamStart)
{
	// todo!
}

void Save_cNode_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcNode_t, sizeof(cNode_t) * count, (void**)&outcNode_t);
	for (int i = 0; i < count; i++)
	{
		Save_cNode_t(false);
		varcNode_t++;
		outcNode_t++;
		streamcNode_t++;
	}
}

void Save_cNode_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcNode_tPtr, sizeof(cNode_t*), (void**)&outcNode_tPtr);
	if (*varcNode_tPtr)
	{
		*outcNode_tPtr = (cNode_t*)DB_FindStreamData(*varcNode_tPtr);
		assert(*outcNode_tPtr != (cNode_t*)0xFFFFFFFF);
		if (!*outcNode_tPtr)
		{
			*outcNode_tPtr = AllocSave_cNode_t();
			varcNode_t = *varcNode_tPtr;
			streamcNode_t = *outcNode_tPtr;
			auto v1 = sub_44AF80((void**)streamcNode_tPtr, (void**)outcNode_tPtr);
			DB_FindStreamDataOrInsert((void*)*varcNode_tPtr, v1);
			Save_cNode_t(true);
		}
	}
}

void Save_cNode_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcNode_tPtr, sizeof(cNode_t*) * count, (void**)&outcNode_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cNode_tPtr(false);
		varcNode_tPtr++;
		outcNode_tPtr++;
		streamcNode_tPtr++;
	}
}

void Save_cStaticModel_s(bool atStreamStart)
{
	// todo!
}

void Save_cStaticModel_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcStaticModel_s, sizeof(cStaticModel_s) * count, (void**)&outcStaticModel_s);
	for (int i = 0; i < count; i++)
	{
		Save_cStaticModel_s(false);
		varcStaticModel_s++;
		outcStaticModel_s++;
		streamcStaticModel_s++;
	}
}

void Save_cStaticModel_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcStaticModel_sPtr, sizeof(cStaticModel_s*), (void**)&outcStaticModel_sPtr);
	if (*varcStaticModel_sPtr)
	{
		*outcStaticModel_sPtr = (cStaticModel_s*)DB_FindStreamData(*varcStaticModel_sPtr);
		assert(*outcStaticModel_sPtr != (cStaticModel_s*)0xFFFFFFFF);
		if (!*outcStaticModel_sPtr)
		{
			*outcStaticModel_sPtr = AllocSave_cStaticModel_s();
			varcStaticModel_s = *varcStaticModel_sPtr;
			streamcStaticModel_s = *outcStaticModel_sPtr;
			auto v1 = sub_44AF80((void**)streamcStaticModel_sPtr, (void**)outcStaticModel_sPtr);
			DB_FindStreamDataOrInsert((void*)*varcStaticModel_sPtr, v1);
			Save_cStaticModel_s(true);
		}
	}
}

void Save_cStaticModel_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcStaticModel_sPtr, sizeof(cStaticModel_s*) * count, (void**)&outcStaticModel_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cStaticModel_sPtr(false);
		varcStaticModel_sPtr++;
		outcStaticModel_sPtr++;
		streamcStaticModel_sPtr++;
	}
}

void Save_cbrush_t(bool atStreamStart)
{
	// todo!
}

void Save_cbrush_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcbrush_t, sizeof(cbrush_t) * count, (void**)&outcbrush_t);
	for (int i = 0; i < count; i++)
	{
		Save_cbrush_t(false);
		varcbrush_t++;
		outcbrush_t++;
		streamcbrush_t++;
	}
}

void Save_cbrush_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcbrush_tPtr, sizeof(cbrush_t*), (void**)&outcbrush_tPtr);
	if (*varcbrush_tPtr)
	{
		*outcbrush_tPtr = (cbrush_t*)DB_FindStreamData(*varcbrush_tPtr);
		assert(*outcbrush_tPtr != (cbrush_t*)0xFFFFFFFF);
		if (!*outcbrush_tPtr)
		{
			*outcbrush_tPtr = AllocSave_cbrush_t();
			varcbrush_t = *varcbrush_tPtr;
			streamcbrush_t = *outcbrush_tPtr;
			auto v1 = sub_44AF80((void**)streamcbrush_tPtr, (void**)outcbrush_tPtr);
			DB_FindStreamDataOrInsert((void*)*varcbrush_tPtr, v1);
			Save_cbrush_t(true);
		}
	}
}

void Save_cbrush_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcbrush_tPtr, sizeof(cbrush_t*) * count, (void**)&outcbrush_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cbrush_tPtr(false);
		varcbrush_tPtr++;
		outcbrush_tPtr++;
		streamcbrush_tPtr++;
	}
}

void Save_cbrushside_t(bool atStreamStart)
{
	// todo!
}

void Save_cbrushside_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcbrushside_t, sizeof(cbrushside_t) * count, (void**)&outcbrushside_t);
	for (int i = 0; i < count; i++)
	{
		Save_cbrushside_t(false);
		varcbrushside_t++;
		outcbrushside_t++;
		streamcbrushside_t++;
	}
}

void Save_cbrushside_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcbrushside_tPtr, sizeof(cbrushside_t*), (void**)&outcbrushside_tPtr);
	if (*varcbrushside_tPtr)
	{
		*outcbrushside_tPtr = (cbrushside_t*)DB_FindStreamData(*varcbrushside_tPtr);
		assert(*outcbrushside_tPtr != (cbrushside_t*)0xFFFFFFFF);
		if (!*outcbrushside_tPtr)
		{
			*outcbrushside_tPtr = AllocSave_cbrushside_t();
			varcbrushside_t = *varcbrushside_tPtr;
			streamcbrushside_t = *outcbrushside_tPtr;
			auto v1 = sub_44AF80((void**)streamcbrushside_tPtr, (void**)outcbrushside_tPtr);
			DB_FindStreamDataOrInsert((void*)*varcbrushside_tPtr, v1);
			Save_cbrushside_t(true);
		}
	}
}

void Save_cbrushside_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcbrushside_tPtr, sizeof(cbrushside_t*) * count, (void**)&outcbrushside_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cbrushside_tPtr(false);
		varcbrushside_tPtr++;
		outcbrushside_tPtr++;
		streamcbrushside_tPtr++;
	}
}

void Save_char(bool atStreamStart)
{
	// todo!
}

void Save_char16(bool atStreamStart)
{
	// todo!
}

void Save_char16Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varchar16, sizeof(char16) * count, (void**)&outchar16);
	for (int i = 0; i < count; i++)
	{
		Save_char16(false);
		varchar16++;
		outchar16++;
		streamchar16++;
	}
}

void Save_char16Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varchar16Ptr, sizeof(char16*), (void**)&outchar16Ptr);
	if (*varchar16Ptr)
	{
		*outchar16Ptr = (char16*)DB_FindStreamData(*varchar16Ptr);
		assert(*outchar16Ptr != (char16*)0xFFFFFFFF);
		if (!*outchar16Ptr)
		{
			*outchar16Ptr = AllocSave_char16();
			varchar16 = *varchar16Ptr;
			streamchar16 = *outchar16Ptr;
			auto v1 = sub_44AF80((void**)streamchar16Ptr, (void**)outchar16Ptr);
			DB_FindStreamDataOrInsert((void*)*varchar16Ptr, v1);
			Save_char16(true);
		}
	}
}

void Save_char16PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varchar16Ptr, sizeof(char16*) * count, (void**)&outchar16Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_char16Ptr(false);
		varchar16Ptr++;
		outchar16Ptr++;
		streamchar16Ptr++;
	}
}

void Save_charArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varchar, sizeof(char) * count, (void**)&outchar);
	for (int i = 0; i < count; i++)
	{
		Save_char(false);
		varchar++;
		outchar++;
		streamchar++;
	}
}

void Save_charPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcharPtr, sizeof(char*), (void**)&outcharPtr);
	if (*varcharPtr)
	{
		*outcharPtr = (char*)DB_FindStreamData(*varcharPtr);
		assert(*outcharPtr != (char*)0xFFFFFFFF);
		if (!*outcharPtr)
		{
			*outcharPtr = AllocSave_char();
			varchar = *varcharPtr;
			streamchar = *outcharPtr;
			auto v1 = sub_44AF80((void**)streamcharPtr, (void**)outcharPtr);
			DB_FindStreamDataOrInsert((void*)*varcharPtr, v1);
			Save_char(true);
		}
	}
}

void Save_charPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcharPtr, sizeof(char*) * count, (void**)&outcharPtr);
	for (int i = 0; i < count; i++)
	{
		Save_charPtr(false);
		varcharPtr++;
		outcharPtr++;
		streamcharPtr++;
	}
}

void Save_clipMap_t(bool atStreamStart)
{
	// todo!
}

void Save_clipMap_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varclipMap_t, sizeof(clipMap_t) * count, (void**)&outclipMap_t);
	for (int i = 0; i < count; i++)
	{
		Save_clipMap_t(false);
		varclipMap_t++;
		outclipMap_t++;
		streamclipMap_t++;
	}
}

void Save_clipMap_tAsset(clipMap_t** asset)
{
	// todo!
}

void Save_clipMap_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varclipMap_tPtr, sizeof(clipMap_t*), (void**)&outclipMap_tPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varclipMap_tPtr)
	{
		*outclipMap_tPtr = (clipMap_t*)DB_FindStreamData(*varclipMap_tPtr);
		assert(*outclipMap_tPtr != (clipMap_t*)0xFFFFFFFF);
		if (!*outclipMap_tPtr)
		{
			*outclipMap_tPtr = AllocSave_clipMap_t();
			varclipMap_t = *varclipMap_tPtr;
			streamclipMap_t = *outclipMap_tPtr;
			auto v1 = sub_44AF80((void**)streamclipMap_tPtr, (void**)outclipMap_tPtr);
			DB_FindStreamDataOrInsert((void*)*varclipMap_tPtr, v1);
			Save_clipMap_t(true);
		}
	}
	DB_PopStreamPos();
}

void Save_clipMap_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varclipMap_tPtr, sizeof(clipMap_t*) * count, (void**)&outclipMap_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_clipMap_tPtr(false);
		varclipMap_tPtr++;
		outclipMap_tPtr++;
		streamclipMap_tPtr++;
	}
}

void Save_cmodel_t(bool atStreamStart)
{
	// todo!
}

void Save_cmodel_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcmodel_t, sizeof(cmodel_t) * count, (void**)&outcmodel_t);
	for (int i = 0; i < count; i++)
	{
		Save_cmodel_t(false);
		varcmodel_t++;
		outcmodel_t++;
		streamcmodel_t++;
	}
}

void Save_cmodel_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcmodel_tPtr, sizeof(cmodel_t*), (void**)&outcmodel_tPtr);
	if (*varcmodel_tPtr)
	{
		*outcmodel_tPtr = (cmodel_t*)DB_FindStreamData(*varcmodel_tPtr);
		assert(*outcmodel_tPtr != (cmodel_t*)0xFFFFFFFF);
		if (!*outcmodel_tPtr)
		{
			*outcmodel_tPtr = AllocSave_cmodel_t();
			varcmodel_t = *varcmodel_tPtr;
			streamcmodel_t = *outcmodel_tPtr;
			auto v1 = sub_44AF80((void**)streamcmodel_tPtr, (void**)outcmodel_tPtr);
			DB_FindStreamDataOrInsert((void*)*varcmodel_tPtr, v1);
			Save_cmodel_t(true);
		}
	}
}

void Save_cmodel_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcmodel_tPtr, sizeof(cmodel_t*) * count, (void**)&outcmodel_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cmodel_tPtr(false);
		varcmodel_tPtr++;
		outcmodel_tPtr++;
		streamcmodel_tPtr++;
	}
}

void Save_columnInfo_s(bool atStreamStart)
{
	// todo!
}

void Save_columnInfo_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcolumnInfo_s, sizeof(columnInfo_s) * count, (void**)&outcolumnInfo_s);
	for (int i = 0; i < count; i++)
	{
		Save_columnInfo_s(false);
		varcolumnInfo_s++;
		outcolumnInfo_s++;
		streamcolumnInfo_s++;
	}
}

void Save_columnInfo_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcolumnInfo_sPtr, sizeof(columnInfo_s*), (void**)&outcolumnInfo_sPtr);
	if (*varcolumnInfo_sPtr)
	{
		*outcolumnInfo_sPtr = (columnInfo_s*)DB_FindStreamData(*varcolumnInfo_sPtr);
		assert(*outcolumnInfo_sPtr != (columnInfo_s*)0xFFFFFFFF);
		if (!*outcolumnInfo_sPtr)
		{
			*outcolumnInfo_sPtr = AllocSave_columnInfo_s();
			varcolumnInfo_s = *varcolumnInfo_sPtr;
			streamcolumnInfo_s = *outcolumnInfo_sPtr;
			auto v1 = sub_44AF80((void**)streamcolumnInfo_sPtr, (void**)outcolumnInfo_sPtr);
			DB_FindStreamDataOrInsert((void*)*varcolumnInfo_sPtr, v1);
			Save_columnInfo_s(true);
		}
	}
}

void Save_columnInfo_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcolumnInfo_sPtr, sizeof(columnInfo_s*) * count, (void**)&outcolumnInfo_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_columnInfo_sPtr(false);
		varcolumnInfo_sPtr++;
		outcolumnInfo_sPtr++;
		streamcolumnInfo_sPtr++;
	}
}

void Save_complex_s(bool atStreamStart)
{
	// todo!
}

void Save_complex_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcomplex_s, sizeof(complex_s) * count, (void**)&outcomplex_s);
	for (int i = 0; i < count; i++)
	{
		Save_complex_s(false);
		varcomplex_s++;
		outcomplex_s++;
		streamcomplex_s++;
	}
}

void Save_complex_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcomplex_sPtr, sizeof(complex_s*), (void**)&outcomplex_sPtr);
	if (*varcomplex_sPtr)
	{
		*outcomplex_sPtr = (complex_s*)DB_FindStreamData(*varcomplex_sPtr);
		assert(*outcomplex_sPtr != (complex_s*)0xFFFFFFFF);
		if (!*outcomplex_sPtr)
		{
			*outcomplex_sPtr = AllocSave_complex_s();
			varcomplex_s = *varcomplex_sPtr;
			streamcomplex_s = *outcomplex_sPtr;
			auto v1 = sub_44AF80((void**)streamcomplex_sPtr, (void**)outcomplex_sPtr);
			DB_FindStreamDataOrInsert((void*)*varcomplex_sPtr, v1);
			Save_complex_s(true);
		}
	}
}

void Save_complex_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcomplex_sPtr, sizeof(complex_s*) * count, (void**)&outcomplex_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_complex_sPtr(false);
		varcomplex_sPtr++;
		outcomplex_sPtr++;
		streamcomplex_sPtr++;
	}
}

void Save_cplane_s(bool atStreamStart)
{
	// todo!
}

void Save_cplane_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcplane_s, sizeof(cplane_s) * count, (void**)&outcplane_s);
	for (int i = 0; i < count; i++)
	{
		Save_cplane_s(false);
		varcplane_s++;
		outcplane_s++;
		streamcplane_s++;
	}
}

void Save_cplane_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varcplane_sPtr, sizeof(cplane_s*), (void**)&outcplane_sPtr);
	if (*varcplane_sPtr)
	{
		*outcplane_sPtr = (cplane_s*)DB_FindStreamData(*varcplane_sPtr);
		assert(*outcplane_sPtr != (cplane_s*)0xFFFFFFFF);
		if (!*outcplane_sPtr)
		{
			*outcplane_sPtr = AllocSave_cplane_s();
			varcplane_s = *varcplane_sPtr;
			streamcplane_s = *outcplane_sPtr;
			auto v1 = sub_44AF80((void**)streamcplane_sPtr, (void**)outcplane_sPtr);
			DB_FindStreamDataOrInsert((void*)*varcplane_sPtr, v1);
			Save_cplane_s(true);
		}
	}
}

void Save_cplane_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varcplane_sPtr, sizeof(cplane_s*) * count, (void**)&outcplane_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_cplane_sPtr(false);
		varcplane_sPtr++;
		outcplane_sPtr++;
		streamcplane_sPtr++;
	}
}

void Save_double(bool atStreamStart)
{
	// todo!
}

void Save_doubleArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, vardouble, sizeof(double) * count, (void**)&outdouble);
	for (int i = 0; i < count; i++)
	{
		Save_double(false);
		vardouble++;
		outdouble++;
		streamdouble++;
	}
}

void Save_doublePtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, vardoublePtr, sizeof(double*), (void**)&outdoublePtr);
	if (*vardoublePtr)
	{
		*outdoublePtr = (double*)DB_FindStreamData(*vardoublePtr);
		assert(*outdoublePtr != (double*)0xFFFFFFFF);
		if (!*outdoublePtr)
		{
			*outdoublePtr = AllocSave_double();
			vardouble = *vardoublePtr;
			streamdouble = *outdoublePtr;
			auto v1 = sub_44AF80((void**)streamdoublePtr, (void**)outdoublePtr);
			DB_FindStreamDataOrInsert((void*)*vardoublePtr, v1);
			Save_double(true);
		}
	}
}

void Save_doublePtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, vardoublePtr, sizeof(double*) * count, (void**)&outdoublePtr);
	for (int i = 0; i < count; i++)
	{
		Save_doublePtr(false);
		vardoublePtr++;
		outdoublePtr++;
		streamdoublePtr++;
	}
}

void Save_editFieldDef_s(bool atStreamStart)
{
	// todo!
}

void Save_editFieldDef_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, vareditFieldDef_s, sizeof(editFieldDef_s) * count, (void**)&outeditFieldDef_s);
	for (int i = 0; i < count; i++)
	{
		Save_editFieldDef_s(false);
		vareditFieldDef_s++;
		outeditFieldDef_s++;
		streameditFieldDef_s++;
	}
}

void Save_editFieldDef_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, vareditFieldDef_sPtr, sizeof(editFieldDef_s*), (void**)&outeditFieldDef_sPtr);
	if (*vareditFieldDef_sPtr)
	{
		*outeditFieldDef_sPtr = (editFieldDef_s*)DB_FindStreamData(*vareditFieldDef_sPtr);
		assert(*outeditFieldDef_sPtr != (editFieldDef_s*)0xFFFFFFFF);
		if (!*outeditFieldDef_sPtr)
		{
			*outeditFieldDef_sPtr = AllocSave_editFieldDef_s();
			vareditFieldDef_s = *vareditFieldDef_sPtr;
			streameditFieldDef_s = *outeditFieldDef_sPtr;
			auto v1 = sub_44AF80((void**)streameditFieldDef_sPtr, (void**)outeditFieldDef_sPtr);
			DB_FindStreamDataOrInsert((void*)*vareditFieldDef_sPtr, v1);
			Save_editFieldDef_s(true);
		}
	}
}

void Save_editFieldDef_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, vareditFieldDef_sPtr, sizeof(editFieldDef_s*) * count, (void**)&outeditFieldDef_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_editFieldDef_sPtr(false);
		vareditFieldDef_sPtr++;
		outeditFieldDef_sPtr++;
		streameditFieldDef_sPtr++;
	}
}

void Save_entryInternalData(bool atStreamStart)
{
	// todo!
}

void Save_entryInternalDataArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varentryInternalData, sizeof(entryInternalData) * count, (void**)&outentryInternalData);
	for (int i = 0; i < count; i++)
	{
		Save_entryInternalData(false);
		varentryInternalData++;
		outentryInternalData++;
		streamentryInternalData++;
	}
}

void Save_entryInternalDataPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varentryInternalDataPtr, sizeof(entryInternalData*), (void**)&outentryInternalDataPtr);
	if (*varentryInternalDataPtr)
	{
		*outentryInternalDataPtr = (entryInternalData*)DB_FindStreamData(*varentryInternalDataPtr);
		assert(*outentryInternalDataPtr != (entryInternalData*)0xFFFFFFFF);
		if (!*outentryInternalDataPtr)
		{
			*outentryInternalDataPtr = AllocSave_entryInternalData();
			varentryInternalData = *varentryInternalDataPtr;
			streamentryInternalData = *outentryInternalDataPtr;
			auto v1 = sub_44AF80((void**)streamentryInternalDataPtr, (void**)outentryInternalDataPtr);
			DB_FindStreamDataOrInsert((void*)*varentryInternalDataPtr, v1);
			Save_entryInternalData(true);
		}
	}
}

void Save_entryInternalDataPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varentryInternalDataPtr, sizeof(entryInternalData*) * count, (void**)&outentryInternalDataPtr);
	for (int i = 0; i < count; i++)
	{
		Save_entryInternalDataPtr(false);
		varentryInternalDataPtr++;
		outentryInternalDataPtr++;
		streamentryInternalDataPtr++;
	}
}

void Save_expressionEntry(bool atStreamStart)
{
	// todo!
}

void Save_expressionEntryArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varexpressionEntry, sizeof(expressionEntry) * count, (void**)&outexpressionEntry);
	for (int i = 0; i < count; i++)
	{
		Save_expressionEntry(false);
		varexpressionEntry++;
		outexpressionEntry++;
		streamexpressionEntry++;
	}
}

void Save_expressionEntryPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varexpressionEntryPtr, sizeof(expressionEntry*), (void**)&outexpressionEntryPtr);
	if (*varexpressionEntryPtr)
	{
		*outexpressionEntryPtr = (expressionEntry*)DB_FindStreamData(*varexpressionEntryPtr);
		assert(*outexpressionEntryPtr != (expressionEntry*)0xFFFFFFFF);
		if (!*outexpressionEntryPtr)
		{
			*outexpressionEntryPtr = AllocSave_expressionEntry();
			varexpressionEntry = *varexpressionEntryPtr;
			streamexpressionEntry = *outexpressionEntryPtr;
			auto v1 = sub_44AF80((void**)streamexpressionEntryPtr, (void**)outexpressionEntryPtr);
			DB_FindStreamDataOrInsert((void*)*varexpressionEntryPtr, v1);
			Save_expressionEntry(true);
		}
	}
}

void Save_expressionEntryPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varexpressionEntryPtr, sizeof(expressionEntry*) * count, (void**)&outexpressionEntryPtr);
	for (int i = 0; i < count; i++)
	{
		Save_expressionEntryPtr(false);
		varexpressionEntryPtr++;
		outexpressionEntryPtr++;
		streamexpressionEntryPtr++;
	}
}

void Save_float(bool atStreamStart)
{
	// todo!
}

void Save_float16(bool atStreamStart)
{
	// todo!
}

void Save_float16Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varfloat16, sizeof(float16) * count, (void**)&outfloat16);
	for (int i = 0; i < count; i++)
	{
		Save_float16(false);
		varfloat16++;
		outfloat16++;
		streamfloat16++;
	}
}

void Save_float16Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varfloat16Ptr, sizeof(float16*), (void**)&outfloat16Ptr);
	if (*varfloat16Ptr)
	{
		*outfloat16Ptr = (float16*)DB_FindStreamData(*varfloat16Ptr);
		assert(*outfloat16Ptr != (float16*)0xFFFFFFFF);
		if (!*outfloat16Ptr)
		{
			*outfloat16Ptr = AllocSave_float16();
			varfloat16 = *varfloat16Ptr;
			streamfloat16 = *outfloat16Ptr;
			auto v1 = sub_44AF80((void**)streamfloat16Ptr, (void**)outfloat16Ptr);
			DB_FindStreamDataOrInsert((void*)*varfloat16Ptr, v1);
			Save_float16(true);
		}
	}
}

void Save_float16PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varfloat16Ptr, sizeof(float16*) * count, (void**)&outfloat16Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_float16Ptr(false);
		varfloat16Ptr++;
		outfloat16Ptr++;
		streamfloat16Ptr++;
	}
}

void Save_floatArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varfloat, sizeof(float) * count, (void**)&outfloat);
	for (int i = 0; i < count; i++)
	{
		Save_float(false);
		varfloat++;
		outfloat++;
		streamfloat++;
	}
}

void Save_floatPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varfloatPtr, sizeof(float*), (void**)&outfloatPtr);
	if (*varfloatPtr)
	{
		*outfloatPtr = (float*)DB_FindStreamData(*varfloatPtr);
		assert(*outfloatPtr != (float*)0xFFFFFFFF);
		if (!*outfloatPtr)
		{
			*outfloatPtr = AllocSave_float();
			varfloat = *varfloatPtr;
			streamfloat = *outfloatPtr;
			auto v1 = sub_44AF80((void**)streamfloatPtr, (void**)outfloatPtr);
			DB_FindStreamDataOrInsert((void*)*varfloatPtr, v1);
			Save_float(true);
		}
	}
}

void Save_floatPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varfloatPtr, sizeof(float*) * count, (void**)&outfloatPtr);
	for (int i = 0; i < count; i++)
	{
		Save_floatPtr(false);
		varfloatPtr++;
		outfloatPtr++;
		streamfloatPtr++;
	}
}

void Save_int16(bool atStreamStart)
{
	// todo!
}

void Save_int16Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varint16, sizeof(int16) * count, (void**)&outint16);
	for (int i = 0; i < count; i++)
	{
		Save_int16(false);
		varint16++;
		outint16++;
		streamint16++;
	}
}

void Save_int16Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varint16Ptr, sizeof(int16*), (void**)&outint16Ptr);
	if (*varint16Ptr)
	{
		*outint16Ptr = (int16*)DB_FindStreamData(*varint16Ptr);
		assert(*outint16Ptr != (int16*)0xFFFFFFFF);
		if (!*outint16Ptr)
		{
			*outint16Ptr = AllocSave_int16();
			varint16 = *varint16Ptr;
			streamint16 = *outint16Ptr;
			auto v1 = sub_44AF80((void**)streamint16Ptr, (void**)outint16Ptr);
			DB_FindStreamDataOrInsert((void*)*varint16Ptr, v1);
			Save_int16(true);
		}
	}
}

void Save_int16PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varint16Ptr, sizeof(int16*) * count, (void**)&outint16Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_int16Ptr(false);
		varint16Ptr++;
		outint16Ptr++;
		streamint16Ptr++;
	}
}

void Save_int32(bool atStreamStart)
{
	// todo!
}

void Save_int32Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varint32, sizeof(int32) * count, (void**)&outint32);
	for (int i = 0; i < count; i++)
	{
		Save_int32(false);
		varint32++;
		outint32++;
		streamint32++;
	}
}

void Save_int32Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varint32Ptr, sizeof(int32*), (void**)&outint32Ptr);
	if (*varint32Ptr)
	{
		*outint32Ptr = (int32*)DB_FindStreamData(*varint32Ptr);
		assert(*outint32Ptr != (int32*)0xFFFFFFFF);
		if (!*outint32Ptr)
		{
			*outint32Ptr = AllocSave_int32();
			varint32 = *varint32Ptr;
			streamint32 = *outint32Ptr;
			auto v1 = sub_44AF80((void**)streamint32Ptr, (void**)outint32Ptr);
			DB_FindStreamDataOrInsert((void*)*varint32Ptr, v1);
			Save_int32(true);
		}
	}
}

void Save_int32PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varint32Ptr, sizeof(int32*) * count, (void**)&outint32Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_int32Ptr(false);
		varint32Ptr++;
		outint32Ptr++;
		streamint32Ptr++;
	}
}

void Save_int64(bool atStreamStart)
{
	// todo!
}

void Save_int64Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varint64, sizeof(int64) * count, (void**)&outint64);
	for (int i = 0; i < count; i++)
	{
		Save_int64(false);
		varint64++;
		outint64++;
		streamint64++;
	}
}

void Save_int64Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varint64Ptr, sizeof(int64*), (void**)&outint64Ptr);
	if (*varint64Ptr)
	{
		*outint64Ptr = (int64*)DB_FindStreamData(*varint64Ptr);
		assert(*outint64Ptr != (int64*)0xFFFFFFFF);
		if (!*outint64Ptr)
		{
			*outint64Ptr = AllocSave_int64();
			varint64 = *varint64Ptr;
			streamint64 = *outint64Ptr;
			auto v1 = sub_44AF80((void**)streamint64Ptr, (void**)outint64Ptr);
			DB_FindStreamDataOrInsert((void*)*varint64Ptr, v1);
			Save_int64(true);
		}
	}
}

void Save_int64PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varint64Ptr, sizeof(int64*) * count, (void**)&outint64Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_int64Ptr(false);
		varint64Ptr++;
		outint64Ptr++;
		streamint64Ptr++;
	}
}

void Save_int8(bool atStreamStart)
{
	// todo!
}

void Save_int8Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varint8, sizeof(int8) * count, (void**)&outint8);
	for (int i = 0; i < count; i++)
	{
		Save_int8(false);
		varint8++;
		outint8++;
		streamint8++;
	}
}

void Save_int8Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varint8Ptr, sizeof(int8*), (void**)&outint8Ptr);
	if (*varint8Ptr)
	{
		*outint8Ptr = (int8*)DB_FindStreamData(*varint8Ptr);
		assert(*outint8Ptr != (int8*)0xFFFFFFFF);
		if (!*outint8Ptr)
		{
			*outint8Ptr = AllocSave_int8();
			varint8 = *varint8Ptr;
			streamint8 = *outint8Ptr;
			auto v1 = sub_44AF80((void**)streamint8Ptr, (void**)outint8Ptr);
			DB_FindStreamDataOrInsert((void*)*varint8Ptr, v1);
			Save_int8(true);
		}
	}
}

void Save_int8PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varint8Ptr, sizeof(int8*) * count, (void**)&outint8Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_int8Ptr(false);
		varint8Ptr++;
		outint8Ptr++;
		streamint8Ptr++;
	}
}

void Save_itemDefData_t(bool atStreamStart)
{
	// todo!
}

void Save_itemDefData_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varitemDefData_t, sizeof(itemDefData_t) * count, (void**)&outitemDefData_t);
	for (int i = 0; i < count; i++)
	{
		Save_itemDefData_t(false);
		varitemDefData_t++;
		outitemDefData_t++;
		streamitemDefData_t++;
	}
}

void Save_itemDefData_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varitemDefData_tPtr, sizeof(itemDefData_t*), (void**)&outitemDefData_tPtr);
	if (*varitemDefData_tPtr)
	{
		*outitemDefData_tPtr = (itemDefData_t*)DB_FindStreamData(*varitemDefData_tPtr);
		assert(*outitemDefData_tPtr != (itemDefData_t*)0xFFFFFFFF);
		if (!*outitemDefData_tPtr)
		{
			*outitemDefData_tPtr = AllocSave_itemDefData_t();
			varitemDefData_t = *varitemDefData_tPtr;
			streamitemDefData_t = *outitemDefData_tPtr;
			auto v1 = sub_44AF80((void**)streamitemDefData_tPtr, (void**)outitemDefData_tPtr);
			DB_FindStreamDataOrInsert((void*)*varitemDefData_tPtr, v1);
			Save_itemDefData_t(true);
		}
	}
}

void Save_itemDefData_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varitemDefData_tPtr, sizeof(itemDefData_t*) * count, (void**)&outitemDefData_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_itemDefData_tPtr(false);
		varitemDefData_tPtr++;
		outitemDefData_tPtr++;
		streamitemDefData_tPtr++;
	}
}

void Save_itemDef_s(bool atStreamStart)
{
	// todo!
}

void Save_itemDef_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varitemDef_s, sizeof(itemDef_s) * count, (void**)&outitemDef_s);
	for (int i = 0; i < count; i++)
	{
		Save_itemDef_s(false);
		varitemDef_s++;
		outitemDef_s++;
		streamitemDef_s++;
	}
}

void Save_itemDef_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varitemDef_sPtr, sizeof(itemDef_s*), (void**)&outitemDef_sPtr);
	if (*varitemDef_sPtr)
	{
		*outitemDef_sPtr = (itemDef_s*)DB_FindStreamData(*varitemDef_sPtr);
		assert(*outitemDef_sPtr != (itemDef_s*)0xFFFFFFFF);
		if (!*outitemDef_sPtr)
		{
			*outitemDef_sPtr = AllocSave_itemDef_s();
			varitemDef_s = *varitemDef_sPtr;
			streamitemDef_s = *outitemDef_sPtr;
			auto v1 = sub_44AF80((void**)streamitemDef_sPtr, (void**)outitemDef_sPtr);
			DB_FindStreamDataOrInsert((void*)*varitemDef_sPtr, v1);
			Save_itemDef_s(true);
		}
	}
}

void Save_itemDef_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varitemDef_sPtr, sizeof(itemDef_s*) * count, (void**)&outitemDef_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_itemDef_sPtr(false);
		varitemDef_sPtr++;
		outitemDef_sPtr++;
		streamitemDef_sPtr++;
	}
}

void Save_listBoxDef_s(bool atStreamStart)
{
	// todo!
}

void Save_listBoxDef_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varlistBoxDef_s, sizeof(listBoxDef_s) * count, (void**)&outlistBoxDef_s);
	for (int i = 0; i < count; i++)
	{
		Save_listBoxDef_s(false);
		varlistBoxDef_s++;
		outlistBoxDef_s++;
		streamlistBoxDef_s++;
	}
}

void Save_listBoxDef_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varlistBoxDef_sPtr, sizeof(listBoxDef_s*), (void**)&outlistBoxDef_sPtr);
	if (*varlistBoxDef_sPtr)
	{
		*outlistBoxDef_sPtr = (listBoxDef_s*)DB_FindStreamData(*varlistBoxDef_sPtr);
		assert(*outlistBoxDef_sPtr != (listBoxDef_s*)0xFFFFFFFF);
		if (!*outlistBoxDef_sPtr)
		{
			*outlistBoxDef_sPtr = AllocSave_listBoxDef_s();
			varlistBoxDef_s = *varlistBoxDef_sPtr;
			streamlistBoxDef_s = *outlistBoxDef_sPtr;
			auto v1 = sub_44AF80((void**)streamlistBoxDef_sPtr, (void**)outlistBoxDef_sPtr);
			DB_FindStreamDataOrInsert((void*)*varlistBoxDef_sPtr, v1);
			Save_listBoxDef_s(true);
		}
	}
}

void Save_listBoxDef_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varlistBoxDef_sPtr, sizeof(listBoxDef_s*) * count, (void**)&outlistBoxDef_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_listBoxDef_sPtr(false);
		varlistBoxDef_sPtr++;
		outlistBoxDef_sPtr++;
		streamlistBoxDef_sPtr++;
	}
}

void Save_menuDef_t(bool atStreamStart)
{
	// todo!
}

void Save_menuDef_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varmenuDef_t, sizeof(menuDef_t) * count, (void**)&outmenuDef_t);
	for (int i = 0; i < count; i++)
	{
		Save_menuDef_t(false);
		varmenuDef_t++;
		outmenuDef_t++;
		streammenuDef_t++;
	}
}

void Save_menuDef_tAsset(menuDef_t** asset)
{
	// todo!
}

void Save_menuDef_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varmenuDef_tPtr, sizeof(menuDef_t*), (void**)&outmenuDef_tPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varmenuDef_tPtr)
	{
		*outmenuDef_tPtr = (menuDef_t*)DB_FindStreamData(*varmenuDef_tPtr);
		assert(*outmenuDef_tPtr != (menuDef_t*)0xFFFFFFFF);
		if (!*outmenuDef_tPtr)
		{
			*outmenuDef_tPtr = AllocSave_menuDef_t();
			varmenuDef_t = *varmenuDef_tPtr;
			streammenuDef_t = *outmenuDef_tPtr;
			auto v1 = sub_44AF80((void**)streammenuDef_tPtr, (void**)outmenuDef_tPtr);
			DB_FindStreamDataOrInsert((void*)*varmenuDef_tPtr, v1);
			Save_menuDef_t(true);
		}
	}
	DB_PopStreamPos();
}

void Save_menuDef_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varmenuDef_tPtr, sizeof(menuDef_t*) * count, (void**)&outmenuDef_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_menuDef_tPtr(false);
		varmenuDef_tPtr++;
		outmenuDef_tPtr++;
		streammenuDef_tPtr++;
	}
}

void Save_menuTransition(bool atStreamStart)
{
	// todo!
}

void Save_menuTransitionArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varmenuTransition, sizeof(menuTransition) * count, (void**)&outmenuTransition);
	for (int i = 0; i < count; i++)
	{
		Save_menuTransition(false);
		varmenuTransition++;
		outmenuTransition++;
		streammenuTransition++;
	}
}

void Save_menuTransitionPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varmenuTransitionPtr, sizeof(menuTransition*), (void**)&outmenuTransitionPtr);
	if (*varmenuTransitionPtr)
	{
		*outmenuTransitionPtr = (menuTransition*)DB_FindStreamData(*varmenuTransitionPtr);
		assert(*outmenuTransitionPtr != (menuTransition*)0xFFFFFFFF);
		if (!*outmenuTransitionPtr)
		{
			*outmenuTransitionPtr = AllocSave_menuTransition();
			varmenuTransition = *varmenuTransitionPtr;
			streammenuTransition = *outmenuTransitionPtr;
			auto v1 = sub_44AF80((void**)streammenuTransitionPtr, (void**)outmenuTransitionPtr);
			DB_FindStreamDataOrInsert((void*)*varmenuTransitionPtr, v1);
			Save_menuTransition(true);
		}
	}
}

void Save_menuTransitionPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varmenuTransitionPtr, sizeof(menuTransition*) * count, (void**)&outmenuTransitionPtr);
	for (int i = 0; i < count; i++)
	{
		Save_menuTransitionPtr(false);
		varmenuTransitionPtr++;
		outmenuTransitionPtr++;
		streammenuTransitionPtr++;
	}
}

void Save_multiDef_s(bool atStreamStart)
{
	// todo!
}

void Save_multiDef_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varmultiDef_s, sizeof(multiDef_s) * count, (void**)&outmultiDef_s);
	for (int i = 0; i < count; i++)
	{
		Save_multiDef_s(false);
		varmultiDef_s++;
		outmultiDef_s++;
		streammultiDef_s++;
	}
}

void Save_multiDef_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varmultiDef_sPtr, sizeof(multiDef_s*), (void**)&outmultiDef_sPtr);
	if (*varmultiDef_sPtr)
	{
		*outmultiDef_sPtr = (multiDef_s*)DB_FindStreamData(*varmultiDef_sPtr);
		assert(*outmultiDef_sPtr != (multiDef_s*)0xFFFFFFFF);
		if (!*outmultiDef_sPtr)
		{
			*outmultiDef_sPtr = AllocSave_multiDef_s();
			varmultiDef_s = *varmultiDef_sPtr;
			streammultiDef_s = *outmultiDef_sPtr;
			auto v1 = sub_44AF80((void**)streammultiDef_sPtr, (void**)outmultiDef_sPtr);
			DB_FindStreamDataOrInsert((void*)*varmultiDef_sPtr, v1);
			Save_multiDef_s(true);
		}
	}
}

void Save_multiDef_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varmultiDef_sPtr, sizeof(multiDef_s*) * count, (void**)&outmultiDef_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_multiDef_sPtr(false);
		varmultiDef_sPtr++;
		outmultiDef_sPtr++;
		streammultiDef_sPtr++;
	}
}

void Save_newsTickerDef_s(bool atStreamStart)
{
	// todo!
}

void Save_newsTickerDef_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varnewsTickerDef_s, sizeof(newsTickerDef_s) * count, (void**)&outnewsTickerDef_s);
	for (int i = 0; i < count; i++)
	{
		Save_newsTickerDef_s(false);
		varnewsTickerDef_s++;
		outnewsTickerDef_s++;
		streamnewsTickerDef_s++;
	}
}

void Save_newsTickerDef_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varnewsTickerDef_sPtr, sizeof(newsTickerDef_s*), (void**)&outnewsTickerDef_sPtr);
	if (*varnewsTickerDef_sPtr)
	{
		*outnewsTickerDef_sPtr = (newsTickerDef_s*)DB_FindStreamData(*varnewsTickerDef_sPtr);
		assert(*outnewsTickerDef_sPtr != (newsTickerDef_s*)0xFFFFFFFF);
		if (!*outnewsTickerDef_sPtr)
		{
			*outnewsTickerDef_sPtr = AllocSave_newsTickerDef_s();
			varnewsTickerDef_s = *varnewsTickerDef_sPtr;
			streamnewsTickerDef_s = *outnewsTickerDef_sPtr;
			auto v1 = sub_44AF80((void**)streamnewsTickerDef_sPtr, (void**)outnewsTickerDef_sPtr);
			DB_FindStreamDataOrInsert((void*)*varnewsTickerDef_sPtr, v1);
			Save_newsTickerDef_s(true);
		}
	}
}

void Save_newsTickerDef_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varnewsTickerDef_sPtr, sizeof(newsTickerDef_s*) * count, (void**)&outnewsTickerDef_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_newsTickerDef_sPtr(false);
		varnewsTickerDef_sPtr++;
		outnewsTickerDef_sPtr++;
		streamnewsTickerDef_sPtr++;
	}
}

void Save_operandInternalDataUnion(bool atStreamStart)
{
	// todo!
}

void Save_operandInternalDataUnionArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varoperandInternalDataUnion, sizeof(operandInternalDataUnion) * count, (void**)&outoperandInternalDataUnion);
	for (int i = 0; i < count; i++)
	{
		Save_operandInternalDataUnion(false);
		varoperandInternalDataUnion++;
		outoperandInternalDataUnion++;
		streamoperandInternalDataUnion++;
	}
}

void Save_operandInternalDataUnionPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varoperandInternalDataUnionPtr, sizeof(operandInternalDataUnion*), (void**)&outoperandInternalDataUnionPtr);
	if (*varoperandInternalDataUnionPtr)
	{
		*outoperandInternalDataUnionPtr = (operandInternalDataUnion*)DB_FindStreamData(*varoperandInternalDataUnionPtr);
		assert(*outoperandInternalDataUnionPtr != (operandInternalDataUnion*)0xFFFFFFFF);
		if (!*outoperandInternalDataUnionPtr)
		{
			*outoperandInternalDataUnionPtr = AllocSave_operandInternalDataUnion();
			varoperandInternalDataUnion = *varoperandInternalDataUnionPtr;
			streamoperandInternalDataUnion = *outoperandInternalDataUnionPtr;
			auto v1 = sub_44AF80((void**)streamoperandInternalDataUnionPtr, (void**)outoperandInternalDataUnionPtr);
			DB_FindStreamDataOrInsert((void*)*varoperandInternalDataUnionPtr, v1);
			Save_operandInternalDataUnion(true);
		}
	}
}

void Save_operandInternalDataUnionPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varoperandInternalDataUnionPtr, sizeof(operandInternalDataUnion*) * count, (void**)&outoperandInternalDataUnionPtr);
	for (int i = 0; i < count; i++)
	{
		Save_operandInternalDataUnionPtr(false);
		varoperandInternalDataUnionPtr++;
		outoperandInternalDataUnionPtr++;
		streamoperandInternalDataUnionPtr++;
	}
}

void Save_rectDef_s(bool atStreamStart)
{
	// todo!
}

void Save_rectDef_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varrectDef_s, sizeof(rectDef_s) * count, (void**)&outrectDef_s);
	for (int i = 0; i < count; i++)
	{
		Save_rectDef_s(false);
		varrectDef_s++;
		outrectDef_s++;
		streamrectDef_s++;
	}
}

void Save_rectDef_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varrectDef_sPtr, sizeof(rectDef_s*), (void**)&outrectDef_sPtr);
	if (*varrectDef_sPtr)
	{
		*outrectDef_sPtr = (rectDef_s*)DB_FindStreamData(*varrectDef_sPtr);
		assert(*outrectDef_sPtr != (rectDef_s*)0xFFFFFFFF);
		if (!*outrectDef_sPtr)
		{
			*outrectDef_sPtr = AllocSave_rectDef_s();
			varrectDef_s = *varrectDef_sPtr;
			streamrectDef_s = *outrectDef_sPtr;
			auto v1 = sub_44AF80((void**)streamrectDef_sPtr, (void**)outrectDef_sPtr);
			DB_FindStreamDataOrInsert((void*)*varrectDef_sPtr, v1);
			Save_rectDef_s(true);
		}
	}
}

void Save_rectDef_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varrectDef_sPtr, sizeof(rectDef_s*) * count, (void**)&outrectDef_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_rectDef_sPtr(false);
		varrectDef_sPtr++;
		outrectDef_sPtr++;
		streamrectDef_sPtr++;
	}
}

void Save_snd_alias_list_t(bool atStreamStart)
{
	// todo!
}

void Save_snd_alias_list_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varsnd_alias_list_t, sizeof(snd_alias_list_t) * count, (void**)&outsnd_alias_list_t);
	for (int i = 0; i < count; i++)
	{
		Save_snd_alias_list_t(false);
		varsnd_alias_list_t++;
		outsnd_alias_list_t++;
		streamsnd_alias_list_t++;
	}
}

void Save_snd_alias_list_tAsset(snd_alias_list_t** asset)
{
	// todo!
}

void Save_snd_alias_list_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varsnd_alias_list_tPtr, sizeof(snd_alias_list_t*), (void**)&outsnd_alias_list_tPtr);
	DB_PushStreamPos(XFILE_BLOCK_TEMP);
	if (*varsnd_alias_list_tPtr)
	{
		*outsnd_alias_list_tPtr = (snd_alias_list_t*)DB_FindStreamData(*varsnd_alias_list_tPtr);
		assert(*outsnd_alias_list_tPtr != (snd_alias_list_t*)0xFFFFFFFF);
		if (!*outsnd_alias_list_tPtr)
		{
			*outsnd_alias_list_tPtr = AllocSave_snd_alias_list_t();
			varsnd_alias_list_t = *varsnd_alias_list_tPtr;
			streamsnd_alias_list_t = *outsnd_alias_list_tPtr;
			auto v1 = sub_44AF80((void**)streamsnd_alias_list_tPtr, (void**)outsnd_alias_list_tPtr);
			DB_FindStreamDataOrInsert((void*)*varsnd_alias_list_tPtr, v1);
			Save_snd_alias_list_t(true);
		}
	}
	DB_PopStreamPos();
}

void Save_snd_alias_list_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varsnd_alias_list_tPtr, sizeof(snd_alias_list_t*) * count, (void**)&outsnd_alias_list_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_snd_alias_list_tPtr(false);
		varsnd_alias_list_tPtr++;
		outsnd_alias_list_tPtr++;
		streamsnd_alias_list_tPtr++;
	}
}

void Save_snd_alias_t(bool atStreamStart)
{
	// todo!
}

void Save_snd_alias_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varsnd_alias_t, sizeof(snd_alias_t) * count, (void**)&outsnd_alias_t);
	for (int i = 0; i < count; i++)
	{
		Save_snd_alias_t(false);
		varsnd_alias_t++;
		outsnd_alias_t++;
		streamsnd_alias_t++;
	}
}

void Save_snd_alias_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varsnd_alias_tPtr, sizeof(snd_alias_t*), (void**)&outsnd_alias_tPtr);
	if (*varsnd_alias_tPtr)
	{
		*outsnd_alias_tPtr = (snd_alias_t*)DB_FindStreamData(*varsnd_alias_tPtr);
		assert(*outsnd_alias_tPtr != (snd_alias_t*)0xFFFFFFFF);
		if (!*outsnd_alias_tPtr)
		{
			*outsnd_alias_tPtr = AllocSave_snd_alias_t();
			varsnd_alias_t = *varsnd_alias_tPtr;
			streamsnd_alias_t = *outsnd_alias_tPtr;
			auto v1 = sub_44AF80((void**)streamsnd_alias_tPtr, (void**)outsnd_alias_tPtr);
			DB_FindStreamDataOrInsert((void*)*varsnd_alias_tPtr, v1);
			Save_snd_alias_t(true);
		}
	}
}

void Save_snd_alias_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varsnd_alias_tPtr, sizeof(snd_alias_t*) * count, (void**)&outsnd_alias_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_snd_alias_tPtr(false);
		varsnd_alias_tPtr++;
		outsnd_alias_tPtr++;
		streamsnd_alias_tPtr++;
	}
}

void Save_textScrollDef_s(bool atStreamStart)
{
	// todo!
}

void Save_textScrollDef_sArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, vartextScrollDef_s, sizeof(textScrollDef_s) * count, (void**)&outtextScrollDef_s);
	for (int i = 0; i < count; i++)
	{
		Save_textScrollDef_s(false);
		vartextScrollDef_s++;
		outtextScrollDef_s++;
		streamtextScrollDef_s++;
	}
}

void Save_textScrollDef_sPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, vartextScrollDef_sPtr, sizeof(textScrollDef_s*), (void**)&outtextScrollDef_sPtr);
	if (*vartextScrollDef_sPtr)
	{
		*outtextScrollDef_sPtr = (textScrollDef_s*)DB_FindStreamData(*vartextScrollDef_sPtr);
		assert(*outtextScrollDef_sPtr != (textScrollDef_s*)0xFFFFFFFF);
		if (!*outtextScrollDef_sPtr)
		{
			*outtextScrollDef_sPtr = AllocSave_textScrollDef_s();
			vartextScrollDef_s = *vartextScrollDef_sPtr;
			streamtextScrollDef_s = *outtextScrollDef_sPtr;
			auto v1 = sub_44AF80((void**)streamtextScrollDef_sPtr, (void**)outtextScrollDef_sPtr);
			DB_FindStreamDataOrInsert((void*)*vartextScrollDef_sPtr, v1);
			Save_textScrollDef_s(true);
		}
	}
}

void Save_textScrollDef_sPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, vartextScrollDef_sPtr, sizeof(textScrollDef_s*) * count, (void**)&outtextScrollDef_sPtr);
	for (int i = 0; i < count; i++)
	{
		Save_textScrollDef_sPtr(false);
		vartextScrollDef_sPtr++;
		outtextScrollDef_sPtr++;
		streamtextScrollDef_sPtr++;
	}
}

void Save_uint16(bool atStreamStart)
{
	// todo!
}

void Save_uint16Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varuint16, sizeof(uint16) * count, (void**)&outuint16);
	for (int i = 0; i < count; i++)
	{
		Save_uint16(false);
		varuint16++;
		outuint16++;
		streamuint16++;
	}
}

void Save_uint16Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varuint16Ptr, sizeof(uint16*), (void**)&outuint16Ptr);
	if (*varuint16Ptr)
	{
		*outuint16Ptr = (uint16*)DB_FindStreamData(*varuint16Ptr);
		assert(*outuint16Ptr != (uint16*)0xFFFFFFFF);
		if (!*outuint16Ptr)
		{
			*outuint16Ptr = AllocSave_uint16();
			varuint16 = *varuint16Ptr;
			streamuint16 = *outuint16Ptr;
			auto v1 = sub_44AF80((void**)streamuint16Ptr, (void**)outuint16Ptr);
			DB_FindStreamDataOrInsert((void*)*varuint16Ptr, v1);
			Save_uint16(true);
		}
	}
}

void Save_uint16PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varuint16Ptr, sizeof(uint16*) * count, (void**)&outuint16Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_uint16Ptr(false);
		varuint16Ptr++;
		outuint16Ptr++;
		streamuint16Ptr++;
	}
}

void Save_uint32(bool atStreamStart)
{
	// todo!
}

void Save_uint32Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varuint32, sizeof(uint32) * count, (void**)&outuint32);
	for (int i = 0; i < count; i++)
	{
		Save_uint32(false);
		varuint32++;
		outuint32++;
		streamuint32++;
	}
}

void Save_uint32Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varuint32Ptr, sizeof(uint32*), (void**)&outuint32Ptr);
	if (*varuint32Ptr)
	{
		*outuint32Ptr = (uint32*)DB_FindStreamData(*varuint32Ptr);
		assert(*outuint32Ptr != (uint32*)0xFFFFFFFF);
		if (!*outuint32Ptr)
		{
			*outuint32Ptr = AllocSave_uint32();
			varuint32 = *varuint32Ptr;
			streamuint32 = *outuint32Ptr;
			auto v1 = sub_44AF80((void**)streamuint32Ptr, (void**)outuint32Ptr);
			DB_FindStreamDataOrInsert((void*)*varuint32Ptr, v1);
			Save_uint32(true);
		}
	}
}

void Save_uint32PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varuint32Ptr, sizeof(uint32*) * count, (void**)&outuint32Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_uint32Ptr(false);
		varuint32Ptr++;
		outuint32Ptr++;
		streamuint32Ptr++;
	}
}

void Save_uint64(bool atStreamStart)
{
	// todo!
}

void Save_uint64Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varuint64, sizeof(uint64) * count, (void**)&outuint64);
	for (int i = 0; i < count; i++)
	{
		Save_uint64(false);
		varuint64++;
		outuint64++;
		streamuint64++;
	}
}

void Save_uint64Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varuint64Ptr, sizeof(uint64*), (void**)&outuint64Ptr);
	if (*varuint64Ptr)
	{
		*outuint64Ptr = (uint64*)DB_FindStreamData(*varuint64Ptr);
		assert(*outuint64Ptr != (uint64*)0xFFFFFFFF);
		if (!*outuint64Ptr)
		{
			*outuint64Ptr = AllocSave_uint64();
			varuint64 = *varuint64Ptr;
			streamuint64 = *outuint64Ptr;
			auto v1 = sub_44AF80((void**)streamuint64Ptr, (void**)outuint64Ptr);
			DB_FindStreamDataOrInsert((void*)*varuint64Ptr, v1);
			Save_uint64(true);
		}
	}
}

void Save_uint64PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varuint64Ptr, sizeof(uint64*) * count, (void**)&outuint64Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_uint64Ptr(false);
		varuint64Ptr++;
		outuint64Ptr++;
		streamuint64Ptr++;
	}
}

void Save_uint8(bool atStreamStart)
{
	// todo!
}

void Save_uint8Array(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varuint8, sizeof(uint8) * count, (void**)&outuint8);
	for (int i = 0; i < count; i++)
	{
		Save_uint8(false);
		varuint8++;
		outuint8++;
		streamuint8++;
	}
}

void Save_uint8Ptr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varuint8Ptr, sizeof(uint8*), (void**)&outuint8Ptr);
	if (*varuint8Ptr)
	{
		*outuint8Ptr = (uint8*)DB_FindStreamData(*varuint8Ptr);
		assert(*outuint8Ptr != (uint8*)0xFFFFFFFF);
		if (!*outuint8Ptr)
		{
			*outuint8Ptr = AllocSave_uint8();
			varuint8 = *varuint8Ptr;
			streamuint8 = *outuint8Ptr;
			auto v1 = sub_44AF80((void**)streamuint8Ptr, (void**)outuint8Ptr);
			DB_FindStreamDataOrInsert((void*)*varuint8Ptr, v1);
			Save_uint8(true);
		}
	}
}

void Save_uint8PtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varuint8Ptr, sizeof(uint8*) * count, (void**)&outuint8Ptr);
	for (int i = 0; i < count; i++)
	{
		Save_uint8Ptr(false);
		varuint8Ptr++;
		outuint8Ptr++;
		streamuint8Ptr++;
	}
}

void Save_vec1_t(bool atStreamStart)
{
	// todo!
}

void Save_vec1_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varvec1_t, sizeof(vec1_t) * count, (void**)&outvec1_t);
	for (int i = 0; i < count; i++)
	{
		Save_vec1_t(false);
		varvec1_t++;
		outvec1_t++;
		streamvec1_t++;
	}
}

void Save_vec1_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varvec1_tPtr, sizeof(vec1_t*), (void**)&outvec1_tPtr);
	if (*varvec1_tPtr)
	{
		*outvec1_tPtr = (vec1_t*)DB_FindStreamData(*varvec1_tPtr);
		assert(*outvec1_tPtr != (vec1_t*)0xFFFFFFFF);
		if (!*outvec1_tPtr)
		{
			*outvec1_tPtr = AllocSave_vec1_t();
			varvec1_t = *varvec1_tPtr;
			streamvec1_t = *outvec1_tPtr;
			auto v1 = sub_44AF80((void**)streamvec1_tPtr, (void**)outvec1_tPtr);
			DB_FindStreamDataOrInsert((void*)*varvec1_tPtr, v1);
			Save_vec1_t(true);
		}
	}
}

void Save_vec1_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varvec1_tPtr, sizeof(vec1_t*) * count, (void**)&outvec1_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_vec1_tPtr(false);
		varvec1_tPtr++;
		outvec1_tPtr++;
		streamvec1_tPtr++;
	}
}

void Save_vec2_t(bool atStreamStart)
{
	// todo!
}

void Save_vec2_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varvec2_t, sizeof(vec2_t) * count, (void**)&outvec2_t);
	for (int i = 0; i < count; i++)
	{
		Save_vec2_t(false);
		varvec2_t++;
		outvec2_t++;
		streamvec2_t++;
	}
}

void Save_vec2_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varvec2_tPtr, sizeof(vec2_t*), (void**)&outvec2_tPtr);
	if (*varvec2_tPtr)
	{
		*outvec2_tPtr = (vec2_t*)DB_FindStreamData(*varvec2_tPtr);
		assert(*outvec2_tPtr != (vec2_t*)0xFFFFFFFF);
		if (!*outvec2_tPtr)
		{
			*outvec2_tPtr = AllocSave_vec2_t();
			varvec2_t = *varvec2_tPtr;
			streamvec2_t = *outvec2_tPtr;
			auto v1 = sub_44AF80((void**)streamvec2_tPtr, (void**)outvec2_tPtr);
			DB_FindStreamDataOrInsert((void*)*varvec2_tPtr, v1);
			Save_vec2_t(true);
		}
	}
}

void Save_vec2_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varvec2_tPtr, sizeof(vec2_t*) * count, (void**)&outvec2_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_vec2_tPtr(false);
		varvec2_tPtr++;
		outvec2_tPtr++;
		streamvec2_tPtr++;
	}
}

void Save_vec3_t(bool atStreamStart)
{
	// todo!
}

void Save_vec3_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varvec3_t, sizeof(vec3_t) * count, (void**)&outvec3_t);
	for (int i = 0; i < count; i++)
	{
		Save_vec3_t(false);
		varvec3_t++;
		outvec3_t++;
		streamvec3_t++;
	}
}

void Save_vec3_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varvec3_tPtr, sizeof(vec3_t*), (void**)&outvec3_tPtr);
	if (*varvec3_tPtr)
	{
		*outvec3_tPtr = (vec3_t*)DB_FindStreamData(*varvec3_tPtr);
		assert(*outvec3_tPtr != (vec3_t*)0xFFFFFFFF);
		if (!*outvec3_tPtr)
		{
			*outvec3_tPtr = AllocSave_vec3_t();
			varvec3_t = *varvec3_tPtr;
			streamvec3_t = *outvec3_tPtr;
			auto v1 = sub_44AF80((void**)streamvec3_tPtr, (void**)outvec3_tPtr);
			DB_FindStreamDataOrInsert((void*)*varvec3_tPtr, v1);
			Save_vec3_t(true);
		}
	}
}

void Save_vec3_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varvec3_tPtr, sizeof(vec3_t*) * count, (void**)&outvec3_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_vec3_tPtr(false);
		varvec3_tPtr++;
		outvec3_tPtr++;
		streamvec3_tPtr++;
	}
}

void Save_vec4_t(bool atStreamStart)
{
	// todo!
}

void Save_vec4_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varvec4_t, sizeof(vec4_t) * count, (void**)&outvec4_t);
	for (int i = 0; i < count; i++)
	{
		Save_vec4_t(false);
		varvec4_t++;
		outvec4_t++;
		streamvec4_t++;
	}
}

void Save_vec4_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varvec4_tPtr, sizeof(vec4_t*), (void**)&outvec4_tPtr);
	if (*varvec4_tPtr)
	{
		*outvec4_tPtr = (vec4_t*)DB_FindStreamData(*varvec4_tPtr);
		assert(*outvec4_tPtr != (vec4_t*)0xFFFFFFFF);
		if (!*outvec4_tPtr)
		{
			*outvec4_tPtr = AllocSave_vec4_t();
			varvec4_t = *varvec4_tPtr;
			streamvec4_t = *outvec4_tPtr;
			auto v1 = sub_44AF80((void**)streamvec4_tPtr, (void**)outvec4_tPtr);
			DB_FindStreamDataOrInsert((void*)*varvec4_tPtr, v1);
			Save_vec4_t(true);
		}
	}
}

void Save_vec4_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varvec4_tPtr, sizeof(vec4_t*) * count, (void**)&outvec4_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_vec4_tPtr(false);
		varvec4_tPtr++;
		outvec4_tPtr++;
		streamvec4_tPtr++;
	}
}

void Save_water_t(bool atStreamStart)
{
	// todo!
}

void Save_water_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varwater_t, sizeof(water_t) * count, (void**)&outwater_t);
	for (int i = 0; i < count; i++)
	{
		Save_water_t(false);
		varwater_t++;
		outwater_t++;
		streamwater_t++;
	}
}

void Save_water_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varwater_tPtr, sizeof(water_t*), (void**)&outwater_tPtr);
	if (*varwater_tPtr)
	{
		*outwater_tPtr = (water_t*)DB_FindStreamData(*varwater_tPtr);
		assert(*outwater_tPtr != (water_t*)0xFFFFFFFF);
		if (!*outwater_tPtr)
		{
			*outwater_tPtr = AllocSave_water_t();
			varwater_t = *varwater_tPtr;
			streamwater_t = *outwater_tPtr;
			auto v1 = sub_44AF80((void**)streamwater_tPtr, (void**)outwater_tPtr);
			DB_FindStreamDataOrInsert((void*)*varwater_tPtr, v1);
			Save_water_t(true);
		}
	}
}

void Save_water_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varwater_tPtr, sizeof(water_t*) * count, (void**)&outwater_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_water_tPtr(false);
		varwater_tPtr++;
		outwater_tPtr++;
		streamwater_tPtr++;
	}
}

void Save_windowDef_t(bool atStreamStart)
{
	// todo!
}

void Save_windowDef_tArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varwindowDef_t, sizeof(windowDef_t) * count, (void**)&outwindowDef_t);
	for (int i = 0; i < count; i++)
	{
		Save_windowDef_t(false);
		varwindowDef_t++;
		outwindowDef_t++;
		streamwindowDef_t++;
	}
}

void Save_windowDef_tPtr(bool atStreamStart)
{
	Save_Stream(atStreamStart, varwindowDef_tPtr, sizeof(windowDef_t*), (void**)&outwindowDef_tPtr);
	if (*varwindowDef_tPtr)
	{
		*outwindowDef_tPtr = (windowDef_t*)DB_FindStreamData(*varwindowDef_tPtr);
		assert(*outwindowDef_tPtr != (windowDef_t*)0xFFFFFFFF);
		if (!*outwindowDef_tPtr)
		{
			*outwindowDef_tPtr = AllocSave_windowDef_t();
			varwindowDef_t = *varwindowDef_tPtr;
			streamwindowDef_t = *outwindowDef_tPtr;
			auto v1 = sub_44AF80((void**)streamwindowDef_tPtr, (void**)outwindowDef_tPtr);
			DB_FindStreamDataOrInsert((void*)*varwindowDef_tPtr, v1);
			Save_windowDef_t(true);
		}
	}
}

void Save_windowDef_tPtrArray(bool atStreamStart, int count)
{
	Save_Stream(atStreamStart, varwindowDef_tPtr, sizeof(windowDef_t*) * count, (void**)&outwindowDef_tPtr);
	for (int i = 0; i < count; i++)
	{
		Save_windowDef_tPtr(false);
		varwindowDef_tPtr++;
		outwindowDef_tPtr++;
		streamwindowDef_tPtr++;
	}
}

water_t* AllocLoad_water_t()
{
	return (water_t*)DB_AllocStreamPos(3);
}

water_t* AllocSave_water_t()
{
	return (water_t*)DB_AllocStreamPos(3);
}

water_t** AllocLoad_water_tPtr()
{
	return (water_t**)DB_AllocStreamPos(3);
}

water_t** AllocSave_water_tPtr()
{
	return (water_t**)DB_AllocStreamPos(3);
}

windowDef_t* AllocLoad_windowDef_t()
{
	return (windowDef_t*)DB_AllocStreamPos(3);
}

windowDef_t* AllocSave_windowDef_t()
{
	return (windowDef_t*)DB_AllocStreamPos(3);
}

windowDef_t** AllocLoad_windowDef_tPtr()
{
	return (windowDef_t**)DB_AllocStreamPos(3);
}

windowDef_t** AllocSave_windowDef_tPtr()
{
	return (windowDef_t**)DB_AllocStreamPos(3);
}

const char *(*DB_XAssetGetNameHandler[ASSET_TYPE_COUNT])(XAssetHeader*) = 
{
	DB_PhysPresetGetName,
	DB_PhysCollmapGetName,
	DB_XAnimPartsGetName,
	DB_XModelSurfsGetName,
	DB_XModelGetName,
	DB_MaterialGetName,
	DB_MaterialPixelShaderGetName,
	DB_MaterialVertexShaderGetName,
	DB_MaterialVertexDeclarationGetName,
	DB_MaterialTechniqueSetGetName,
	DB_GfxImageGetName,
	DB_snd_alias_list_tGetName,
	DB_SndCurveGetName,
	nullptr,
	nullptr,
	DB_clipMap_tGetName,
	DB_ComWorldGetName,
	nullptr,
	DB_GameWorldMpGetName,
	DB_MapEntsGetName,
	DB_FxWorldGetName,
	nullptr,
	DB_GfxLightDefGetName,
	nullptr,
	DB_Font_sGetName,
	DB_MenuListGetName,
	DB_menuDef_tGetName,
	DB_LocalizeEntryGetName,
	nullptr,
	nullptr,
	DB_FxEffectDefGetName,
	nullptr,
	nullptr,
	nullptr,
	nullptr,
	nullptr,
	DB_RawFileGetName,
	DB_StringTableGetName,
	DB_LeaderboardDefGetName,
	DB_StructuredDataDefSetGetName,
	DB_TracerDefGetName,
	nullptr,
	nullptr,
};
}
